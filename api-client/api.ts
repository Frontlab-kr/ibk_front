/* tslint:disable */
/* eslint-disable */
/**
 * IbkCloudPlatform StartKit Project
 * IbkCloudPlatform StartKit API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AddressOutVo
 */
export interface AddressOutVo {
    /**
     * 건물관리번호
     * @type {string}
     * @memberof AddressOutVo
     */
    'bldnMngmNo'?: string;
    /**
     * 고유건물관리번호
     * @type {string}
     * @memberof AddressOutVo
     */
    'unqBldnMngmNo'?: string;
    /**
     * 법정동코드
     * @type {string}
     * @memberof AddressOutVo
     */
    'rgdoCd'?: string;
    /**
     * 시도명
     * @type {string}
     * @memberof AddressOutVo
     */
    'sidoNm'?: string;
    /**
     * 도로명시군구주소
     * @type {string}
     * @memberof AddressOutVo
     */
    'rdnmCcwAdr'?: string;
    /**
     * 읍면동주소
     * @type {string}
     * @memberof AddressOutVo
     */
    'emdAdr'?: string;
    /**
     * 리주소
     * @type {string}
     * @memberof AddressOutVo
     */
    'riAdr'?: string;
    /**
     * 산여부
     * @type {string}
     * @memberof AddressOutVo
     */
    'mntnYn'?: string;
    /**
     * 본번지
     * @type {string}
     * @memberof AddressOutVo
     */
    'ognlNad'?: string;
    /**
     * 부번지
     * @type {string}
     * @memberof AddressOutVo
     */
    'sbNad'?: string;
    /**
     * 도로명코드
     * @type {string}
     * @memberof AddressOutVo
     */
    'rdnmCd'?: string;
    /**
     * 도로명
     * @type {string}
     * @memberof AddressOutVo
     */
    'rdNm'?: string;
    /**
     * 지하여부
     * @type {string}
     * @memberof AddressOutVo
     */
    'undgYn'?: string;
    /**
     * 본건물번호
     * @type {string}
     * @memberof AddressOutVo
     */
    'ognlBldnNo'?: string;
    /**
     * 부건물번호
     * @type {string}
     * @memberof AddressOutVo
     */
    'sbBldnNo'?: string;
    /**
     * 건물명
     * @type {string}
     * @memberof AddressOutVo
     */
    'bldnNm'?: string;
    /**
     * 상세건물명
     * @type {string}
     * @memberof AddressOutVo
     */
    'dtlBldnNm'?: string;
    /**
     * 읍면동일련번호
     * @type {string}
     * @memberof AddressOutVo
     */
    'emdSrn'?: string;
    /**
     * 행정동코드
     * @type {string}
     * @memberof AddressOutVo
     */
    'adunCd'?: string;
    /**
     * 행정동코드명
     * @type {string}
     * @memberof AddressOutVo
     */
    'adunCdNm'?: string;
    /**
     * 우편번호
     * @type {string}
     * @memberof AddressOutVo
     */
    'zpcd'?: string;
    /**
     * 우편관리일련번호
     * @type {string}
     * @memberof AddressOutVo
     */
    'pssrMngmSrn'?: string;
    /**
     * 대량배달처명
     * @type {string}
     * @memberof AddressOutVo
     */
    'lrqnDlpcNm'?: string;
    /**
     * 구역번호
     * @type {string}
     * @memberof AddressOutVo
     */
    'zoneNo'?: string;
    /**
     * 구역일련번호
     * @type {number}
     * @memberof AddressOutVo
     */
    'zoneSrn'?: number;
    /**
     * 영문시도명
     * @type {string}
     * @memberof AddressOutVo
     */
    'ensnSidoNm'?: string;
    /**
     * 영문시군구명
     * @type {string}
     * @memberof AddressOutVo
     */
    'ensnCcwNm'?: string;
    /**
     * 영문읍면동명
     * @type {string}
     * @memberof AddressOutVo
     */
    'ensnEmdNm'?: string;
    /**
     * 영문도로명
     * @type {string}
     * @memberof AddressOutVo
     */
    'ensnRdNm'?: string;
    /**
     * 영문건물명
     * @type {string}
     * @memberof AddressOutVo
     */
    'ensnBldnNm'?: string;
    /**
     * 영문리명
     * @type {string}
     * @memberof AddressOutVo
     */
    'ensnRiNm'?: string;
    /**
     * 이동사유코드
     * @type {string}
     * @memberof AddressOutVo
     */
    'mvmnRcd'?: string;
    /**
     * 최종변경년월일
     * @type {string}
     * @memberof AddressOutVo
     */
    'lsmdYmd'?: string;
    /**
     * 시스템최종변경ID
     * @type {string}
     * @memberof AddressOutVo
     */
    'sysLsmdId'?: string;
    /**
     * 시스템최종변경일시
     * @type {string}
     * @memberof AddressOutVo
     */
    'sysLsmdTs'?: string;
    /**
     * ETCL기준년월일
     * @type {string}
     * @memberof AddressOutVo
     */
    'etclBaseYmd'?: string;
    /**
     * ETCL작업일시
     * @type {string}
     * @memberof AddressOutVo
     */
    'etclJobTs'?: string;
}
/**
 * 
 * @export
 * @interface AddressPageInVo
 */
export interface AddressPageInVo {
    /**
     * 페이지당출력건수
     * @type {number}
     * @memberof AddressPageInVo
     */
    'pageSize'?: number;
    /**
     * 페이지번호
     * @type {number}
     * @memberof AddressPageInVo
     */
    'pageNo'?: number;
    /**
     * 주소 검색어
     * @type {string}
     * @memberof AddressPageInVo
     */
    'searchText'?: string;
}
/**
 * 
 * @export
 * @interface ApiInOutVo
 */
export interface ApiInOutVo {
    /**
     * 
     * @type {string}
     * @memberof ApiInOutVo
     */
    'emn': string;
    /**
     * 
     * @type {string}
     * @memberof ApiInOutVo
     */
    'emm': string;
    /**
     * 
     * @type {string}
     * @memberof ApiInOutVo
     */
    'empEnsnNm'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiInOutVo
     */
    'gndrDcd'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiInOutVo
     */
    'hlofYn': string;
    /**
     * 
     * @type {string}
     * @memberof ApiInOutVo
     */
    'etbnDcd'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiInOutVo
     */
    'etbnYmd'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiInOutVo
     */
    'blngBrcd': string;
    /**
     * 
     * @type {string}
     * @memberof ApiInOutVo
     */
    'beteamCd': string;
    /**
     * 
     * @type {string}
     * @memberof ApiInOutVo
     */
    'exigBlngYmd'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiInOutVo
     */
    'trthWorkBrcd'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiInOutVo
     */
    'rswrBrcd'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiInOutVo
     */
    'ducd'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiInOutVo
     */
    'dutyCd'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiInOutVo
     */
    'dutyYmd'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiInOutVo
     */
    'dutyGrd'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiInOutVo
     */
    'mndtCd'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiInOutVo
     */
    'mndtYmd'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiInOutVo
     */
    'jbttCd'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiInOutVo
     */
    'jbttYmd'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiInOutVo
     */
    'jbclCd'?: string;
    /**
     * 
     * @type {number}
     * @memberof ApiInOutVo
     */
    'edpsCsn'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiInOutVo
     */
    'rtrmYmd'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiInOutVo
     */
    'empCpn'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiInOutVo
     */
    'prarOnlNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiInOutVo
     */
    'empExtiNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiInOutVo
     */
    'ead'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiInOutVo
     */
    'cmpnNm'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiInOutVo
     */
    'jtm'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiInOutVo
     */
    'sysBswrDcd': string;
    /**
     * 
     * @type {string}
     * @memberof ApiInOutVo
     */
    'lsmdYmd'?: string;
}
/**
 * 
 * @export
 * @interface ApiInVo
 */
export interface ApiInVo {
    /**
     * 
     * @type {string}
     * @memberof ApiInVo
     */
    'emn': string;
}
/**
 * 결제선
 * @export
 * @interface ApprovalDetailLineOutVo
 */
export interface ApprovalDetailLineOutVo {
    /**
     * 결제순번
     * @type {number}
     * @memberof ApprovalDetailLineOutVo
     */
    'snctSqn'?: number;
    /**
     * 결재자아이디
     * @type {string}
     * @memberof ApprovalDetailLineOutVo
     */
    'snctUserId'?: string;
    /**
     * 결재자이름
     * @type {string}
     * @memberof ApprovalDetailLineOutVo
     */
    'snctUserNm'?: string;
    /**
     * 결재상태
     * @type {string}
     * @memberof ApprovalDetailLineOutVo
     */
    'snctScd'?: string;
    /**
     * 결재일
     * @type {string}
     * @memberof ApprovalDetailLineOutVo
     */
    'snctTs'?: string;
    /**
     * 결재의견
     * @type {string}
     * @memberof ApprovalDetailLineOutVo
     */
    'snctOpnnCon'?: string;
    /**
     * 대결재자아이디
     * @type {string}
     * @memberof ApprovalDetailLineOutVo
     */
    'wrpxUserId'?: string;
    /**
     * 대결재자이름
     * @type {string}
     * @memberof ApprovalDetailLineOutVo
     */
    'prxUserNm'?: string;
    /**
     * 결재유형코드
     * @type {string}
     * @memberof ApprovalDetailLineOutVo
     */
    'snpnDcd'?: string;
    /**
     * 결재유형코드명
     * @type {string}
     * @memberof ApprovalDetailLineOutVo
     */
    'snpnDcdNm'?: string;
    /**
     * 필수여부
     * @type {string}
     * @memberof ApprovalDetailLineOutVo
     */
    'mndrYn'?: string;
}
/**
 * 
 * @export
 * @interface ApprovalDetailOutVo
 */
export interface ApprovalDetailOutVo {
    /**
     * 교육과정코드
     * @type {string}
     * @memberof ApprovalDetailOutVo
     */
    'dutyEdctCd'?: string;
    /**
     * 차수번호
     * @type {number}
     * @memberof ApprovalDetailOutVo
     */
    'edctDsprNo'?: number;
    /**
     * 결재신청서번호
     * @type {number}
     * @memberof ApprovalDetailOutVo
     */
    'snctApfrNo'?: number;
    /**
     * 결재제목
     * @type {string}
     * @memberof ApprovalDetailOutVo
     */
    'ttlNm'?: string;
    /**
     * 본부명
     * @type {string}
     * @memberof ApprovalDetailOutVo
     */
    'blngHdqrDsncNm'?: string;
    /**
     * 부서명
     * @type {string}
     * @memberof ApprovalDetailOutVo
     */
    'deptDsncNm'?: string;
    /**
     * 사용자이름
     * @type {string}
     * @memberof ApprovalDetailOutVo
     */
    'userNm'?: string;
    /**
     * 결재신청일
     * @type {string}
     * @memberof ApprovalDetailOutVo
     */
    'aplcTs'?: string;
    /**
     * 연수시작일
     * @type {string}
     * @memberof ApprovalDetailOutVo
     */
    'lrngSttgTs'?: string;
    /**
     * 연수종료일
     * @type {string}
     * @memberof ApprovalDetailOutVo
     */
    'lrngFnshTs'?: string;
    /**
     * 배송지우편번호
     * @type {string}
     * @memberof ApprovalDetailOutVo
     */
    'dlplPssrNo'?: string;
    /**
     * 배송지기본주소
     * @type {string}
     * @memberof ApprovalDetailOutVo
     */
    'dlplBscAdr'?: string;
    /**
     * 배송지상세주소
     * @type {string}
     * @memberof ApprovalDetailOutVo
     */
    'dlplDtlAdr'?: string;
    /**
     * 회사전화번호
     * @type {string}
     * @memberof ApprovalDetailOutVo
     */
    'rsprCnplCon'?: string;
    /**
     * 핸드폰번호
     * @type {string}
     * @memberof ApprovalDetailOutVo
     */
    'cpn'?: string;
    /**
     * 사용자이메일
     * @type {string}
     * @memberof ApprovalDetailOutVo
     */
    'userEad'?: string;
    /**
     * 교육목적
     * @type {string}
     * @memberof ApprovalDetailOutVo
     */
    'dutyEdctObjtCon'?: string;
    /**
     * 결제선
     * @type {Array<ApprovalDetailLineOutVo>}
     * @memberof ApprovalDetailOutVo
     */
    'approvalDetailLineOutVo'?: Array<ApprovalDetailLineOutVo>;
    /**
     * 신청첨부파일
     * @type {Array<CourseDegreeRequestAtchOutVo>}
     * @memberof ApprovalDetailOutVo
     */
    'courseDegreeRequestAtchOutVo'?: Array<CourseDegreeRequestAtchOutVo>;
}
/**
 * 
 * @export
 * @interface ApprovalDetaillnVo
 */
export interface ApprovalDetaillnVo {
    /**
     * 직무교육코드
     * @type {string}
     * @memberof ApprovalDetaillnVo
     */
    'dutyEdctCd'?: string;
    /**
     * 교육차수번호
     * @type {number}
     * @memberof ApprovalDetaillnVo
     */
    'edctDsprNo'?: number;
    /**
     * 결제번호
     * @type {number}
     * @memberof ApprovalDetaillnVo
     */
    'snctApfrNo'?: number;
    /**
     * 신청자아이디
     * @type {string}
     * @memberof ApprovalDetaillnVo
     */
    'userId'?: string;
}
/**
 * 결제라인 등록 리스트
 * @export
 * @interface ApprovalLinListlnVo
 */
export interface ApprovalLinListlnVo {
    /**
     * 연수코드
     * @type {string}
     * @memberof ApprovalLinListlnVo
     */
    'dutyEdctCd'?: string;
    /**
     * 결재순번
     * @type {string}
     * @memberof ApprovalLinListlnVo
     */
    'snctSqn'?: string;
    /**
     * 결재사용자ID
     * @type {string}
     * @memberof ApprovalLinListlnVo
     */
    'snctUserId'?: string;
}
/**
 * 
 * @export
 * @interface ApprovalLinOutVo
 */
export interface ApprovalLinOutVo {
    /**
     * 교육과정코드
     * @type {string}
     * @memberof ApprovalLinOutVo
     */
    'dutyEdctCd'?: string;
    /**
     * 결제구분코드
     * @type {string}
     * @memberof ApprovalLinOutVo
     */
    'snpnDcd'?: string;
    /**
     * 결제구분명
     * @type {string}
     * @memberof ApprovalLinOutVo
     */
    'snpnDcdNm'?: string;
    /**
     * 결제순번
     * @type {number}
     * @memberof ApprovalLinOutVo
     */
    'snctSqc'?: number;
    /**
     * 필수여부
     * @type {string}
     * @memberof ApprovalLinOutVo
     */
    'mndrYn'?: string;
}
/**
 * 
 * @export
 * @interface ApprovalLinStateInVo
 */
export interface ApprovalLinStateInVo {
    /**
     * 교육과정코드
     * @type {string}
     * @memberof ApprovalLinStateInVo
     */
    'dutyEdctCd'?: string;
    /**
     * 차수번호
     * @type {number}
     * @memberof ApprovalLinStateInVo
     */
    'edctDsprNo'?: number;
    /**
     * 결재신청서번호
     * @type {number}
     * @memberof ApprovalLinStateInVo
     */
    'snctApfrNo'?: number;
    /**
     * 자신결재순서
     * @type {number}
     * @memberof ApprovalLinStateInVo
     */
    'snctSqn'?: number;
    /**
     * 자신결재상태
     * @type {string}
     * @memberof ApprovalLinStateInVo
     */
    'snctScd'?: string;
    /**
     * 결재의견
     * @type {string}
     * @memberof ApprovalLinStateInVo
     */
    'snctOpnnCon'?: string;
}
/**
 * 
 * @export
 * @interface ApprovalLinlnVo
 */
export interface ApprovalLinlnVo {
    /**
     * 연수코드
     * @type {string}
     * @memberof ApprovalLinlnVo
     */
    'dutyEdctCd'?: string;
}
/**
 * 
 * @export
 * @interface ApprovalMyCountOutVo
 */
export interface ApprovalMyCountOutVo {
    /**
     * 
     * @type {string}
     * @memberof ApprovalMyCountOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApprovalMyCountOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApprovalMyCountOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApprovalMyCountOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApprovalMyCountOutVo
     */
    'cncrName'?: string;
    /**
     * 결재할문서수
     * @type {number}
     * @memberof ApprovalMyCountOutVo
     */
    'approvalRCount'?: number;
    /**
     * 결재승인수
     * @type {number}
     * @memberof ApprovalMyCountOutVo
     */
    'approvalACount'?: number;
    /**
     * 결재반려수
     * @type {number}
     * @memberof ApprovalMyCountOutVo
     */
    'approvalFCount'?: number;
    /**
     * 나의결제신청수
     * @type {number}
     * @memberof ApprovalMyCountOutVo
     */
    'myApprovalCount'?: number;
}
/**
 * 
 * @export
 * @interface ApprovalMyOutVo
 */
export interface ApprovalMyOutVo {
    /**
     * 교육과정코드
     * @type {string}
     * @memberof ApprovalMyOutVo
     */
    'dutyEdctCd'?: string;
    /**
     * 차수번호
     * @type {number}
     * @memberof ApprovalMyOutVo
     */
    'edctDsprNo'?: number;
}
/**
 * 
 * @export
 * @interface ApprovalMyPageInVo
 */
export interface ApprovalMyPageInVo {
    /**
     * 
     * @type {number}
     * @memberof ApprovalMyPageInVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApprovalMyPageInVo
     */
    'pageNo'?: number;
    /**
     * 결재타입
     * @type {string}
     * @memberof ApprovalMyPageInVo
     */
    'searchType'?: string;
    /**
     * 검색일시작일
     * @type {string}
     * @memberof ApprovalMyPageInVo
     */
    'searchDateStart'?: string;
    /**
     * 검색일종료일
     * @type {string}
     * @memberof ApprovalMyPageInVo
     */
    'searchDateEnd'?: string;
}
/**
 * 
 * @export
 * @interface ApprovalOutVo
 */
export interface ApprovalOutVo {
    /**
     * 교육과정코드
     * @type {string}
     * @memberof ApprovalOutVo
     */
    'dutyEdctCd'?: string;
    /**
     * 차수번호
     * @type {number}
     * @memberof ApprovalOutVo
     */
    'edctDsprNo'?: number;
    /**
     * 결재신청서번호
     * @type {number}
     * @memberof ApprovalOutVo
     */
    'snctApfrNo'?: number;
    /**
     * 결재제목
     * @type {string}
     * @memberof ApprovalOutVo
     */
    'ttlNm'?: string;
    /**
     * 결재요청자아이디
     * @type {string}
     * @memberof ApprovalOutVo
     */
    'snctUserId'?: string;
    /**
     * 결재신청일
     * @type {string}
     * @memberof ApprovalOutVo
     */
    'aplcTs'?: string;
    /**
     * 연수시작일
     * @type {string}
     * @memberof ApprovalOutVo
     */
    'lrngSttgTs'?: string;
    /**
     * 연수종료일
     * @type {string}
     * @memberof ApprovalOutVo
     */
    'lrngFnshTs'?: string;
    /**
     * 결재라인
     * @type {string}
     * @memberof ApprovalOutVo
     */
    'approvalLine'?: string;
    /**
     * 자신결재순서
     * @type {number}
     * @memberof ApprovalOutVo
     */
    'snctSqn'?: number;
    /**
     * 자신결재상태
     * @type {string}
     * @memberof ApprovalOutVo
     */
    'snctScd'?: string;
    /**
     * 자신결재상태명
     * @type {string}
     * @memberof ApprovalOutVo
     */
    'snctScdNm'?: string;
    /**
     * 결재의견
     * @type {string}
     * @memberof ApprovalOutVo
     */
    'snctOpnnCon'?: string;
    /**
     * 배송지우편번호
     * @type {string}
     * @memberof ApprovalOutVo
     */
    'dlplPssrNo'?: string;
    /**
     * 배송지기본주소
     * @type {string}
     * @memberof ApprovalOutVo
     */
    'dlplBscAdr'?: string;
    /**
     * 배송지상세주소
     * @type {string}
     * @memberof ApprovalOutVo
     */
    'dlplDtlAdr'?: string;
    /**
     * 전체결재상태
     * @type {string}
     * @memberof ApprovalOutVo
     */
    'aplcScd'?: string;
    /**
     * 전체결재상태명
     * @type {string}
     * @memberof ApprovalOutVo
     */
    'aplcScdNm'?: string;
}
/**
 * 
 * @export
 * @interface ApprovalPageInVo
 */
export interface ApprovalPageInVo {
    /**
     * 
     * @type {number}
     * @memberof ApprovalPageInVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApprovalPageInVo
     */
    'pageNo'?: number;
    /**
     * 결재타입
     * @type {string}
     * @memberof ApprovalPageInVo
     */
    'searchType'?: string;
    /**
     * 검색일시작일
     * @type {string}
     * @memberof ApprovalPageInVo
     */
    'searchDateStart'?: string;
    /**
     * 검색일종료일
     * @type {string}
     * @memberof ApprovalPageInVo
     */
    'searchDateEnd'?: string;
}
/**
 * 
 * @export
 * @interface ApprovalRequestInVo
 */
export interface ApprovalRequestInVo {
    /**
     * 교육과정코드
     * @type {string}
     * @memberof ApprovalRequestInVo
     */
    'dutyEdctCd'?: string;
    /**
     * 차수번호
     * @type {number}
     * @memberof ApprovalRequestInVo
     */
    'edctDsprNo'?: number;
    /**
     * 신청사유
     * @type {string}
     * @memberof ApprovalRequestInVo
     */
    'aplcRsnCon'?: string;
    /**
     * 결제라인 등록 리스트
     * @type {Array<ApprovalLinListlnVo>}
     * @memberof ApprovalRequestInVo
     */
    'approvalLinList'?: Array<ApprovalLinListlnVo>;
}
/**
 * 
 * @export
 * @interface ArhdStudyCalendarListInVo
 */
export interface ArhdStudyCalendarListInVo {
    /**
     * 본부코드
     * @type {string}
     * @memberof ArhdStudyCalendarListInVo
     */
    'arhdDsncVl'?: string;
}
/**
 * 
 * @export
 * @interface ArhdStudyCalendarOutVo
 */
export interface ArhdStudyCalendarOutVo {
    /**
     * 교육과정코드
     * @type {string}
     * @memberof ArhdStudyCalendarOutVo
     */
    'dutyEdctCd'?: string;
    /**
     * 연수명
     * @type {string}
     * @memberof ArhdStudyCalendarOutVo
     */
    'dutyEdctNm'?: string;
    /**
     * 차수번호
     * @type {number}
     * @memberof ArhdStudyCalendarOutVo
     */
    'edctDsprNo'?: number;
    /**
     * 차수명
     * @type {string}
     * @memberof ArhdStudyCalendarOutVo
     */
    'edctDsprNm'?: string;
    /**
     * 수강신청시작일
     * @type {string}
     * @memberof ArhdStudyCalendarOutVo
     */
    'aplcSttgTs'?: string;
    /**
     * 수강신청종료일
     * @type {string}
     * @memberof ArhdStudyCalendarOutVo
     */
    'aplcFnshTs'?: string;
    /**
     * 학습시작일
     * @type {string}
     * @memberof ArhdStudyCalendarOutVo
     */
    'lrngSttgTs'?: string;
    /**
     * 학습종료일
     * @type {string}
     * @memberof ArhdStudyCalendarOutVo
     */
    'lrngFnshTs'?: string;
    /**
     * 학습인정시간
     * @type {number}
     * @memberof ArhdStudyCalendarOutVo
     */
    'lrngAcknTim'?: number;
    /**
     * 부서코드
     * @type {string}
     * @memberof ArhdStudyCalendarOutVo
     */
    'arhdDsncVl'?: string;
}
/**
 * 권한 리스트
 * @export
 * @interface AuthInVo
 */
export interface AuthInVo {
    /**
     * 상태(added|modified|deleted)
     * @type {string}
     * @memberof AuthInVo
     */
    'get__rowStatus'?: string;
    /**
     * 권한ID
     * @type {string}
     * @memberof AuthInVo
     */
    'athrId'?: string;
    /**
     * 권한명
     * @type {string}
     * @memberof AuthInVo
     */
    'athrNm'?: string;
    /**
     * 사용자타입코드
     * @type {string}
     * @memberof AuthInVo
     */
    'userTcdVl'?: string;
    /**
     * 화면유형코드
     * @type {string}
     * @memberof AuthInVo
     */
    'screTcd'?: string;
    /**
     * 사용여부
     * @type {string}
     * @memberof AuthInVo
     */
    'useYn'?: string;
}
/**
 * 
 * @export
 * @interface AuthMemberUserOutVo
 */
export interface AuthMemberUserOutVo {
    /**
     * 
     * @type {string}
     * @memberof AuthMemberUserOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthMemberUserOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthMemberUserOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthMemberUserOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthMemberUserOutVo
     */
    'cncrName'?: string;
    /**
     * 사용자ID
     * @type {string}
     * @memberof AuthMemberUserOutVo
     */
    'userId'?: string;
    /**
     * 사용자명
     * @type {string}
     * @memberof AuthMemberUserOutVo
     */
    'userNm'?: string;
    /**
     * 직원번호
     * @type {string}
     * @memberof AuthMemberUserOutVo
     */
    'emplNo'?: string;
    /**
     * 부서명
     * @type {string}
     * @memberof AuthMemberUserOutVo
     */
    'deptDsncNm'?: string;
    /**
     * 직급명
     * @type {string}
     * @memberof AuthMemberUserOutVo
     */
    'rsptDsncNm'?: string;
}
/**
 * 
 * @export
 * @interface AuthMemberUserPageInqInVo
 */
export interface AuthMemberUserPageInqInVo {
    /**
     * 페이지당출력건수
     * @type {number}
     * @memberof AuthMemberUserPageInqInVo
     */
    'pageSize'?: number;
    /**
     * 페이지번호
     * @type {number}
     * @memberof AuthMemberUserPageInqInVo
     */
    'pageNo'?: number;
    /**
     * 페이지그룹조회여부
     * @type {string}
     * @memberof AuthMemberUserPageInqInVo
     */
    'pageGrpInqYn'?: string;
    /**
     * 페이지그룹수
     * @type {number}
     * @memberof AuthMemberUserPageInqInVo
     */
    'pageGrpNbi'?: number;
    /**
     * 검색어(이름/직원번호)
     * @type {string}
     * @memberof AuthMemberUserPageInqInVo
     */
    'searchText'?: string;
    /**
     * 이름
     * @type {string}
     * @memberof AuthMemberUserPageInqInVo
     */
    'userNm'?: string;
    /**
     * 직원번호
     * @type {string}
     * @memberof AuthMemberUserPageInqInVo
     */
    'emplNo'?: string;
    /**
     * 부서명
     * @type {string}
     * @memberof AuthMemberUserPageInqInVo
     */
    'deptDsncNm'?: string;
    /**
     * 직급명
     * @type {string}
     * @memberof AuthMemberUserPageInqInVo
     */
    'rsptDsncNm'?: string;
    /**
     * 제외 유저 아이디 리스트
     * @type {Array<string>}
     * @memberof AuthMemberUserPageInqInVo
     */
    'exceptionUserList'?: Array<string>;
}
/**
 * 
 * @export
 * @interface AuthOutVo
 */
export interface AuthOutVo {
    /**
     * 
     * @type {string}
     * @memberof AuthOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthOutVo
     */
    'cncrName'?: string;
    /**
     * 권한ID
     * @type {string}
     * @memberof AuthOutVo
     */
    'athrId'?: string;
    /**
     * 권한명
     * @type {string}
     * @memberof AuthOutVo
     */
    'athrNm'?: string;
    /**
     * 사용자타입코드
     * @type {string}
     * @memberof AuthOutVo
     */
    'userTcdVl'?: string;
    /**
     * 화면유형코드(ADMIN|USER)
     * @type {string}
     * @memberof AuthOutVo
     */
    'screTcd'?: string;
    /**
     * 사용여부
     * @type {string}
     * @memberof AuthOutVo
     */
    'useYn'?: string;
}
/**
 * 카테고리 리스트
 * @export
 * @interface BoardCategoryInVo
 */
export interface BoardCategoryInVo {
    /**
     * 게시판 아이디
     * @type {number}
     * @memberof BoardCategoryInVo
     */
    'blbrNo'?: number;
    /**
     * 카테고리 아이디
     * @type {number}
     * @memberof BoardCategoryInVo
     */
    'blbrCtgyId'?: number;
    /**
     * 카테고리 명
     * @type {string}
     * @memberof BoardCategoryInVo
     */
    'ctgyNm'?: string;
    /**
     * 카테고리 사용 여부
     * @type {string}
     * @memberof BoardCategoryInVo
     */
    'useYn'?: string;
    /**
     * 카테고리 삭제, 추가 여부(DELL, ADD) 수정시만 사용
     * @type {string}
     * @memberof BoardCategoryInVo
     */
    'ctgyStatusType'?: string;
}
/**
 * 
 * @export
 * @interface BoardCategoryListInVo
 */
export interface BoardCategoryListInVo {
    /**
     * 게시판 아이디
     * @type {number}
     * @memberof BoardCategoryListInVo
     */
    'blbrNo'?: number;
    /**
     * 카테고리 아이디
     * @type {number}
     * @memberof BoardCategoryListInVo
     */
    'blbrCtgyId'?: number;
}
/**
 * 카테고리 리스트
 * @export
 * @interface BoardCategoryOutVo
 */
export interface BoardCategoryOutVo {
    /**
     * 게시판 아이디
     * @type {number}
     * @memberof BoardCategoryOutVo
     */
    'blbrNo'?: number;
    /**
     * 카테고리 아이디
     * @type {number}
     * @memberof BoardCategoryOutVo
     */
    'blbrCtgyId'?: number;
    /**
     * 카테고리 명
     * @type {string}
     * @memberof BoardCategoryOutVo
     */
    'ctgyNm'?: string;
    /**
     * 카테고리 사용 여부
     * @type {string}
     * @memberof BoardCategoryOutVo
     */
    'useYn'?: string;
    /**
     * 등록 일시
     * @type {string}
     * @memberof BoardCategoryOutVo
     */
    'cretTs'?: string;
    /**
     * 등록자 ID
     * @type {string}
     * @memberof BoardCategoryOutVo
     */
    'cncrId'?: string;
    /**
     * 수정 일시
     * @type {string}
     * @memberof BoardCategoryOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 수정자 ID
     * @type {string}
     * @memberof BoardCategoryOutVo
     */
    'hrdSysLastMdfrId'?: string;
}
/**
 * 
 * @export
 * @interface BoardContentsCommentInVo
 */
export interface BoardContentsCommentInVo {
    /**
     * 게시판 아이디
     * @type {number}
     * @memberof BoardContentsCommentInVo
     */
    'blbrNo'?: number;
    /**
     * 게시글 아이디
     * @type {number}
     * @memberof BoardContentsCommentInVo
     */
    'blbrPtngId'?: number;
    /**
     * 댓글 아이디
     * @type {number}
     * @memberof BoardContentsCommentInVo
     */
    'blbrRpcmId'?: number;
    /**
     * 부모 댓글 아이디
     * @type {number}
     * @memberof BoardContentsCommentInVo
     */
    'hgrnBlbrRpcmId'?: number;
    /**
     * 댓글 내용
     * @type {string}
     * @memberof BoardContentsCommentInVo
     */
    'blbrRpcmCon'?: string;
    /**
     * 사용 여부
     * @type {string}
     * @memberof BoardContentsCommentInVo
     */
    'useYn'?: string;
}
/**
 * 
 * @export
 * @interface BoardContentsCommentOutVo
 */
export interface BoardContentsCommentOutVo {
    /**
     * 
     * @type {string}
     * @memberof BoardContentsCommentOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardContentsCommentOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardContentsCommentOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardContentsCommentOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardContentsCommentOutVo
     */
    'cncrName'?: string;
    /**
     * 게시판 아이디
     * @type {number}
     * @memberof BoardContentsCommentOutVo
     */
    'blbrNo'?: number;
    /**
     * 게시판 명
     * @type {string}
     * @memberof BoardContentsCommentOutVo
     */
    'blbrNm'?: string;
    /**
     * 게시글 아이디
     * @type {number}
     * @memberof BoardContentsCommentOutVo
     */
    'blbrPtngId'?: number;
    /**
     * 게시글 명
     * @type {string}
     * @memberof BoardContentsCommentOutVo
     */
    'bltApowTtlNm'?: string;
    /**
     * 댓글 아이디
     * @type {number}
     * @memberof BoardContentsCommentOutVo
     */
    'blbrRpcmId'?: number;
    /**
     * 부모 댓글 아이디
     * @type {number}
     * @memberof BoardContentsCommentOutVo
     */
    'hgrnBlbrRpcmId'?: number;
    /**
     * 댓글 내용
     * @type {string}
     * @memberof BoardContentsCommentOutVo
     */
    'blbrRpcmCon'?: string;
    /**
     * 사용 여부
     * @type {string}
     * @memberof BoardContentsCommentOutVo
     */
    'useYn'?: string;
    /**
     * 답글 수
     * @type {number}
     * @memberof BoardContentsCommentOutVo
     */
    'commentCount'?: number;
}
/**
 * 
 * @export
 * @interface BoardContentsCommentPageInqInVo
 */
export interface BoardContentsCommentPageInqInVo {
    /**
     * 
     * @type {number}
     * @memberof BoardContentsCommentPageInqInVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof BoardContentsCommentPageInqInVo
     */
    'pageNo'?: number;
    /**
     * 게시판 아이디
     * @type {number}
     * @memberof BoardContentsCommentPageInqInVo
     */
    'blbrNo'?: number;
    /**
     * 게시글 아이디
     * @type {number}
     * @memberof BoardContentsCommentPageInqInVo
     */
    'blbrPtngId'?: number;
    /**
     * 댓글 아이디
     * @type {number}
     * @memberof BoardContentsCommentPageInqInVo
     */
    'blbrRpcmId'?: number;
    /**
     * 게시판 명
     * @type {string}
     * @memberof BoardContentsCommentPageInqInVo
     */
    'blbrNm'?: string;
    /**
     * 등록자 아이디
     * @type {string}
     * @memberof BoardContentsCommentPageInqInVo
     */
    'cncrId'?: string;
    /**
     * 등록 시작일
     * @type {string}
     * @memberof BoardContentsCommentPageInqInVo
     */
    'cretTsStart'?: string;
    /**
     * 등록 종료일
     * @type {string}
     * @memberof BoardContentsCommentPageInqInVo
     */
    'cretTsEnd'?: string;
    /**
     * 게시판 타입
     * @type {string}
     * @memberof BoardContentsCommentPageInqInVo
     */
    'cybrTriuBlbrKcd'?: string;
}
/**
 * 
 * @export
 * @interface BoardContentsCommentRankInVo
 */
export interface BoardContentsCommentRankInVo {
    /**
     * 
     * @type {string}
     * @memberof BoardContentsCommentRankInVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardContentsCommentRankInVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardContentsCommentRankInVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardContentsCommentRankInVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardContentsCommentRankInVo
     */
    'cncrName'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardContentsCommentRankInVo
     */
    'cybrTriuBlbrKcd'?: string;
}
/**
 * 
 * @export
 * @interface BoardContentsCommentRankOutVo
 */
export interface BoardContentsCommentRankOutVo {
    /**
     * 
     * @type {string}
     * @memberof BoardContentsCommentRankOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardContentsCommentRankOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardContentsCommentRankOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardContentsCommentRankOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardContentsCommentRankOutVo
     */
    'cncrName'?: string;
    /**
     * 사용자 아이디
     * @type {string}
     * @memberof BoardContentsCommentRankOutVo
     */
    'userId'?: string;
    /**
     * 사용자 명
     * @type {string}
     * @memberof BoardContentsCommentRankOutVo
     */
    'userNm'?: string;
    /**
     * 댓글 수
     * @type {number}
     * @memberof BoardContentsCommentRankOutVo
     */
    'commentCount'?: number;
}
/**
 * 
 * @export
 * @interface BoardContentsDeleteInVo
 */
export interface BoardContentsDeleteInVo {
    /**
     * 게시판 아이디
     * @type {number}
     * @memberof BoardContentsDeleteInVo
     */
    'blbrNo'?: number;
    /**
     * 게시글 아이디
     * @type {number}
     * @memberof BoardContentsDeleteInVo
     */
    'blbrPtngId'?: number;
}
/**
 * 
 * @export
 * @interface BoardContentsInVo
 */
export interface BoardContentsInVo {
    /**
     * 게시판 아이디
     * @type {number}
     * @memberof BoardContentsInVo
     */
    'blbrNo'?: number;
    /**
     * 게시글 아이디
     * @type {number}
     * @memberof BoardContentsInVo
     */
    'blbrPtngId'?: number;
    /**
     * 게시글 분류 아이디
     * @type {number}
     * @memberof BoardContentsInVo
     */
    'blbrCtgyId'?: number;
    /**
     * 게시글 명
     * @type {string}
     * @memberof BoardContentsInVo
     */
    'bltApowTtlNm'?: string;
    /**
     * 게시글 내용
     * @type {string}
     * @memberof BoardContentsInVo
     */
    'bltApowCon'?: string;
    /**
     * 사용 여부
     * @type {string}
     * @memberof BoardContentsInVo
     */
    'useYn'?: string;
    /**
     * 첨부파일 삭제 리스트
     * @type {Array<CommonAttachFileDeleteInVo>}
     * @memberof BoardContentsInVo
     */
    'commonAttachFileDeleteInList'?: Array<CommonAttachFileDeleteInVo>;
}
/**
 * 
 * @export
 * @interface BoardContentsLikeInVo
 */
export interface BoardContentsLikeInVo {
    /**
     * 게시판 아이디
     * @type {number}
     * @memberof BoardContentsLikeInVo
     */
    'blbrNo'?: number;
    /**
     * 게시글 아이디
     * @type {number}
     * @memberof BoardContentsLikeInVo
     */
    'blbrPtngId'?: number;
}
/**
 * 
 * @export
 * @interface BoardContentsOutVo
 */
export interface BoardContentsOutVo {
    /**
     * 
     * @type {string}
     * @memberof BoardContentsOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardContentsOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardContentsOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardContentsOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardContentsOutVo
     */
    'cncrName'?: string;
    /**
     * 
     * @type {number}
     * @memberof BoardContentsOutVo
     */
    'blbrNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof BoardContentsOutVo
     */
    'blbrPtngId'?: number;
    /**
     * 
     * @type {number}
     * @memberof BoardContentsOutVo
     */
    'blbrCtgyId'?: number;
    /**
     * 
     * @type {string}
     * @memberof BoardContentsOutVo
     */
    'ctgyNm'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardContentsOutVo
     */
    'bltApowTtlNm'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardContentsOutVo
     */
    'bltApowCon'?: string;
    /**
     * 
     * @type {number}
     * @memberof BoardContentsOutVo
     */
    'inqCnt'?: number;
    /**
     * 
     * @type {number}
     * @memberof BoardContentsOutVo
     */
    'commentCnt'?: number;
    /**
     * 
     * @type {number}
     * @memberof BoardContentsOutVo
     */
    'likeCnt'?: number;
    /**
     * 
     * @type {string}
     * @memberof BoardContentsOutVo
     */
    'likeYn'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardContentsOutVo
     */
    'useYn'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardContentsOutVo
     */
    'cncrNm'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardContentsOutVo
     */
    'thumbnailUrl'?: string;
    /**
     * 첨부파일 리스트
     * @type {Array<CommonAttachFileOutVo>}
     * @memberof BoardContentsOutVo
     */
    'commonAttachFileOutList'?: Array<CommonAttachFileOutVo>;
}
/**
 * 
 * @export
 * @interface BoardContentsPageInqInVo
 */
export interface BoardContentsPageInqInVo {
    /**
     * 
     * @type {number}
     * @memberof BoardContentsPageInqInVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof BoardContentsPageInqInVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {string}
     * @memberof BoardContentsPageInqInVo
     */
    'cybrTriuBlbrKcd'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardContentsPageInqInVo
     */
    'blbrNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardContentsPageInqInVo
     */
    'bltApowTtlNm'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardContentsPageInqInVo
     */
    'bltApowCon'?: string;
}
/**
 * 
 * @export
 * @interface BoardInVo
 */
export interface BoardInVo {
    /**
     * 게시판 아이디
     * @type {number}
     * @memberof BoardInVo
     */
    'blbrNo'?: number;
    /**
     * 게시판 타입
     * @type {string}
     * @memberof BoardInVo
     */
    'cybrTriuBlbrKcd'?: string;
    /**
     * 게시판 명
     * @type {string}
     * @memberof BoardInVo
     */
    'blbrNm'?: string;
    /**
     * 보기권한사용자구분코드
     * @type {string}
     * @memberof BoardInVo
     */
    'lkngUsayClsfVl'?: string;
    /**
     * 작성권한사용자구분코드
     * @type {string}
     * @memberof BoardInVo
     */
    'wrtnUsayClsfVl'?: string;
    /**
     * 댓글권한사용자구분코드
     * @type {string}
     * @memberof BoardInVo
     */
    'rpcmUsayClsfVl'?: string;
    /**
     * 만족(좋아요) 사용 여부
     * @type {string}
     * @memberof BoardInVo
     */
    'stsfUseYn'?: string;
    /**
     * 댓글 사용 여부
     * @type {string}
     * @memberof BoardInVo
     */
    'rpcmUseYn'?: string;
    /**
     * 첨부파일 사용 여부
     * @type {string}
     * @memberof BoardInVo
     */
    'atchUseYn'?: string;
    /**
     * 카테고리 사용 여부
     * @type {string}
     * @memberof BoardInVo
     */
    'ctgyUseYn'?: string;
    /**
     * 게시판 사용 여부
     * @type {string}
     * @memberof BoardInVo
     */
    'useYn'?: string;
    /**
     * 카테고리 리스트
     * @type {Array<BoardCategoryInVo>}
     * @memberof BoardInVo
     */
    'categoryList'?: Array<BoardCategoryInVo>;
}
/**
 * 
 * @export
 * @interface BoardListInqInVo
 */
export interface BoardListInqInVo {
    /**
     * 게시판 타입
     * @type {string}
     * @memberof BoardListInqInVo
     */
    'cybrTriuBlbrKcd'?: string;
    /**
     * 게시판 메뉴 타입
     * @type {string}
     * @memberof BoardListInqInVo
     */
    'boardMenuType'?: string;
}
/**
 * 
 * @export
 * @interface BoardOutVo
 */
export interface BoardOutVo {
    /**
     * 
     * @type {string}
     * @memberof BoardOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardOutVo
     */
    'cncrName'?: string;
    /**
     * 
     * @type {number}
     * @memberof BoardOutVo
     */
    'blbrNo'?: number;
    /**
     * 
     * @type {string}
     * @memberof BoardOutVo
     */
    'cybrTriuBlbrKcd'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardOutVo
     */
    'blbrNm'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardOutVo
     */
    'lkngUsayClsfVl'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardOutVo
     */
    'wrtnUsayClsfVl'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardOutVo
     */
    'rpcmUsayClsfVl'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardOutVo
     */
    'stsfUseYn'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardOutVo
     */
    'rpcmUseYn'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardOutVo
     */
    'atchUseYn'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardOutVo
     */
    'ctgyUseYn'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardOutVo
     */
    'useYn'?: string;
    /**
     * 카테고리 리스트
     * @type {Array<BoardCategoryOutVo>}
     * @memberof BoardOutVo
     */
    'categoryList'?: Array<BoardCategoryOutVo>;
    /**
     * 
     * @type {number}
     * @memberof BoardOutVo
     */
    'contentsCount'?: number;
}
/**
 * 
 * @export
 * @interface BoardPageInqInVo
 */
export interface BoardPageInqInVo {
    /**
     * 
     * @type {number}
     * @memberof BoardPageInqInVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof BoardPageInqInVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {string}
     * @memberof BoardPageInqInVo
     */
    'blbrNm'?: string;
}
/**
 * 첨부파일 삭제 리스트
 * @export
 * @interface CommonAttachFileDeleteInVo
 */
export interface CommonAttachFileDeleteInVo {
    /**
     * 일반첨부파일객체ID
     * @type {number}
     * @memberof CommonAttachFileDeleteInVo
     */
    'atchId'?: number;
    /**
     * 일반첨부파일순번
     * @type {number}
     * @memberof CommonAttachFileDeleteInVo
     */
    'atchSqn'?: number;
    /**
     * 유형코드
     * @type {string}
     * @memberof CommonAttachFileDeleteInVo
     */
    'objcDsncVl'?: string;
}
/**
 * 
 * @export
 * @interface CommonAttachFileListInVo
 */
export interface CommonAttachFileListInVo {
    /**
     * 일반첨부파일객체ID
     * @type {number}
     * @memberof CommonAttachFileListInVo
     */
    'atchId'?: number;
    /**
     * 첨부 유형 코드
     * @type {string}
     * @memberof CommonAttachFileListInVo
     */
    'objcDsncVl'?: string;
}
/**
 * 답변 첨부파일 리스트
 * @export
 * @interface CommonAttachFileOutVo
 */
export interface CommonAttachFileOutVo {
    /**
     * 
     * @type {string}
     * @memberof CommonAttachFileOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonAttachFileOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonAttachFileOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonAttachFileOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonAttachFileOutVo
     */
    'cncrName'?: string;
    /**
     * 일반첨부파일객체
     * @type {number}
     * @memberof CommonAttachFileOutVo
     */
    'atchId'?: number;
    /**
     * 일반첨부파일순번
     * @type {number}
     * @memberof CommonAttachFileOutVo
     */
    'atchSqn'?: number;
    /**
     * 첨부파일등록유형코드
     * @type {string}
     * @memberof CommonAttachFileOutVo
     */
    'objcDsncVl'?: string;
    /**
     * 원본파일URL주소
     * @type {string}
     * @memberof CommonAttachFileOutVo
     */
    'fileUrlAdr'?: string;
    /**
     * 클라우드파일URL주소
     * @type {string}
     * @memberof CommonAttachFileOutVo
     */
    'cldFileUrlAdr'?: string;
    /**
     * 원본파일명
     * @type {string}
     * @memberof CommonAttachFileOutVo
     */
    'orcpFileNm'?: string;
    /**
     * 변경파일명
     * @type {string}
     * @memberof CommonAttachFileOutVo
     */
    'strgFileNm'?: string;
    /**
     * 파일형식유형코드
     * @type {string}
     * @memberof CommonAttachFileOutVo
     */
    'fileEtnsNm'?: string;
    /**
     * 사용 여부
     * @type {string}
     * @memberof CommonAttachFileOutVo
     */
    'useYn'?: string;
}
/**
 * 
 * @export
 * @interface CommonAttachFilehInVo
 */
export interface CommonAttachFilehInVo {
    /**
     * 일반첨부파일객체
     * @type {number}
     * @memberof CommonAttachFilehInVo
     */
    'atchId'?: number;
    /**
     * 일반첨부파일순번
     * @type {number}
     * @memberof CommonAttachFilehInVo
     */
    'atchSqn'?: number;
    /**
     * 첨부파일등록유형코드
     * @type {string}
     * @memberof CommonAttachFilehInVo
     */
    'objcDsncVl'?: string;
    /**
     * 원본파일URL주소
     * @type {string}
     * @memberof CommonAttachFilehInVo
     */
    'fileUrlAdr'?: string;
    /**
     * 클라우드파일URL주소
     * @type {string}
     * @memberof CommonAttachFilehInVo
     */
    'cldFileUrlAdr'?: string;
    /**
     * 원본파일명
     * @type {string}
     * @memberof CommonAttachFilehInVo
     */
    'orcpFileNm'?: string;
    /**
     * 변경파일명
     * @type {string}
     * @memberof CommonAttachFilehInVo
     */
    'strgFileNm'?: string;
    /**
     * 파일형식유형코드
     * @type {string}
     * @memberof CommonAttachFilehInVo
     */
    'fileEtnsNm'?: string;
    /**
     * 사용 여부
     * @type {string}
     * @memberof CommonAttachFilehInVo
     */
    'useYn'?: string;
    /**
     * 작업구분ID
     * @type {string}
     * @memberof CommonAttachFilehInVo
     */
    'jbdsId'?: string;
    /**
     * 작업상태구분코드
     * @type {string}
     * @memberof CommonAttachFilehInVo
     */
    'jobSttsDcd'?: string;
}
/**
 * 
 * @export
 * @interface CommonCodeAllOutVo
 */
export interface CommonCodeAllOutVo {
    /**
     * 
     * @type {string}
     * @memberof CommonCodeAllOutVo
     */
    'cmcdId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonCodeAllOutVo
     */
    'comCdNm'?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonCodeAllOutVo
     */
    'cmcdVl'?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonCodeAllOutVo
     */
    'cmcdVlNm'?: string;
}
/**
 * 
 * @export
 * @interface CommonCodeInVo
 */
export interface CommonCodeInVo {
    /**
     * 
     * @type {string}
     * @memberof CommonCodeInVo
     */
    'cmcdId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonCodeInVo
     */
    'comCdNm'?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonCodeInVo
     */
    'comCdDescCon'?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonCodeInVo
     */
    'useYn'?: string;
}
/**
 * 
 * @export
 * @interface CommonCodeListInqInVo
 */
export interface CommonCodeListInqInVo {
    /**
     * 
     * @type {string}
     * @memberof CommonCodeListInqInVo
     */
    'cmcdId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonCodeListInqInVo
     */
    'comCdNm'?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonCodeListInqInVo
     */
    'useYn'?: string;
}
/**
 * 
 * @export
 * @interface CommonCodeOutVo
 */
export interface CommonCodeOutVo {
    /**
     * 
     * @type {string}
     * @memberof CommonCodeOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonCodeOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonCodeOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonCodeOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonCodeOutVo
     */
    'cncrName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonCodeOutVo
     */
    'cmcdId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonCodeOutVo
     */
    'comCdNm'?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonCodeOutVo
     */
    'comCdDescCon'?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonCodeOutVo
     */
    'useYn'?: string;
}
/**
 * 
 * @export
 * @interface CommonCourseDegreeOutVo
 */
export interface CommonCourseDegreeOutVo {
    /**
     * 과정 코드
     * @type {string}
     * @memberof CommonCourseDegreeOutVo
     */
    'dutyEdctCd'?: string;
    /**
     * 과정명
     * @type {string}
     * @memberof CommonCourseDegreeOutVo
     */
    'dutyEdctNm'?: string;
    /**
     * 차수 번호
     * @type {number}
     * @memberof CommonCourseDegreeOutVo
     */
    'edctDsprNo'?: number;
    /**
     * 차수명
     * @type {string}
     * @memberof CommonCourseDegreeOutVo
     */
    'edctProcNm'?: string;
}
/**
 * 
 * @export
 * @interface CommonCourseDegreePageInVo
 */
export interface CommonCourseDegreePageInVo {
    /**
     * 
     * @type {number}
     * @memberof CommonCourseDegreePageInVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof CommonCourseDegreePageInVo
     */
    'pageNo'?: number;
    /**
     * 검색 내용
     * @type {string}
     * @memberof CommonCourseDegreePageInVo
     */
    'searchText'?: string;
    /**
     * 차수번호
     * @type {number}
     * @memberof CommonCourseDegreePageInVo
     */
    'edctDsprNo'?: number;
}
/**
 * 
 * @export
 * @interface CommonSurveyQuestionDetailOutVo
 */
export interface CommonSurveyQuestionDetailOutVo {
    /**
     * 
     * @type {string}
     * @memberof CommonSurveyQuestionDetailOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonSurveyQuestionDetailOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonSurveyQuestionDetailOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonSurveyQuestionDetailOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonSurveyQuestionDetailOutVo
     */
    'cncrName'?: string;
    /**
     * 설문번호
     * @type {string}
     * @memberof CommonSurveyQuestionDetailOutVo
     */
    'qstrNo'?: string;
    /**
     * 문항번호
     * @type {number}
     * @memberof CommonSurveyQuestionDetailOutVo
     */
    'qsitNo'?: number;
    /**
     * 원본문항번호
     * @type {number}
     * @memberof CommonSurveyQuestionDetailOutVo
     */
    'orcpQsitNo'?: number;
    /**
     * 문항유형코드값
     * @type {string}
     * @memberof CommonSurveyQuestionDetailOutVo
     */
    'qsitKcd'?: string;
    /**
     * 문항유형명
     * @type {string}
     * @memberof CommonSurveyQuestionDetailOutVo
     */
    'qsitTcdNm'?: string;
    /**
     * 문항명
     * @type {string}
     * @memberof CommonSurveyQuestionDetailOutVo
     */
    'qsitTtlNm'?: string;
    /**
     * 문항내용
     * @type {string}
     * @memberof CommonSurveyQuestionDetailOutVo
     */
    'qsitCon'?: string;
    /**
     * 보기개수
     * @type {number}
     * @memberof CommonSurveyQuestionDetailOutVo
     */
    'lkngNmb'?: number;
    /**
     * 척도번호
     * @type {number}
     * @memberof CommonSurveyQuestionDetailOutVo
     */
    'mesrNo'?: number;
    /**
     * 사용여부
     * @type {string}
     * @memberof CommonSurveyQuestionDetailOutVo
     */
    'useYn'?: string;
    /**
     * 보기번호
     * @type {number}
     * @memberof CommonSurveyQuestionDetailOutVo
     */
    'lkngNo'?: number;
    /**
     * 보기명
     * @type {string}
     * @memberof CommonSurveyQuestionDetailOutVo
     */
    'lkngCon'?: string;
    /**
     * 답변명
     * @type {string}
     * @memberof CommonSurveyQuestionDetailOutVo
     */
    'rplyCon'?: string;
    /**
     * 랭크번호
     * @type {number}
     * @memberof CommonSurveyQuestionDetailOutVo
     */
    'rankNo'?: number;
    /**
     * 로우번호
     * @type {number}
     * @memberof CommonSurveyQuestionDetailOutVo
     */
    'rowNo'?: number;
    /**
     * 보기내용
     * @type {Array<CommonSurveyQuestionLkngOutVo>}
     * @memberof CommonSurveyQuestionDetailOutVo
     */
    'commonSurveyQuestionLkngOutVos'?: Array<CommonSurveyQuestionLkngOutVo>;
}
/**
 * 
 * @export
 * @interface CommonSurveyQuestionInVo
 */
export interface CommonSurveyQuestionInVo {
    /**
     * 공통설문번호
     * @type {number}
     * @memberof CommonSurveyQuestionInVo
     */
    'comQstrId'?: number;
    /**
     * 설문번호
     * @type {number}
     * @memberof CommonSurveyQuestionInVo
     */
    'qstrNo'?: number;
    /**
     * 문항번호
     * @type {number}
     * @memberof CommonSurveyQuestionInVo
     */
    'qsitNo'?: number;
    /**
     * 설문설정유형코드
     * @type {string}
     * @memberof CommonSurveyQuestionInVo
     */
    'qstrStupTcd'?: string;
    /**
     * 사용자유형값
     * @type {string}
     * @memberof CommonSurveyQuestionInVo
     */
    'userPtrnVl'?: string;
    /**
     * 설문명
     * @type {string}
     * @memberof CommonSurveyQuestionInVo
     */
    'qstrNm'?: string;
    /**
     * 설문시작일시
     * @type {string}
     * @memberof CommonSurveyQuestionInVo
     */
    'qstrSttgTs'?: string;
    /**
     * 설문종료일시
     * @type {string}
     * @memberof CommonSurveyQuestionInVo
     */
    'qstrFnshTs'?: string;
    /**
     * 설문내용
     * @type {string}
     * @memberof CommonSurveyQuestionInVo
     */
    'qstrCon'?: string;
    /**
     * 사용여부
     * @type {string}
     * @memberof CommonSurveyQuestionInVo
     */
    'useYn'?: string;
    /**
     * 등록자명
     * @type {string}
     * @memberof CommonSurveyQuestionInVo
     */
    'cncrNm'?: string;
    /**
     * 보기정보
     * @type {Array<CommonSurveyQuestionLkngInVo>}
     * @memberof CommonSurveyQuestionInVo
     */
    'lkngInVos'?: Array<CommonSurveyQuestionLkngInVo>;
    /**
     * 대상자
     * @type {string}
     * @memberof CommonSurveyQuestionInVo
     */
    'userId'?: string;
    /**
     * 대상자
     * @type {Array<string>}
     * @memberof CommonSurveyQuestionInVo
     */
    'userIdList'?: Array<string>;
    /**
     * 대상자
     * @type {Array<UserInVo>}
     * @memberof CommonSurveyQuestionInVo
     */
    'userInfoList'?: Array<UserInVo>;
    /**
     * 삭제대상자
     * @type {Array<string>}
     * @memberof CommonSurveyQuestionInVo
     */
    'deleteUserIdList'?: Array<string>;
}
/**
 * 보기정보
 * @export
 * @interface CommonSurveyQuestionLkngInVo
 */
export interface CommonSurveyQuestionLkngInVo {
    /**
     * 공통설문번호
     * @type {number}
     * @memberof CommonSurveyQuestionLkngInVo
     */
    'comQstrId'?: number;
    /**
     * 설문번호
     * @type {number}
     * @memberof CommonSurveyQuestionLkngInVo
     */
    'qstrNo'?: number;
    /**
     * 문항번호
     * @type {number}
     * @memberof CommonSurveyQuestionLkngInVo
     */
    'qsitNo'?: number;
    /**
     * 답변내용
     * @type {string}
     * @memberof CommonSurveyQuestionLkngInVo
     */
    'rplyCon'?: string;
    /**
     * 사용여부
     * @type {string}
     * @memberof CommonSurveyQuestionLkngInVo
     */
    'useYn'?: string;
}
/**
 * 보기정보
 * @export
 * @interface CommonSurveyQuestionLkngOutVo
 */
export interface CommonSurveyQuestionLkngOutVo {
    /**
     * 
     * @type {string}
     * @memberof CommonSurveyQuestionLkngOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonSurveyQuestionLkngOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonSurveyQuestionLkngOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonSurveyQuestionLkngOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonSurveyQuestionLkngOutVo
     */
    'cncrName'?: string;
    /**
     * 공통설문번호
     * @type {number}
     * @memberof CommonSurveyQuestionLkngOutVo
     */
    'comQstrId'?: number;
    /**
     * 설문번호
     * @type {number}
     * @memberof CommonSurveyQuestionLkngOutVo
     */
    'qstrNo'?: number;
    /**
     * 문항번호
     * @type {number}
     * @memberof CommonSurveyQuestionLkngOutVo
     */
    'qsitNo'?: number;
    /**
     * 보기번호
     * @type {number}
     * @memberof CommonSurveyQuestionLkngOutVo
     */
    'lkngNo'?: number;
    /**
     * 보기명
     * @type {string}
     * @memberof CommonSurveyQuestionLkngOutVo
     */
    'lkngCon'?: string;
    /**
     * 답변내용
     * @type {string}
     * @memberof CommonSurveyQuestionLkngOutVo
     */
    'rplyCon'?: string;
    /**
     * 사용여부
     * @type {string}
     * @memberof CommonSurveyQuestionLkngOutVo
     */
    'useYn'?: string;
}
/**
 * 
 * @export
 * @interface CommonSurveyQuestionOutVo
 */
export interface CommonSurveyQuestionOutVo {
    /**
     * 
     * @type {string}
     * @memberof CommonSurveyQuestionOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonSurveyQuestionOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonSurveyQuestionOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonSurveyQuestionOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonSurveyQuestionOutVo
     */
    'cncrName'?: string;
    /**
     * 공통설문번호
     * @type {number}
     * @memberof CommonSurveyQuestionOutVo
     */
    'comQstrId'?: number;
    /**
     * 설문번호
     * @type {number}
     * @memberof CommonSurveyQuestionOutVo
     */
    'qstrNo'?: number;
    /**
     * 문항번호
     * @type {number}
     * @memberof CommonSurveyQuestionOutVo
     */
    'qsitNo'?: number;
    /**
     * 설문설정유형코드
     * @type {string}
     * @memberof CommonSurveyQuestionOutVo
     */
    'qstrStupTcd'?: string;
    /**
     * 사용자유형값
     * @type {string}
     * @memberof CommonSurveyQuestionOutVo
     */
    'userPtrnVl'?: string;
    /**
     * 설문명
     * @type {string}
     * @memberof CommonSurveyQuestionOutVo
     */
    'qstrNm'?: string;
    /**
     * 원본설문명
     * @type {string}
     * @memberof CommonSurveyQuestionOutVo
     */
    'prevQstrNm'?: string;
    /**
     * 설문시작일시
     * @type {string}
     * @memberof CommonSurveyQuestionOutVo
     */
    'qstrSttgTs'?: string;
    /**
     * 설문종료일시
     * @type {string}
     * @memberof CommonSurveyQuestionOutVo
     */
    'qstrFnshTs'?: string;
    /**
     * 설문내용
     * @type {string}
     * @memberof CommonSurveyQuestionOutVo
     */
    'qstrCon'?: string;
    /**
     * 참여자수
     * @type {number}
     * @memberof CommonSurveyQuestionOutVo
     */
    'participantCount'?: number;
    /**
     * 답변수
     * @type {number}
     * @memberof CommonSurveyQuestionOutVo
     */
    'answerCount'?: number;
    /**
     * 사용여부
     * @type {string}
     * @memberof CommonSurveyQuestionOutVo
     */
    'useYn'?: string;
    /**
     * 등록자명
     * @type {string}
     * @memberof CommonSurveyQuestionOutVo
     */
    'cncrNm'?: string;
    /**
     * 보기정보
     * @type {Array<CommonSurveyQuestionLkngOutVo>}
     * @memberof CommonSurveyQuestionOutVo
     */
    'lkngOutVos'?: Array<CommonSurveyQuestionLkngOutVo>;
    /**
     * 대상자
     * @type {Array<string>}
     * @memberof CommonSurveyQuestionOutVo
     */
    'userIdList'?: Array<string>;
    /**
     * 대상자
     * @type {Array<UserOutVo>}
     * @memberof CommonSurveyQuestionOutVo
     */
    'userInfoList'?: Array<UserOutVo>;
}
/**
 * 
 * @export
 * @interface CommonSurveyQuestionPageInqInVo
 */
export interface CommonSurveyQuestionPageInqInVo {
    /**
     * 페이지당출력건수
     * @type {number}
     * @memberof CommonSurveyQuestionPageInqInVo
     */
    'pageSize'?: number;
    /**
     * 페이지번호
     * @type {number}
     * @memberof CommonSurveyQuestionPageInqInVo
     */
    'pageNo'?: number;
    /**
     * 시작년월일
     * @type {string}
     * @memberof CommonSurveyQuestionPageInqInVo
     */
    'sttgYmd'?: string;
    /**
     * 종료년월일
     * @type {string}
     * @memberof CommonSurveyQuestionPageInqInVo
     */
    'fnshYmd'?: string;
    /**
     * 문항명
     * @type {string}
     * @memberof CommonSurveyQuestionPageInqInVo
     */
    'qstrNm'?: string;
    /**
     * 등록자명
     * @type {string}
     * @memberof CommonSurveyQuestionPageInqInVo
     */
    'rgsrNm'?: string;
    /**
     * 문항유형코드
     * @type {string}
     * @memberof CommonSurveyQuestionPageInqInVo
     */
    'qstrStupTcd'?: string;
    /**
     * 사용여부
     * @type {string}
     * @memberof CommonSurveyQuestionPageInqInVo
     */
    'useYn'?: string;
    /**
     * 학습자
     * @type {string}
     * @memberof CommonSurveyQuestionPageInqInVo
     */
    'userId'?: string;
}
/**
 * 설문 제출 목록
 * @export
 * @interface CommonSurveySubmitInVo
 */
export interface CommonSurveySubmitInVo {
    /**
     * 공통설문번호
     * @type {number}
     * @memberof CommonSurveySubmitInVo
     */
    'comQstrId'?: number;
    /**
     * 설문번호
     * @type {number}
     * @memberof CommonSurveySubmitInVo
     */
    'qstrNo'?: number;
    /**
     * 문항번호
     * @type {number}
     * @memberof CommonSurveySubmitInVo
     */
    'qsitNo'?: number;
    /**
     * 답변내용
     * @type {string}
     * @memberof CommonSurveySubmitInVo
     */
    'rplyCon'?: string;
    /**
     * 사용여부
     * @type {string}
     * @memberof CommonSurveySubmitInVo
     */
    'useYn'?: string;
}
/**
 * 
 * @export
 * @interface CommonSurveySubmitInVoList
 */
export interface CommonSurveySubmitInVoList {
    /**
     * 설문 제출 목록
     * @type {Array<CommonSurveySubmitInVo>}
     * @memberof CommonSurveySubmitInVoList
     */
    'inVo'?: Array<CommonSurveySubmitInVo>;
}
/**
 * 
 * @export
 * @interface CourseApplicationInVo
 */
export interface CourseApplicationInVo {
    /**
     * 직무교육코드
     * @type {string}
     * @memberof CourseApplicationInVo
     */
    'dutyEdctCd'?: string;
    /**
     * 교육차수번호
     * @type {number}
     * @memberof CourseApplicationInVo
     */
    'edctDsprNo'?: number;
    /**
     * 사용자ID
     * @type {string}
     * @memberof CourseApplicationInVo
     */
    'userId'?: string;
    /**
     * 사용자명
     * @type {string}
     * @memberof CourseApplicationInVo
     */
    'userNm'?: string;
    /**
     * 부서코드값
     * @type {string}
     * @memberof CourseApplicationInVo
     */
    'deptDsncVl'?: string;
    /**
     * 부서명
     * @type {string}
     * @memberof CourseApplicationInVo
     */
    'deptDsncNm'?: string;
    /**
     * 직책코드값
     * @type {string}
     * @memberof CourseApplicationInVo
     */
    'rsptDsncVl'?: string;
    /**
     * 직책코드명
     * @type {string}
     * @memberof CourseApplicationInVo
     */
    'rsptDsncNm'?: string;
    /**
     * 직위코드값
     * @type {string}
     * @memberof CourseApplicationInVo
     */
    'jbttDsncVl'?: string;
    /**
     * 직위명
     * @type {string}
     * @memberof CourseApplicationInVo
     */
    'jbttDsncNm'?: string;
    /**
     * 수강상태코드
     * @type {string}
     * @memberof CourseApplicationInVo
     */
    'atlcDfnnScd'?: string;
    /**
     * 수강신청일시
     * @type {string}
     * @memberof CourseApplicationInVo
     */
    'atlcAplcTs'?: string;
    /**
     * 경평대상여부
     * @type {string}
     * @memberof CourseApplicationInVo
     */
    'tomaYn'?: string;
    /**
     * 수강변경취소구분코드값
     * @type {string}
     * @memberof CourseApplicationInVo
     */
    'atlcMdcnDcd'?: string;
    /**
     * 교육불참사유코드값
     * @type {string}
     * @memberof CourseApplicationInVo
     */
    'edctAbncTcd'?: string;
    /**
     * 배송지우편번호
     * @type {string}
     * @memberof CourseApplicationInVo
     */
    'dlplPssrNo'?: string;
    /**
     * 배송지기본주소
     * @type {string}
     * @memberof CourseApplicationInVo
     */
    'dlplBscAdr'?: string;
    /**
     * 배송지상세주소
     * @type {string}
     * @memberof CourseApplicationInVo
     */
    'dlplDtlAdr'?: string;
    /**
     * 비고내용
     * @type {string}
     * @memberof CourseApplicationInVo
     */
    'rmrkCon'?: string;
    /**
     * 사용여부
     * @type {string}
     * @memberof CourseApplicationInVo
     */
    'useYn'?: string;
    /**
     * 신청사유
     * @type {string}
     * @memberof CourseApplicationInVo
     */
    'aplcRsnCon'?: string;
    /**
     * 결제라인 등록 리스트
     * @type {Array<ApprovalLinListlnVo>}
     * @memberof CourseApplicationInVo
     */
    'approvalLinList'?: Array<ApprovalLinListlnVo>;
    /**
     * 휴대폰번호
     * @type {string}
     * @memberof CourseApplicationInVo
     */
    'cpn'?: string;
    /**
     * 회사전화번호
     * @type {string}
     * @memberof CourseApplicationInVo
     */
    'cmpnTpn'?: string;
    /**
     * 이메일
     * @type {string}
     * @memberof CourseApplicationInVo
     */
    'ead'?: string;
}
/**
 * 첨부파일 삭제 리스트
 * @export
 * @interface CourseBoardAtchDelletInVo
 */
export interface CourseBoardAtchDelletInVo {
    /**
     * 과정 코드
     * @type {string}
     * @memberof CourseBoardAtchDelletInVo
     */
    'dutyEdctCd'?: string;
    /**
     * 교육과정첨부파일객체ID
     * @type {number}
     * @memberof CourseBoardAtchDelletInVo
     */
    'edctAtchObjcNo'?: number;
    /**
     * 교육과정청부파일순번
     * @type {number}
     * @memberof CourseBoardAtchDelletInVo
     */
    'edctAtchSqn'?: number;
}
/**
 * 
 * @export
 * @interface CourseBoardAtchOutVo
 */
export interface CourseBoardAtchOutVo {
    /**
     * 
     * @type {string}
     * @memberof CourseBoardAtchOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseBoardAtchOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseBoardAtchOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseBoardAtchOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseBoardAtchOutVo
     */
    'cncrName'?: string;
    /**
     * 과정 코드
     * @type {string}
     * @memberof CourseBoardAtchOutVo
     */
    'dutyEdctCd'?: string;
    /**
     * 교육과정첨부파일객체ID
     * @type {number}
     * @memberof CourseBoardAtchOutVo
     */
    'edctAtchObjcNo'?: number;
    /**
     * 첨부파일등록유형코드
     * @type {string}
     * @memberof CourseBoardAtchOutVo
     */
    'objcDsncVl'?: string;
    /**
     * 교육과정청부파일순번
     * @type {number}
     * @memberof CourseBoardAtchOutVo
     */
    'edctAtchSqn'?: number;
    /**
     * 차수 번호
     * @type {number}
     * @memberof CourseBoardAtchOutVo
     */
    'edctDsprNo'?: number;
    /**
     * 원본파일URL주소
     * @type {string}
     * @memberof CourseBoardAtchOutVo
     */
    'fileUrlAdr'?: string;
    /**
     * 클라우드파일URL주소
     * @type {string}
     * @memberof CourseBoardAtchOutVo
     */
    'cldFileUrlAdr'?: string;
    /**
     * 원본파일명
     * @type {string}
     * @memberof CourseBoardAtchOutVo
     */
    'orcpFileNm'?: string;
    /**
     * 변경파일명
     * @type {string}
     * @memberof CourseBoardAtchOutVo
     */
    'strgFileNm'?: string;
    /**
     * 파일형식유형코드
     * @type {string}
     * @memberof CourseBoardAtchOutVo
     */
    'fileEtnsNm'?: string;
    /**
     * 사용 여부
     * @type {string}
     * @memberof CourseBoardAtchOutVo
     */
    'useYn'?: string;
}
/**
 * 레슨 수료 기준
 * @export
 * @interface CourseCompletionCriteriaOutVo
 */
export interface CourseCompletionCriteriaOutVo {
    /**
     * 
     * @type {string}
     * @memberof CourseCompletionCriteriaOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseCompletionCriteriaOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseCompletionCriteriaOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseCompletionCriteriaOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseCompletionCriteriaOutVo
     */
    'cncrName'?: string;
    /**
     * 직무교육코드
     * @type {string}
     * @memberof CourseCompletionCriteriaOutVo
     */
    'dutyEdctCd'?: string;
    /**
     * 교육차수번호
     * @type {number}
     * @memberof CourseCompletionCriteriaOutVo
     */
    'edctDsprNo'?: number;
    /**
     * 교육차수챕터번호
     * @type {number}
     * @memberof CourseCompletionCriteriaOutVo
     */
    'edctDsprChpaNo'?: number;
    /**
     * 교육차수레슨번호
     * @type {number}
     * @memberof CourseCompletionCriteriaOutVo
     */
    'edctDsprLssoNo'?: number;
    /**
     * 레슨반영비율
     * @type {number}
     * @memberof CourseCompletionCriteriaOutVo
     */
    'lssoRflcRto'?: number;
    /**
     * 수료점수
     * @type {number}
     * @memberof CourseCompletionCriteriaOutVo
     */
    'ctcrScr'?: number;
    /**
     * 사용여부
     * @type {string}
     * @memberof CourseCompletionCriteriaOutVo
     */
    'useYn'?: string;
}
/**
 * 첨부파일 목록
 * @export
 * @interface CourseDegreeAttachFileOutVo
 */
export interface CourseDegreeAttachFileOutVo {
    /**
     * 
     * @type {string}
     * @memberof CourseDegreeAttachFileOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseDegreeAttachFileOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseDegreeAttachFileOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseDegreeAttachFileOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseDegreeAttachFileOutVo
     */
    'cncrName'?: string;
    /**
     * 교육과정학습분류코드값
     * @type {string}
     * @memberof CourseDegreeAttachFileOutVo
     */
    'edctClsfVl'?: string;
    /**
     * 교육과정코드
     * @type {string}
     * @memberof CourseDegreeAttachFileOutVo
     */
    'dutyEdctCd'?: string;
    /**
     * 교육차수번호
     * @type {number}
     * @memberof CourseDegreeAttachFileOutVo
     */
    'edctDsprNo'?: number;
    /**
     * 첨부파일순번
     * @type {number}
     * @memberof CourseDegreeAttachFileOutVo
     */
    'atchSqn'?: number;
    /**
     * 개설카테고리코드값
     * @type {string}
     * @memberof CourseDegreeAttachFileOutVo
     */
    'opnCtgyVl'?: string;
    /**
     * 원본파일명
     * @type {string}
     * @memberof CourseDegreeAttachFileOutVo
     */
    'orcpFileNm'?: string;
    /**
     * 시스템파일명
     * @type {string}
     * @memberof CourseDegreeAttachFileOutVo
     */
    'sysFileNm'?: string;
    /**
     * 파일URL주소
     * @type {string}
     * @memberof CourseDegreeAttachFileOutVo
     */
    'fileUrlAdr'?: string;
    /**
     * 파일확장자코드
     * @type {string}
     * @memberof CourseDegreeAttachFileOutVo
     */
    'fileEtnsNm'?: string;
    /**
     * 파일크기값
     * @type {number}
     * @memberof CourseDegreeAttachFileOutVo
     */
    'flszVl'?: number;
    /**
     * 사용여부
     * @type {string}
     * @memberof CourseDegreeAttachFileOutVo
     */
    'useYn'?: string;
}
/**
 * 챕터 목록
 * @export
 * @interface CourseDegreeChapterOutVo
 */
export interface CourseDegreeChapterOutVo {
    /**
     * 
     * @type {string}
     * @memberof CourseDegreeChapterOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseDegreeChapterOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseDegreeChapterOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseDegreeChapterOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseDegreeChapterOutVo
     */
    'cncrName'?: string;
    /**
     * 직무교육코드
     * @type {string}
     * @memberof CourseDegreeChapterOutVo
     */
    'dutyEdctCd'?: string;
    /**
     * 교육차수번호
     * @type {number}
     * @memberof CourseDegreeChapterOutVo
     */
    'edctDsprNo'?: number;
    /**
     * 교육차수챕터번호
     * @type {number}
     * @memberof CourseDegreeChapterOutVo
     */
    'edctDsprChpaNo'?: number;
    /**
     * 직무교육챕터명
     * @type {string}
     * @memberof CourseDegreeChapterOutVo
     */
    'dutyEdctChpaNm'?: string;
    /**
     * 챕터순서
     * @type {number}
     * @memberof CourseDegreeChapterOutVo
     */
    'chpaSqc'?: number;
    /**
     * 사용여부
     * @type {string}
     * @memberof CourseDegreeChapterOutVo
     */
    'useYn'?: string;
    /**
     * 삭제여부
     * @type {string}
     * @memberof CourseDegreeChapterOutVo
     */
    'isDelYn'?: string;
    /**
     * 교육차수과정 레슨
     * @type {Array<CourseDegreeLessonOutVo>}
     * @memberof CourseDegreeChapterOutVo
     */
    'lessonList'?: Array<CourseDegreeLessonOutVo>;
    /**
     * 사용자아이디
     * @type {string}
     * @memberof CourseDegreeChapterOutVo
     */
    'userId'?: string;
}
/**
 * 
 * @export
 * @interface CourseDegreeLessonHistoryInVo
 */
export interface CourseDegreeLessonHistoryInVo {
    /**
     * 페이지당출력건수
     * @type {number}
     * @memberof CourseDegreeLessonHistoryInVo
     */
    'pageSize'?: number;
    /**
     * 페이지번호
     * @type {number}
     * @memberof CourseDegreeLessonHistoryInVo
     */
    'pageNo'?: number;
    /**
     * 학습시작일
     * @type {string}
     * @memberof CourseDegreeLessonHistoryInVo
     */
    'lrngSttgTs'?: string;
    /**
     * 학습종료일
     * @type {string}
     * @memberof CourseDegreeLessonHistoryInVo
     */
    'lrngEndTs'?: string;
    /**
     * 직급코드
     * @type {string}
     * @memberof CourseDegreeLessonHistoryInVo
     */
    'jbclCd'?: string;
    /**
     * 교육방식코드
     * @type {string}
     * @memberof CourseDegreeLessonHistoryInVo
     */
    'edctMthdTcd'?: string;
    /**
     * 수료여부
     * @type {string}
     * @memberof CourseDegreeLessonHistoryInVo
     */
    'ctcrYn'?: string;
    /**
     * 직무교육명
     * @type {string}
     * @memberof CourseDegreeLessonHistoryInVo
     */
    'dutyEdctNm'?: string;
}
/**
 * 
 * @export
 * @interface CourseDegreeLessonHistoryOutVo
 */
export interface CourseDegreeLessonHistoryOutVo {
    /**
     * 
     * @type {string}
     * @memberof CourseDegreeLessonHistoryOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseDegreeLessonHistoryOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseDegreeLessonHistoryOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseDegreeLessonHistoryOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseDegreeLessonHistoryOutVo
     */
    'cncrName'?: string;
    /**
     * 교육분류코드
     * @type {string}
     * @memberof CourseDegreeLessonHistoryOutVo
     */
    'edctClsfVl'?: string;
    /**
     * 교육분류경로
     * @type {string}
     * @memberof CourseDegreeLessonHistoryOutVo
     */
    'edctClsfVlPath'?: string;
    /**
     * 직무교육명
     * @type {string}
     * @memberof CourseDegreeLessonHistoryOutVo
     */
    'dutyEdctNm'?: string;
    /**
     * 교육차수명
     * @type {string}
     * @memberof CourseDegreeLessonHistoryOutVo
     */
    'edctDsprNm'?: string;
    /**
     * 교육방식코드
     * @type {string}
     * @memberof CourseDegreeLessonHistoryOutVo
     */
    'edctMthdTcd'?: string;
    /**
     * 학습인정시간
     * @type {number}
     * @memberof CourseDegreeLessonHistoryOutVo
     */
    'lrngAcknTim'?: number;
    /**
     * 학습시작일시
     * @type {string}
     * @memberof CourseDegreeLessonHistoryOutVo
     */
    'lrngSttgTs'?: string;
    /**
     * 학습종료일시
     * @type {string}
     * @memberof CourseDegreeLessonHistoryOutVo
     */
    'lrngFnshTs'?: string;
    /**
     * 수료점수
     * @type {number}
     * @memberof CourseDegreeLessonHistoryOutVo
     */
    'ctcrScr'?: number;
    /**
     * 평정여부
     * @type {string}
     * @memberof CourseDegreeLessonHistoryOutVo
     */
    'evltYn'?: string;
    /**
     * 수료여부
     * @type {string}
     * @memberof CourseDegreeLessonHistoryOutVo
     */
    'ctcrYn'?: string;
    /**
     * 사용자명
     * @type {string}
     * @memberof CourseDegreeLessonHistoryOutVo
     */
    'userNm'?: string;
    /**
     * 부서구분값
     * @type {string}
     * @memberof CourseDegreeLessonHistoryOutVo
     */
    'deptDsncVl'?: string;
    /**
     * 부서구분명
     * @type {string}
     * @memberof CourseDegreeLessonHistoryOutVo
     */
    'deptDsncNm'?: string;
    /**
     * 직책구분값
     * @type {string}
     * @memberof CourseDegreeLessonHistoryOutVo
     */
    'rsptDsncVl'?: string;
    /**
     * 직책구분명
     * @type {string}
     * @memberof CourseDegreeLessonHistoryOutVo
     */
    'rsptDsncNm'?: string;
    /**
     * 생년월일
     * @type {string}
     * @memberof CourseDegreeLessonHistoryOutVo
     */
    'birtYmd'?: string;
    /**
     * 직위발령일
     * @type {string}
     * @memberof CourseDegreeLessonHistoryOutVo
     */
    'jbttYmd'?: string;
    /**
     * 직위구분값
     * @type {string}
     * @memberof CourseDegreeLessonHistoryOutVo
     */
    'jbttDsncVl'?: string;
    /**
     * 직위구분명
     * @type {string}
     * @memberof CourseDegreeLessonHistoryOutVo
     */
    'jbttDsncNm'?: string;
}
/**
 * 교육차수과정 레슨
 * @export
 * @interface CourseDegreeLessonOutVo
 */
export interface CourseDegreeLessonOutVo {
    /**
     * 
     * @type {string}
     * @memberof CourseDegreeLessonOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseDegreeLessonOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseDegreeLessonOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseDegreeLessonOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseDegreeLessonOutVo
     */
    'cncrName'?: string;
    /**
     * 직무교육코드
     * @type {string}
     * @memberof CourseDegreeLessonOutVo
     */
    'dutyEdctCd'?: string;
    /**
     * 교육차수번호
     * @type {number}
     * @memberof CourseDegreeLessonOutVo
     */
    'edctDsprNo'?: number;
    /**
     * 교육차수챕터번호
     * @type {number}
     * @memberof CourseDegreeLessonOutVo
     */
    'edctDsprChpaNo'?: number;
    /**
     * 교육차수레슨번호
     * @type {number}
     * @memberof CourseDegreeLessonOutVo
     */
    'edctDsprLssoNo'?: number;
    /**
     * 콘텐츠 구분 코드값
     * @type {string}
     * @memberof CourseDegreeLessonOutVo
     */
    'connKcd'?: string;
    /**
     * 콘텐츠ID
     * @type {string}
     * @memberof CourseDegreeLessonOutVo
     */
    'connId'?: string;
    /**
     * 교육기관코드
     * @type {string}
     * @memberof CourseDegreeLessonOutVo
     */
    'edinId'?: string;
    /**
     * 직무교육레슨명
     * @type {string}
     * @memberof CourseDegreeLessonOutVo
     */
    'dutyEdctLssoNm'?: string;
    /**
     * 레슨시작일시
     * @type {string}
     * @memberof CourseDegreeLessonOutVo
     */
    'lssoSttgTs'?: string;
    /**
     * 레슨종료일시
     * @type {string}
     * @memberof CourseDegreeLessonOutVo
     */
    'lssoFnshTs'?: string;
    /**
     * 콘텐츠상세내용
     * @type {string}
     * @memberof CourseDegreeLessonOutVo
     */
    'connDtlCon'?: string;
    /**
     * 교육강사ID
     * @type {string}
     * @memberof CourseDegreeLessonOutVo
     */
    'edctIstrId'?: string;
    /**
     * 강의시간
     * @type {number}
     * @memberof CourseDegreeLessonOutVo
     */
    'lcteTim'?: number;
    /**
     * 강사료금액
     * @type {number}
     * @memberof CourseDegreeLessonOutVo
     */
    'istrChg'?: number;
    /**
     * 사내여부
     * @type {string}
     * @memberof CourseDegreeLessonOutVo
     */
    'cmwtYn'?: string;
    /**
     * 회의장소명
     * @type {string}
     * @memberof CourseDegreeLessonOutVo
     */
    'conePlacNm'?: string;
    /**
     * 우편번호
     * @type {string}
     * @memberof CourseDegreeLessonOutVo
     */
    'zpCd'?: string;
    /**
     * 주소
     * @type {string}
     * @memberof CourseDegreeLessonOutVo
     */
    'adr'?: string;
    /**
     * 상세주소
     * @type {string}
     * @memberof CourseDegreeLessonOutVo
     */
    'dtlAdr'?: string;
    /**
     * 접속URL주소
     * @type {string}
     * @memberof CourseDegreeLessonOutVo
     */
    'cctnUrlAdr'?: string;
    /**
     * 신청URL주소
     * @type {string}
     * @memberof CourseDegreeLessonOutVo
     */
    'edctAplcUrlAdr'?: string;
    /**
     * 취소URL주소
     * @type {string}
     * @memberof CourseDegreeLessonOutVo
     */
    'edctCnclUrlAdr'?: string;
    /**
     * 미리보기URL주소
     * @type {string}
     * @memberof CourseDegreeLessonOutVo
     */
    'prvwUrlAdr'?: string;
    /**
     * 외부인증URL주소
     * @type {string}
     * @memberof CourseDegreeLessonOutVo
     */
    'extlCrtcUrlAdr'?: string;
    /**
     * 수료기준반영여부
     * @type {string}
     * @memberof CourseDegreeLessonOutVo
     */
    'ctcrBaseRflcYn'?: string;
    /**
     * 사용여부
     * @type {string}
     * @memberof CourseDegreeLessonOutVo
     */
    'useYn'?: string;
    /**
     * 삭제여부
     * @type {string}
     * @memberof CourseDegreeLessonOutVo
     */
    'isDelYn'?: string;
    /**
     * 선택여부
     * @type {string}
     * @memberof CourseDegreeLessonOutVo
     */
    'scltYn'?: CourseDegreeLessonOutVoScltYnEnum;
    /**
     * 가능여부
     * @type {string}
     * @memberof CourseDegreeLessonOutVo
     */
    'ablYn'?: CourseDegreeLessonOutVoAblYnEnum;
    /**
     * 조건값
     * @type {number}
     * @memberof CourseDegreeLessonOutVo
     */
    'cndtVl'?: number;
    /**
     * 속도제어여부
     * @type {string}
     * @memberof CourseDegreeLessonOutVo
     */
    'vlctCntlYn'?: CourseDegreeLessonOutVoVlctCntlYnEnum;
    /**
     * 위치제어여부
     * @type {string}
     * @memberof CourseDegreeLessonOutVo
     */
    'psiCntlYn'?: CourseDegreeLessonOutVoPsiCntlYnEnum;
    /**
     * 시작이후위치제어여부
     * @type {string}
     * @memberof CourseDegreeLessonOutVo
     */
    'sttgAhtPsiCntlYn'?: CourseDegreeLessonOutVoSttgAhtPsiCntlYnEnum;
    /**
     * 이전위치저장여부
     * @type {string}
     * @memberof CourseDegreeLessonOutVo
     */
    'fmtsPsiStrgYn'?: CourseDegreeLessonOutVoFmtsPsiStrgYnEnum;
    /**
     * 레슨반영비율
     * @type {number}
     * @memberof CourseDegreeLessonOutVo
     */
    'lssoRflcRto'?: number;
    /**
     * 수료점수
     * @type {number}
     * @memberof CourseDegreeLessonOutVo
     */
    'ctcrScr'?: number;
    /**
     * 사용자ID
     * @type {string}
     * @memberof CourseDegreeLessonOutVo
     */
    'userId'?: string;
    /**
     * 
     * @type {CourseResultOutVo}
     * @memberof CourseDegreeLessonOutVo
     */
    'courseResult'?: CourseResultOutVo;
    /**
     * 
     * @type {MultimediaOutVo}
     * @memberof CourseDegreeLessonOutVo
     */
    'vod'?: MultimediaOutVo;
    /**
     * 레슨에 대한 진도율
     * @type {number}
     * @memberof CourseDegreeLessonOutVo
     */
    'acmlCnfgRto'?: number;
    /**
     * 
     * @type {ReportOutVo}
     * @memberof CourseDegreeLessonOutVo
     */
    'report'?: ReportOutVo;
    /**
     * 
     * @type {string}
     * @memberof CourseDegreeLessonOutVo
     */
    'completionUseYn'?: string;
}

export const CourseDegreeLessonOutVoScltYnEnum = {
    Y: 'Y',
    N: 'N'
} as const;

export type CourseDegreeLessonOutVoScltYnEnum = typeof CourseDegreeLessonOutVoScltYnEnum[keyof typeof CourseDegreeLessonOutVoScltYnEnum];
export const CourseDegreeLessonOutVoAblYnEnum = {
    Y: 'Y',
    N: 'N'
} as const;

export type CourseDegreeLessonOutVoAblYnEnum = typeof CourseDegreeLessonOutVoAblYnEnum[keyof typeof CourseDegreeLessonOutVoAblYnEnum];
export const CourseDegreeLessonOutVoVlctCntlYnEnum = {
    Y: 'Y',
    N: 'N'
} as const;

export type CourseDegreeLessonOutVoVlctCntlYnEnum = typeof CourseDegreeLessonOutVoVlctCntlYnEnum[keyof typeof CourseDegreeLessonOutVoVlctCntlYnEnum];
export const CourseDegreeLessonOutVoPsiCntlYnEnum = {
    Y: 'Y',
    N: 'N'
} as const;

export type CourseDegreeLessonOutVoPsiCntlYnEnum = typeof CourseDegreeLessonOutVoPsiCntlYnEnum[keyof typeof CourseDegreeLessonOutVoPsiCntlYnEnum];
export const CourseDegreeLessonOutVoSttgAhtPsiCntlYnEnum = {
    Y: 'Y',
    N: 'N'
} as const;

export type CourseDegreeLessonOutVoSttgAhtPsiCntlYnEnum = typeof CourseDegreeLessonOutVoSttgAhtPsiCntlYnEnum[keyof typeof CourseDegreeLessonOutVoSttgAhtPsiCntlYnEnum];
export const CourseDegreeLessonOutVoFmtsPsiStrgYnEnum = {
    Y: 'Y',
    N: 'N'
} as const;

export type CourseDegreeLessonOutVoFmtsPsiStrgYnEnum = typeof CourseDegreeLessonOutVoFmtsPsiStrgYnEnum[keyof typeof CourseDegreeLessonOutVoFmtsPsiStrgYnEnum];

/**
 * 
 * @export
 * @interface CourseDegreeLessonProgressInVo
 */
export interface CourseDegreeLessonProgressInVo {
    /**
     * 학습번호
     * @type {number}
     * @memberof CourseDegreeLessonProgressInVo
     */
    'lrngSqn'?: number;
    /**
     * 직무교육코드
     * @type {string}
     * @memberof CourseDegreeLessonProgressInVo
     */
    'dutyEdctCd'?: string;
    /**
     * 교육차수번호
     * @type {number}
     * @memberof CourseDegreeLessonProgressInVo
     */
    'edctDsprNo'?: number;
    /**
     * 교육차수챕터번호
     * @type {number}
     * @memberof CourseDegreeLessonProgressInVo
     */
    'edctDsprChpaNo'?: number;
    /**
     * 교육차수레슨번호
     * @type {number}
     * @memberof CourseDegreeLessonProgressInVo
     */
    'edctDsprLssoNo'?: number;
    /**
     * 전체영상길이
     * @type {number}
     * @memberof CourseDegreeLessonProgressInVo
     */
    'allPictLen'?: number;
}
/**
 * 
 * @export
 * @interface CourseDegreeLessonSummaryInVo
 */
export interface CourseDegreeLessonSummaryInVo {
    /**
     * 직무교육코드
     * @type {string}
     * @memberof CourseDegreeLessonSummaryInVo
     */
    'dutyEdctCd'?: string;
    /**
     * 교육차수번호
     * @type {number}
     * @memberof CourseDegreeLessonSummaryInVo
     */
    'edctDsprNo'?: number;
    /**
     * 교육차수챕터번호
     * @type {number}
     * @memberof CourseDegreeLessonSummaryInVo
     */
    'edctDsprChpaNo'?: number;
    /**
     * 교육차수레슨번호
     * @type {number}
     * @memberof CourseDegreeLessonSummaryInVo
     */
    'edctDsprLssoNo'?: number;
    /**
     * 현재학습객체값
     * @type {number}
     * @memberof CourseDegreeLessonSummaryInVo
     */
    'currentAcmlPictLen'?: number;
    /**
     * 현재학습지점
     * @type {number}
     * @memberof CourseDegreeLessonSummaryInVo
     */
    'currentValue'?: number;
}
/**
 * 
 * @export
 * @interface CourseDegreeLessonSummaryInitInVo
 */
export interface CourseDegreeLessonSummaryInitInVo {
    /**
     * 직무교육코드
     * @type {string}
     * @memberof CourseDegreeLessonSummaryInitInVo
     */
    'dutyEdctCd'?: string;
    /**
     * 교육차수번호
     * @type {number}
     * @memberof CourseDegreeLessonSummaryInitInVo
     */
    'edctDsprNo'?: number;
    /**
     * 교육차수챕터번호
     * @type {number}
     * @memberof CourseDegreeLessonSummaryInitInVo
     */
    'edctDsprChpaNo'?: number;
    /**
     * 교육차수레슨번호
     * @type {number}
     * @memberof CourseDegreeLessonSummaryInitInVo
     */
    'edctDsprLssoNo'?: number;
    /**
     * 아이디
     * @type {string}
     * @memberof CourseDegreeLessonSummaryInitInVo
     */
    'userId'?: string;
    /**
     * 누적구성비율
     * @type {number}
     * @memberof CourseDegreeLessonSummaryInitInVo
     */
    'acmlCnfgRto'?: number;
    /**
     * 누적영상길이
     * @type {number}
     * @memberof CourseDegreeLessonSummaryInitInVo
     */
    'acmlPictLen'?: number;
    /**
     * 취득점수
     * @type {number}
     * @memberof CourseDegreeLessonSummaryInitInVo
     */
    'acqmScr'?: number;
    /**
     * 취득여부
     * @type {string}
     * @memberof CourseDegreeLessonSummaryInitInVo
     */
    'ctcrYn'?: string;
}
/**
 * 
 * @export
 * @interface CourseDegreeMyPageOutVo
 */
export interface CourseDegreeMyPageOutVo {
    /**
     * 
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'cncrName'?: string;
    /**
     * 직무교육코드
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'dutyEdctCd'?: string;
    /**
     * 교육차수번호
     * @type {number}
     * @memberof CourseDegreeMyPageOutVo
     */
    'edctDsprNo'?: number;
    /**
     * 차수 직무교육명
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'dutyEdctNm'?: string;
    /**
     * 직무교육명
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'parentDutyEdctNm'?: string;
    /**
     * 신청구분코드
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'edctAplcDcd'?: string;
    /**
     * 신청시작일시
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'aplcSttgTs'?: string;
    /**
     * 신청종료일시
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'aplcFnshTs'?: string;
    /**
     * 수강취소시작일시
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'altcCnclSttgTs'?: string;
    /**
     * 수강취소종료일시
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'altcCnclFnshTs'?: string;
    /**
     * 개설예정여부
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'opnScdlYn'?: string;
    /**
     * 개설예정값
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'opnScdlTrm'?: string;
    /**
     * 학습시작일시
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'lrngSttgTs'?: string;
    /**
     * 학습종료일시
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'lrngFnshTs'?: string;
    /**
     * 국가코드
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'natlNm'?: string;
    /**
     * 지역본부코드값
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'arhdDsncVl'?: string;
    /**
     * 교육기간코드값
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'edctTrmCdVl'?: string;
    /**
     * 교육기간명
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'edctTrmNm'?: string;
    /**
     * 교육인원수
     * @type {number}
     * @memberof CourseDegreeMyPageOutVo
     */
    'edctNmprCnt'?: number;
    /**
     * 학습인정시간
     * @type {number}
     * @memberof CourseDegreeMyPageOutVo
     */
    'lrngAcknTim'?: number;
    /**
     * 교육금액환수여부
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'edctAmtRdmpYn'?: string;
    /**
     * 환수금액
     * @type {number}
     * @memberof CourseDegreeMyPageOutVo
     */
    'rdmpAmt'?: number;
    /**
     * 교육금액
     * @type {number}
     * @memberof CourseDegreeMyPageOutVo
     */
    'edexAmt'?: number;
    /**
     * 고용보험여부
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'eginAplyYn'?: string;
    /**
     * 고용보험적용금액
     * @type {number}
     * @memberof CourseDegreeMyPageOutVo
     */
    'eginAplyAmt'?: number;
    /**
     * 3급필수여부
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'deg3MndrYn'?: string;
    /**
     * 3급기준점수
     * @type {number}
     * @memberof CourseDegreeMyPageOutVo
     */
    'deg3BaseScr'?: number;
    /**
     * 4급필수여부
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'deg4MndrYn'?: string;
    /**
     * 4급기준점수
     * @type {number}
     * @memberof CourseDegreeMyPageOutVo
     */
    'deg4BaseScr'?: number;
    /**
     * 평점여부
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'evltYn'?: string;
    /**
     * 진행방식코드
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'pgrsMthdVl'?: string;
    /**
     * 학습기간
     * @type {number}
     * @memberof CourseDegreeMyPageOutVo
     */
    'lrngTrm'?: number;
    /**
     * 자유수강여부
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'freeAtlcYn'?: string;
    /**
     * 노출여부
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'expuYn'?: string;
    /**
     * 비고내용
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'rmrkCon'?: string;
    /**
     * 사용자명
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'userNm'?: string;
    /**
     * 부서코드값
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'deptDsncVl'?: string;
    /**
     * 부서명
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'deptDsncNm'?: string;
    /**
     * 직책코드값
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'rsptDsncVl'?: string;
    /**
     * 직책코드명
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'rsptDsncNm'?: string;
    /**
     * 직위코드값
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'jbttDsncVl'?: string;
    /**
     * 직위명
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'jbttDsncNm'?: string;
    /**
     * 수강상태코드
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'atlcDfnnScd'?: string;
    /**
     * 수강신청일시
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'atlcAplcTs'?: string;
    /**
     * 경평대상여부
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'tomaYn'?: string;
    /**
     * 학습시작일시
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'userLrngSttgTs'?: string;
    /**
     * 학습종료일시
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'userLrngFnshTs'?: string;
    /**
     * 총 진도율
     * @type {number}
     * @memberof CourseDegreeMyPageOutVo
     */
    'totalProgress'?: number;
    /**
     * 모바일이미지URL주소
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'mblImgUrlAdr'?: string;
    /**
     * PC이미지URL주소
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'pcImgUrlAdr'?: string;
    /**
     * 교육방식 유형 코드
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'edctMthdTcd'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseDegreeMyPageOutVo
     */
    'edctMthdNm'?: string;
}
/**
 * 
 * @export
 * @interface CourseDegreeOutVo
 */
export interface CourseDegreeOutVo {
    /**
     * 
     * @type {string}
     * @memberof CourseDegreeOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseDegreeOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseDegreeOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseDegreeOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseDegreeOutVo
     */
    'cncrName'?: string;
    /**
     * 직무교육코드
     * @type {string}
     * @memberof CourseDegreeOutVo
     */
    'dutyEdctCd'?: string;
    /**
     * 교육차수번호
     * @type {number}
     * @memberof CourseDegreeOutVo
     */
    'edctDsprNo'?: number;
    /**
     * 차수 직무교육명
     * @type {string}
     * @memberof CourseDegreeOutVo
     */
    'dutyEdctNm'?: string;
    /**
     * 직무교육명
     * @type {string}
     * @memberof CourseDegreeOutVo
     */
    'parentDutyEdctNm'?: string;
    /**
     * 신청구분코드
     * @type {string}
     * @memberof CourseDegreeOutVo
     */
    'edctAplcDcd'?: string;
    /**
     * 신청시작일시
     * @type {string}
     * @memberof CourseDegreeOutVo
     */
    'aplcSttgTs'?: string;
    /**
     * 신청종료일시
     * @type {string}
     * @memberof CourseDegreeOutVo
     */
    'aplcFnshTs'?: string;
    /**
     * 수강취소시작일시
     * @type {string}
     * @memberof CourseDegreeOutVo
     */
    'altcCnclSttgTs'?: string;
    /**
     * 수강취소종료일시
     * @type {string}
     * @memberof CourseDegreeOutVo
     */
    'altcCnclFnshTs'?: string;
    /**
     * 개설예정여부
     * @type {string}
     * @memberof CourseDegreeOutVo
     */
    'opnScdlYn'?: string;
    /**
     * 개설예정값
     * @type {string}
     * @memberof CourseDegreeOutVo
     */
    'opnScdlTrm'?: string;
    /**
     * 학습시작일시
     * @type {string}
     * @memberof CourseDegreeOutVo
     */
    'lrngSttgTs'?: string;
    /**
     * 학습종료일시
     * @type {string}
     * @memberof CourseDegreeOutVo
     */
    'lrngFnshTs'?: string;
    /**
     * 국가코드
     * @type {string}
     * @memberof CourseDegreeOutVo
     */
    'natlNm'?: string;
    /**
     * 지역본부코드값
     * @type {string}
     * @memberof CourseDegreeOutVo
     */
    'arhdDsncVl'?: string;
    /**
     * 교육기간코드값
     * @type {string}
     * @memberof CourseDegreeOutVo
     */
    'edctTrmCdVl'?: string;
    /**
     * 교육기간명
     * @type {string}
     * @memberof CourseDegreeOutVo
     */
    'edctTrmNm'?: string;
    /**
     * 교육인원수
     * @type {number}
     * @memberof CourseDegreeOutVo
     */
    'edctNmprCnt'?: number;
    /**
     * 학습인정시간
     * @type {number}
     * @memberof CourseDegreeOutVo
     */
    'lrngAcknTim'?: number;
    /**
     * 교육금액환수여부
     * @type {string}
     * @memberof CourseDegreeOutVo
     */
    'edctAmtRdmpYn'?: string;
    /**
     * 환수금액
     * @type {number}
     * @memberof CourseDegreeOutVo
     */
    'rdmpAmt'?: number;
    /**
     * 교육금액
     * @type {number}
     * @memberof CourseDegreeOutVo
     */
    'edexAmt'?: number;
    /**
     * 고용보험여부
     * @type {string}
     * @memberof CourseDegreeOutVo
     */
    'eginAplyYn'?: string;
    /**
     * 고용보험적용금액
     * @type {number}
     * @memberof CourseDegreeOutVo
     */
    'eginAplyAmt'?: number;
    /**
     * 3급필수여부
     * @type {string}
     * @memberof CourseDegreeOutVo
     */
    'deg3MndrYn'?: string;
    /**
     * 3급기준점수
     * @type {number}
     * @memberof CourseDegreeOutVo
     */
    'deg3BaseScr'?: number;
    /**
     * 4급필수여부
     * @type {string}
     * @memberof CourseDegreeOutVo
     */
    'deg4MndrYn'?: string;
    /**
     * 4급기준점수
     * @type {number}
     * @memberof CourseDegreeOutVo
     */
    'deg4BaseScr'?: number;
    /**
     * 평점여부
     * @type {string}
     * @memberof CourseDegreeOutVo
     */
    'evltYn'?: string;
    /**
     * 진행방식코드
     * @type {string}
     * @memberof CourseDegreeOutVo
     */
    'pgrsMthdVl'?: string;
    /**
     * 학습기간
     * @type {number}
     * @memberof CourseDegreeOutVo
     */
    'lrngTrm'?: number;
    /**
     * 자유수강여부
     * @type {string}
     * @memberof CourseDegreeOutVo
     */
    'freeAtlcYn'?: string;
    /**
     * 노출여부
     * @type {string}
     * @memberof CourseDegreeOutVo
     */
    'expuYn'?: string;
    /**
     * 비고내용
     * @type {string}
     * @memberof CourseDegreeOutVo
     */
    'rmrkCon'?: string;
    /**
     * 사용여부
     * @type {string}
     * @memberof CourseDegreeOutVo
     */
    'useYn'?: string;
    /**
     * 첨부파일 목록
     * @type {Array<CourseDegreeAttachFileOutVo>}
     * @memberof CourseDegreeOutVo
     */
    'attchFileList'?: Array<CourseDegreeAttachFileOutVo>;
    /**
     * 챕터 목록
     * @type {Array<CourseDegreeChapterOutVo>}
     * @memberof CourseDegreeOutVo
     */
    'courseDegreeChapter'?: Array<CourseDegreeChapterOutVo>;
    /**
     * 레슨 수료 기준
     * @type {Array<CourseCompletionCriteriaOutVo>}
     * @memberof CourseDegreeOutVo
     */
    'courseCompletionCriteria'?: Array<CourseCompletionCriteriaOutVo>;
    /**
     * 
     * @type {CourseOtherCompletionOutVo}
     * @memberof CourseDegreeOutVo
     */
    'courseOtherCompletion'?: CourseOtherCompletionOutVo;
    /**
     * 신청자 카운트 수
     * @type {number}
     * @memberof CourseDegreeOutVo
     */
    'edctAplcCnt'?: number;
    /**
     * 신청 가능 여부
     * @type {string}
     * @memberof CourseDegreeOutVo
     */
    'isReg'?: string;
}
/**
 * 신청첨부파일
 * @export
 * @interface CourseDegreeRequestAtchOutVo
 */
export interface CourseDegreeRequestAtchOutVo {
    /**
     * 
     * @type {string}
     * @memberof CourseDegreeRequestAtchOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseDegreeRequestAtchOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseDegreeRequestAtchOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseDegreeRequestAtchOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseDegreeRequestAtchOutVo
     */
    'cncrName'?: string;
    /**
     * 첨부번호
     * @type {number}
     * @memberof CourseDegreeRequestAtchOutVo
     */
    'atchSqn'?: number;
    /**
     * 원본파일명
     * @type {string}
     * @memberof CourseDegreeRequestAtchOutVo
     */
    'orcpFileNm'?: string;
    /**
     * 저장파일명
     * @type {string}
     * @memberof CourseDegreeRequestAtchOutVo
     */
    'strgFileNm'?: string;
    /**
     * 파일URL주소
     * @type {string}
     * @memberof CourseDegreeRequestAtchOutVo
     */
    'fileUrlAdr'?: string;
    /**
     * 클라우소주소
     * @type {string}
     * @memberof CourseDegreeRequestAtchOutVo
     */
    'cldFileUrlAdr'?: string;
    /**
     * 파일확장자명
     * @type {string}
     * @memberof CourseDegreeRequestAtchOutVo
     */
    'fileEtnsNm'?: string;
    /**
     * 파일크기
     * @type {number}
     * @memberof CourseDegreeRequestAtchOutVo
     */
    'flszVl'?: number;
}
/**
 * 
 * @export
 * @interface CourseInterestInVo
 */
export interface CourseInterestInVo {
    /**
     * 찜한번호
     * @type {number}
     * @memberof CourseInterestInVo
     */
    'dataSqn'?: number;
    /**
     * 직무교육코드
     * @type {string}
     * @memberof CourseInterestInVo
     */
    'dutyEdctCd'?: string;
}
/**
 * 
 * @export
 * @interface CourseInterestOutVo
 */
export interface CourseInterestOutVo {
    /**
     * 
     * @type {string}
     * @memberof CourseInterestOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseInterestOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseInterestOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseInterestOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseInterestOutVo
     */
    'cncrName'?: string;
    /**
     * 찜한번호
     * @type {number}
     * @memberof CourseInterestOutVo
     */
    'dataSqn'?: number;
    /**
     * 직무교육코드
     * @type {string}
     * @memberof CourseInterestOutVo
     */
    'dutyEdctCd'?: string;
    /**
     * 과정명
     * @type {string}
     * @memberof CourseInterestOutVo
     */
    'dutyEdctNm'?: string;
    /**
     * 과정구분코드
     * @type {string}
     * @memberof CourseInterestOutVo
     */
    'edctMthdTcd'?: string;
    /**
     * 과정구분명
     * @type {string}
     * @memberof CourseInterestOutVo
     */
    'edctMthdTcdNm'?: string;
    /**
     * 모바일이미지URL
     * @type {string}
     * @memberof CourseInterestOutVo
     */
    'mblImgUrlAdr'?: string;
    /**
     * PC이미지URL
     * @type {string}
     * @memberof CourseInterestOutVo
     */
    'pcImgUrlAdr'?: string;
}
/**
 * 
 * @export
 * @interface CourseInterestPageInqInVo
 */
export interface CourseInterestPageInqInVo {
    /**
     * 
     * @type {number}
     * @memberof CourseInterestPageInqInVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof CourseInterestPageInqInVo
     */
    'pageNo'?: number;
}
/**
 * 
 * @export
 * @interface CourseLibraryAddInVo
 */
export interface CourseLibraryAddInVo {
    /**
     * 과정 자료 아이디
     * @type {number}
     * @memberof CourseLibraryAddInVo
     */
    'atchNo'?: number;
    /**
     * 타이틀
     * @type {string}
     * @memberof CourseLibraryAddInVo
     */
    'ttlNm'?: string;
    /**
     * 내용
     * @type {string}
     * @memberof CourseLibraryAddInVo
     */
    'edctRflbCon'?: string;
    /**
     * 사용 여부
     * @type {string}
     * @memberof CourseLibraryAddInVo
     */
    'useYn'?: string;
    /**
     * 
     * @type {Array<CourseLibraryAddListInVo>}
     * @memberof CourseLibraryAddInVo
     */
    'courseLibraryAddListInVoList'?: Array<CourseLibraryAddListInVo>;
}
/**
 * 
 * @export
 * @interface CourseLibraryAddListInVo
 */
export interface CourseLibraryAddListInVo {
    /**
     * 과정 코드
     * @type {string}
     * @memberof CourseLibraryAddListInVo
     */
    'dutyEdctCd'?: string;
    /**
     * 차수 번호
     * @type {number}
     * @memberof CourseLibraryAddListInVo
     */
    'edctDsprNo'?: number;
}
/**
 * 
 * @export
 * @interface CourseLibraryDeleteInVo
 */
export interface CourseLibraryDeleteInVo {
    /**
     * 과정 자료 아이디
     * @type {number}
     * @memberof CourseLibraryDeleteInVo
     */
    'atchNo'?: number;
}
/**
 * 
 * @export
 * @interface CourseLibraryInVo
 */
export interface CourseLibraryInVo {
    /**
     * 과정 자료 아이디
     * @type {number}
     * @memberof CourseLibraryInVo
     */
    'atchNo'?: number;
    /**
     * 과정 코드
     * @type {string}
     * @memberof CourseLibraryInVo
     */
    'dutyEdctCd'?: string;
    /**
     * 차수 번호
     * @type {number}
     * @memberof CourseLibraryInVo
     */
    'edctDsprNo'?: number;
    /**
     * 타이틀
     * @type {string}
     * @memberof CourseLibraryInVo
     */
    'ttlNm'?: string;
    /**
     * 내용
     * @type {string}
     * @memberof CourseLibraryInVo
     */
    'edctRflbCon'?: string;
    /**
     * 사용 여부
     * @type {string}
     * @memberof CourseLibraryInVo
     */
    'useYn'?: string;
    /**
     * 첨부파일 삭제 리스트
     * @type {Array<CourseBoardAtchDelletInVo>}
     * @memberof CourseLibraryInVo
     */
    'courseBoardAtchDelletInList'?: Array<CourseBoardAtchDelletInVo>;
}
/**
 * 
 * @export
 * @interface CourseLibraryOutVo
 */
export interface CourseLibraryOutVo {
    /**
     * 
     * @type {string}
     * @memberof CourseLibraryOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseLibraryOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseLibraryOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseLibraryOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseLibraryOutVo
     */
    'cncrName'?: string;
    /**
     * 과정 자료 아이디
     * @type {number}
     * @memberof CourseLibraryOutVo
     */
    'atchNo'?: number;
    /**
     * 과정 코드
     * @type {string}
     * @memberof CourseLibraryOutVo
     */
    'dutyEdctCd'?: string;
    /**
     * 과정명
     * @type {string}
     * @memberof CourseLibraryOutVo
     */
    'dutyEdctNm'?: string;
    /**
     * 차수명
     * @type {string}
     * @memberof CourseLibraryOutVo
     */
    'edctProcNm'?: string;
    /**
     * 차수 번호
     * @type {number}
     * @memberof CourseLibraryOutVo
     */
    'edctDsprNo'?: number;
    /**
     * 타이틀
     * @type {string}
     * @memberof CourseLibraryOutVo
     */
    'ttlNm'?: string;
    /**
     * 내용
     * @type {string}
     * @memberof CourseLibraryOutVo
     */
    'edctRflbCon'?: string;
    /**
     * 사용 여부
     * @type {string}
     * @memberof CourseLibraryOutVo
     */
    'useYn'?: string;
    /**
     * 첨부파일 갯수
     * @type {number}
     * @memberof CourseLibraryOutVo
     */
    'atchCnt'?: number;
    /**
     * 
     * @type {Array<CourseBoardAtchOutVo>}
     * @memberof CourseLibraryOutVo
     */
    'courseBoardAtchOutList'?: Array<CourseBoardAtchOutVo>;
}
/**
 * 
 * @export
 * @interface CourseLibraryPageInqInVo
 */
export interface CourseLibraryPageInqInVo {
    /**
     * 
     * @type {number}
     * @memberof CourseLibraryPageInqInVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof CourseLibraryPageInqInVo
     */
    'pageNo'?: number;
    /**
     * 과정 코드
     * @type {string}
     * @memberof CourseLibraryPageInqInVo
     */
    'dutyEdctCd'?: string;
    /**
     * 차수 번호
     * @type {number}
     * @memberof CourseLibraryPageInqInVo
     */
    'edctDsprNo'?: number;
    /**
     * 등록 시작일
     * @type {string}
     * @memberof CourseLibraryPageInqInVo
     */
    'cretTsStart'?: string;
    /**
     * 등록 종료일
     * @type {string}
     * @memberof CourseLibraryPageInqInVo
     */
    'cretTsEnd'?: string;
    /**
     * 검색어
     * @type {string}
     * @memberof CourseLibraryPageInqInVo
     */
    'searchText'?: string;
}
/**
 * 
 * @export
 * @interface CourseLikeMyPageOutVo
 */
export interface CourseLikeMyPageOutVo {
    /**
     * 
     * @type {string}
     * @memberof CourseLikeMyPageOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseLikeMyPageOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseLikeMyPageOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseLikeMyPageOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseLikeMyPageOutVo
     */
    'cncrName'?: string;
    /**
     * 교육 과정코드
     * @type {string}
     * @memberof CourseLikeMyPageOutVo
     */
    'dutyEdctCd'?: string;
    /**
     * 교육과정학습분류코드값
     * @type {string}
     * @memberof CourseLikeMyPageOutVo
     */
    'edctClsfVl'?: string;
    /**
     * 개설카테고리코드값
     * @type {string}
     * @memberof CourseLikeMyPageOutVo
     */
    'opnCtgyVl'?: string;
    /**
     * 교육방식코드
     * @type {string}
     * @memberof CourseLikeMyPageOutVo
     */
    'edctMthdTcd'?: string;
    /**
     * 교육수준코드
     * @type {string}
     * @memberof CourseLikeMyPageOutVo
     */
    'edctDflvTcd'?: string;
    /**
     * 키워드값
     * @type {string}
     * @memberof CourseLikeMyPageOutVo
     */
    'kwrVl'?: string;
    /**
     * 교육과정명
     * @type {string}
     * @memberof CourseLikeMyPageOutVo
     */
    'dutyEdctNm'?: string;
    /**
     * 교육과정목적내용
     * @type {string}
     * @memberof CourseLikeMyPageOutVo
     */
    'dutyEdctObjtCon'?: string;
    /**
     * 교육과정설명내용
     * @type {string}
     * @memberof CourseLikeMyPageOutVo
     */
    'dutyEdctDescCon'?: string;
    /**
     * 교육과정대상내용
     * @type {string}
     * @memberof CourseLikeMyPageOutVo
     */
    'dutyEdctTgtCon'?: string;
    /**
     * 배송지사용여부
     * @type {string}
     * @memberof CourseLikeMyPageOutVo
     */
    'dlplUseYn'?: string;
    /**
     * 3급필수여부
     * @type {string}
     * @memberof CourseLikeMyPageOutVo
     */
    'deg3MndrYn'?: string;
    /**
     * 3급기준점수
     * @type {number}
     * @memberof CourseLikeMyPageOutVo
     */
    'deg3BaseScr'?: number;
    /**
     * 4급필수여부
     * @type {string}
     * @memberof CourseLikeMyPageOutVo
     */
    'deg4MndrYn'?: string;
    /**
     * 4급기준점수
     * @type {number}
     * @memberof CourseLikeMyPageOutVo
     */
    'deg4BaseScr'?: number;
    /**
     * 평점여부
     * @type {string}
     * @memberof CourseLikeMyPageOutVo
     */
    'evltYn'?: string;
    /**
     * 순서
     * @type {number}
     * @memberof CourseLikeMyPageOutVo
     */
    'sqc'?: number;
    /**
     * 부서결재사용여부
     * @type {string}
     * @memberof CourseLikeMyPageOutVo
     */
    'deptSnctUseYn'?: string;
    /**
     * 결재여부
     * @type {string}
     * @memberof CourseLikeMyPageOutVo
     */
    'athzYn'?: string;
    /**
     * 모바일이미지URL주소
     * @type {string}
     * @memberof CourseLikeMyPageOutVo
     */
    'mblImgUrlAdr'?: string;
    /**
     * PC이미지URL주소
     * @type {string}
     * @memberof CourseLikeMyPageOutVo
     */
    'pcImgUrlAdr'?: string;
    /**
     * 교육과정비고내용
     * @type {string}
     * @memberof CourseLikeMyPageOutVo
     */
    'rmrkCon'?: string;
    /**
     * 사용여부
     * @type {string}
     * @memberof CourseLikeMyPageOutVo
     */
    'useYn'?: string;
}
/**
 * 
 * @export
 * @interface CourseNoticeAddInVo
 */
export interface CourseNoticeAddInVo {
    /**
     * 과정 공지사항 아이디
     * @type {number}
     * @memberof CourseNoticeAddInVo
     */
    'edctPbnsNo'?: number;
    /**
     * 과정코드, 차수번호 리스트
     * @type {Array<CourseNoticeAddListInVo>}
     * @memberof CourseNoticeAddInVo
     */
    'courseNoticeAddList'?: Array<CourseNoticeAddListInVo>;
    /**
     * 공지 타이틀
     * @type {string}
     * @memberof CourseNoticeAddInVo
     */
    'edctPbnsTtlNm'?: string;
    /**
     * 공지 내용
     * @type {string}
     * @memberof CourseNoticeAddInVo
     */
    'edctPbnsCon'?: string;
    /**
     * 사용 여부
     * @type {string}
     * @memberof CourseNoticeAddInVo
     */
    'useYn'?: string;
}
/**
 * 과정코드, 차수번호 리스트
 * @export
 * @interface CourseNoticeAddListInVo
 */
export interface CourseNoticeAddListInVo {
    /**
     * 과정 코드
     * @type {string}
     * @memberof CourseNoticeAddListInVo
     */
    'dutyEdctCd'?: string;
    /**
     * 차수 번호
     * @type {number}
     * @memberof CourseNoticeAddListInVo
     */
    'edctDsprNo'?: number;
}
/**
 * 
 * @export
 * @interface CourseNoticeDeleteInVo
 */
export interface CourseNoticeDeleteInVo {
    /**
     * 과정 공지사항 아이디
     * @type {number}
     * @memberof CourseNoticeDeleteInVo
     */
    'edctPbnsNo'?: number;
}
/**
 * 
 * @export
 * @interface CourseNoticeInVo
 */
export interface CourseNoticeInVo {
    /**
     * 과정 공지사항 아이디
     * @type {number}
     * @memberof CourseNoticeInVo
     */
    'edctPbnsNo'?: number;
    /**
     * 과정 코드
     * @type {string}
     * @memberof CourseNoticeInVo
     */
    'dutyEdctCd'?: string;
    /**
     * 차수 번호
     * @type {number}
     * @memberof CourseNoticeInVo
     */
    'edctDsprNo'?: number;
    /**
     * 공지 타이틀
     * @type {string}
     * @memberof CourseNoticeInVo
     */
    'edctPbnsTtlNm'?: string;
    /**
     * 공지 내용
     * @type {string}
     * @memberof CourseNoticeInVo
     */
    'edctPbnsCon'?: string;
    /**
     * 사용 여부
     * @type {string}
     * @memberof CourseNoticeInVo
     */
    'useYn'?: string;
    /**
     * 첨부파일 삭제 리스트
     * @type {Array<CourseBoardAtchDelletInVo>}
     * @memberof CourseNoticeInVo
     */
    'courseBoardAtchDelletInList'?: Array<CourseBoardAtchDelletInVo>;
}
/**
 * 
 * @export
 * @interface CourseNoticeOutVo
 */
export interface CourseNoticeOutVo {
    /**
     * 
     * @type {string}
     * @memberof CourseNoticeOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseNoticeOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseNoticeOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseNoticeOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseNoticeOutVo
     */
    'cncrName'?: string;
    /**
     * 과정 공지사항 아이디
     * @type {number}
     * @memberof CourseNoticeOutVo
     */
    'edctPbnsNo'?: number;
    /**
     * 과정 코드
     * @type {string}
     * @memberof CourseNoticeOutVo
     */
    'dutyEdctCd'?: string;
    /**
     * 과정명
     * @type {string}
     * @memberof CourseNoticeOutVo
     */
    'dutyEdctNm'?: string;
    /**
     * 차수 번호
     * @type {number}
     * @memberof CourseNoticeOutVo
     */
    'edctDsprNo'?: number;
    /**
     * 공지 타이틀
     * @type {string}
     * @memberof CourseNoticeOutVo
     */
    'edctPbnsTtlNm'?: string;
    /**
     * 공지 내용
     * @type {string}
     * @memberof CourseNoticeOutVo
     */
    'edctPbnsCon'?: string;
    /**
     * 사용 여부
     * @type {string}
     * @memberof CourseNoticeOutVo
     */
    'useYn'?: string;
    /**
     * 첨부파일 리스트
     * @type {Array<CourseBoardAtchOutVo>}
     * @memberof CourseNoticeOutVo
     */
    'courseBoardAtchOutList'?: Array<CourseBoardAtchOutVo>;
    /**
     * 첨부파일 갯수
     * @type {number}
     * @memberof CourseNoticeOutVo
     */
    'atchCnt'?: number;
}
/**
 * 
 * @export
 * @interface CourseNoticePageInqInVo
 */
export interface CourseNoticePageInqInVo {
    /**
     * 
     * @type {number}
     * @memberof CourseNoticePageInqInVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof CourseNoticePageInqInVo
     */
    'pageNo'?: number;
    /**
     * 과정 코드
     * @type {string}
     * @memberof CourseNoticePageInqInVo
     */
    'dutyEdctCd'?: string;
    /**
     * 차수 번호
     * @type {number}
     * @memberof CourseNoticePageInqInVo
     */
    'edctDsprNo'?: number;
    /**
     * 등록 시작일
     * @type {string}
     * @memberof CourseNoticePageInqInVo
     */
    'cretTsStart'?: string;
    /**
     * 등록 종료일
     * @type {string}
     * @memberof CourseNoticePageInqInVo
     */
    'cretTsEnd'?: string;
    /**
     * 검색어
     * @type {string}
     * @memberof CourseNoticePageInqInVo
     */
    'searchText'?: string;
}
/**
 * 레슨 수료 기타
 * @export
 * @interface CourseOtherCompletionOutVo
 */
export interface CourseOtherCompletionOutVo {
    /**
     * 
     * @type {string}
     * @memberof CourseOtherCompletionOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseOtherCompletionOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseOtherCompletionOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseOtherCompletionOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseOtherCompletionOutVo
     */
    'cncrName'?: string;
    /**
     * 직무교육코드
     * @type {string}
     * @memberof CourseOtherCompletionOutVo
     */
    'dutyEdctCd'?: string;
    /**
     * 교육차수번호
     * @type {number}
     * @memberof CourseOtherCompletionOutVo
     */
    'edctDsprNo'?: number;
    /**
     * 수료점수
     * @type {number}
     * @memberof CourseOtherCompletionOutVo
     */
    'ctcrScr'?: number;
    /**
     * 모든 과제 제출 여부
     * @type {string}
     * @memberof CourseOtherCompletionOutVo
     */
    'allTaskSbmsYn'?: string;
    /**
     * 모든 설문 제출 여부
     * @type {string}
     * @memberof CourseOtherCompletionOutVo
     */
    'allQstrSbmsYn'?: string;
    /**
     * 모든 평가 가능 여부
     * @type {string}
     * @memberof CourseOtherCompletionOutVo
     */
    'allValtAaeYn'?: string;
    /**
     * 사용여부
     * @type {string}
     * @memberof CourseOtherCompletionOutVo
     */
    'useYn'?: string;
}
/**
 * 
 * @export
 * @interface CourseQuestionAnswerDeleteInVo
 */
export interface CourseQuestionAnswerDeleteInVo {
    /**
     * 문의글 아이디
     * @type {number}
     * @memberof CourseQuestionAnswerDeleteInVo
     */
    'edctQstnNo'?: number;
    /**
     * 과정 코드
     * @type {string}
     * @memberof CourseQuestionAnswerDeleteInVo
     */
    'dutyEdctCd'?: string;
    /**
     * 답변 아이디
     * @type {number}
     * @memberof CourseQuestionAnswerDeleteInVo
     */
    'edctQstnRplyNo'?: number;
}
/**
 * 
 * @export
 * @interface CourseQuestionAnswerInVo
 */
export interface CourseQuestionAnswerInVo {
    /**
     * 문의글 아이디
     * @type {number}
     * @memberof CourseQuestionAnswerInVo
     */
    'edctQstnNo'?: number;
    /**
     * 과정 코드
     * @type {string}
     * @memberof CourseQuestionAnswerInVo
     */
    'dutyEdctCd'?: string;
    /**
     * 차수 번호
     * @type {number}
     * @memberof CourseQuestionAnswerInVo
     */
    'edctDsprNo'?: number;
    /**
     * 답변 아이디
     * @type {number}
     * @memberof CourseQuestionAnswerInVo
     */
    'edctQstnRplyNo'?: number;
    /**
     * 답변 내용
     * @type {string}
     * @memberof CourseQuestionAnswerInVo
     */
    'rplyDtlCon'?: string;
    /**
     * 사용 여부
     * @type {string}
     * @memberof CourseQuestionAnswerInVo
     */
    'useYn'?: string;
    /**
     * 첨부파일 삭제 리스트
     * @type {Array<CourseBoardAtchDelletInVo>}
     * @memberof CourseQuestionAnswerInVo
     */
    'courseBoardAtchDelletInList'?: Array<CourseBoardAtchDelletInVo>;
}
/**
 * 
 * @export
 * @interface CourseQuestionAnswerOutVo
 */
export interface CourseQuestionAnswerOutVo {
    /**
     * 
     * @type {string}
     * @memberof CourseQuestionAnswerOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseQuestionAnswerOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseQuestionAnswerOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseQuestionAnswerOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseQuestionAnswerOutVo
     */
    'cncrName'?: string;
    /**
     * 문의글 아이디
     * @type {number}
     * @memberof CourseQuestionAnswerOutVo
     */
    'edctQstnNo'?: number;
    /**
     * 과정 코드
     * @type {string}
     * @memberof CourseQuestionAnswerOutVo
     */
    'dutyEdctCd'?: string;
    /**
     * 답변 아이디
     * @type {string}
     * @memberof CourseQuestionAnswerOutVo
     */
    'edctQstnRplyNo'?: string;
    /**
     * 답변 내용
     * @type {string}
     * @memberof CourseQuestionAnswerOutVo
     */
    'rplyDtlCon'?: string;
    /**
     * 사용 여부
     * @type {string}
     * @memberof CourseQuestionAnswerOutVo
     */
    'useYn'?: string;
    /**
     * 
     * @type {Array<CourseBoardAtchOutVo>}
     * @memberof CourseQuestionAnswerOutVo
     */
    'courseBoardAtchOutList'?: Array<CourseBoardAtchOutVo>;
}
/**
 * 
 * @export
 * @interface CourseQuestionDeleteInVo
 */
export interface CourseQuestionDeleteInVo {
    /**
     * 문의글 아이디
     * @type {number}
     * @memberof CourseQuestionDeleteInVo
     */
    'edctQstnNo'?: number;
}
/**
 * 
 * @export
 * @interface CourseQuestionInVo
 */
export interface CourseQuestionInVo {
    /**
     * 과정 문의글 아이디
     * @type {number}
     * @memberof CourseQuestionInVo
     */
    'edctQstnNo'?: number;
    /**
     * 과정 코드
     * @type {string}
     * @memberof CourseQuestionInVo
     */
    'dutyEdctCd'?: string;
    /**
     * 차수 번호
     * @type {number}
     * @memberof CourseQuestionInVo
     */
    'edctDsprNo'?: number;
    /**
     * 질문 타이틀 명
     * @type {string}
     * @memberof CourseQuestionInVo
     */
    'edctQstnTtlNm'?: string;
    /**
     * 질문 내용
     * @type {string}
     * @memberof CourseQuestionInVo
     */
    'qstnCon'?: string;
    /**
     * 비밀글여부
     * @type {string}
     * @memberof CourseQuestionInVo
     */
    'secrtPtngYn'?: string;
    /**
     * 사용 여부
     * @type {string}
     * @memberof CourseQuestionInVo
     */
    'useYn'?: string;
    /**
     * 첨부파일 삭제 리스트
     * @type {Array<CourseBoardAtchDelletInVo>}
     * @memberof CourseQuestionInVo
     */
    'courseBoardAtchDelletInList'?: Array<CourseBoardAtchDelletInVo>;
}
/**
 * 
 * @export
 * @interface CourseQuestionOutVo
 */
export interface CourseQuestionOutVo {
    /**
     * 과정 코드
     * @type {string}
     * @memberof CourseQuestionOutVo
     */
    'dutyEdctCd'?: string;
    /**
     * 과정 명
     * @type {string}
     * @memberof CourseQuestionOutVo
     */
    'dutyEdctNm'?: string;
    /**
     * 차수 명
     * @type {string}
     * @memberof CourseQuestionOutVo
     */
    'edctDsprNm'?: string;
    /**
     * 질문 타이틀 명
     * @type {string}
     * @memberof CourseQuestionOutVo
     */
    'edctQstnTtlNm'?: string;
    /**
     * 질문 내용
     * @type {string}
     * @memberof CourseQuestionOutVo
     */
    'qstnCon'?: string;
    /**
     * 비밀글여부
     * @type {string}
     * @memberof CourseQuestionOutVo
     */
    'secrtPtngYn'?: string;
    /**
     * 사용 여부
     * @type {string}
     * @memberof CourseQuestionOutVo
     */
    'useYn'?: string;
    /**
     * 질문 등록 일
     * @type {string}
     * @memberof CourseQuestionOutVo
     */
    'cretTs'?: string;
    /**
     * 질문 등록 아이디
     * @type {string}
     * @memberof CourseQuestionOutVo
     */
    'cncrId'?: string;
    /**
     * 질문 등록자 이름
     * @type {string}
     * @memberof CourseQuestionOutVo
     */
    'cncrName'?: string;
    /**
     * 답변 내용
     * @type {string}
     * @memberof CourseQuestionOutVo
     */
    'rplyDtlCon'?: string;
    /**
     * 답변 사용 여부
     * @type {string}
     * @memberof CourseQuestionOutVo
     */
    'answUseYn'?: string;
    /**
     * 답변 등록 일
     * @type {string}
     * @memberof CourseQuestionOutVo
     */
    'answCretTs'?: string;
    /**
     * 답변 등록 아이디
     * @type {string}
     * @memberof CourseQuestionOutVo
     */
    'answCncrId'?: string;
    /**
     * 답변 사용 여부
     * @type {string}
     * @memberof CourseQuestionOutVo
     */
    'answYn'?: string;
    /**
     * 첨부파일 갯수
     * @type {number}
     * @memberof CourseQuestionOutVo
     */
    'atchCnt'?: number;
    /**
     * 
     * @type {Array<CourseBoardAtchOutVo>}
     * @memberof CourseQuestionOutVo
     */
    'courseBoardAtchOutList'?: Array<CourseBoardAtchOutVo>;
}
/**
 * 
 * @export
 * @interface CourseQuestionPageInqInVo
 */
export interface CourseQuestionPageInqInVo {
    /**
     * 
     * @type {number}
     * @memberof CourseQuestionPageInqInVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof CourseQuestionPageInqInVo
     */
    'pageNo'?: number;
    /**
     * 직무교육코드
     * @type {string}
     * @memberof CourseQuestionPageInqInVo
     */
    'dutyEdctCd'?: string;
    /**
     * 차수 번호
     * @type {number}
     * @memberof CourseQuestionPageInqInVo
     */
    'edctDsprNo'?: number;
    /**
     * 등록 시작일
     * @type {string}
     * @memberof CourseQuestionPageInqInVo
     */
    'cretTsStart'?: string;
    /**
     * 등록 종료일
     * @type {string}
     * @memberof CourseQuestionPageInqInVo
     */
    'cretTsEnd'?: string;
    /**
     * 사용 여부
     * @type {string}
     * @memberof CourseQuestionPageInqInVo
     */
    'useYn'?: string;
    /**
     * 검색 테스트
     * @type {string}
     * @memberof CourseQuestionPageInqInVo
     */
    'searchText'?: string;
    /**
     * 답변 여부
     * @type {string}
     * @memberof CourseQuestionPageInqInVo
     */
    'answerYn'?: string;
}
/**
 * 레슨결과
 * @export
 * @interface CourseResultOutVo
 */
export interface CourseResultOutVo {
    /**
     * 
     * @type {string}
     * @memberof CourseResultOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseResultOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseResultOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseResultOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseResultOutVo
     */
    'cncrName'?: string;
    /**
     * 직무교육코드
     * @type {string}
     * @memberof CourseResultOutVo
     */
    'dutyEdctCd'?: string;
    /**
     * 교육차수번호
     * @type {number}
     * @memberof CourseResultOutVo
     */
    'edctDsprNo'?: number;
    /**
     * 교육차수챕터번호
     * @type {number}
     * @memberof CourseResultOutVo
     */
    'edctDsprChpaNo'?: number;
    /**
     * 교육차수레슨번호
     * @type {number}
     * @memberof CourseResultOutVo
     */
    'edctDsprLssoNo'?: number;
    /**
     * 사용자ID
     * @type {string}
     * @memberof CourseResultOutVo
     */
    'userId'?: string;
    /**
     * 학습시작일시
     * @type {string}
     * @memberof CourseResultOutVo
     */
    'lrngSttgTs'?: string;
    /**
     * 학습종료일시
     * @type {string}
     * @memberof CourseResultOutVo
     */
    'lrngFnshTs'?: string;
    /**
     * 누적구성비율
     * @type {number}
     * @memberof CourseResultOutVo
     */
    'acmlCnfgRto'?: number;
    /**
     * 누적영상길이
     * @type {number}
     * @memberof CourseResultOutVo
     */
    'acmlPictLen'?: number;
    /**
     * 획득점수
     * @type {number}
     * @memberof CourseResultOutVo
     */
    'acqmScr'?: number;
    /**
     * 수료여부
     * @type {string}
     * @memberof CourseResultOutVo
     */
    'ctcrYn'?: string;
    /**
     * 수료일자
     * @type {string}
     * @memberof CourseResultOutVo
     */
    'ctcrTs'?: string;
    /**
     * 사용여부
     * @type {string}
     * @memberof CourseResultOutVo
     */
    'useYn'?: string;
}
/**
 * 수강 후기
 * @export
 * @interface CourseReviewCntDtlOutVo
 */
export interface CourseReviewCntDtlOutVo {
    /**
     * 사용자 총 평점
     * @type {number}
     * @memberof CourseReviewCntDtlOutVo
     */
    'totalScore'?: number;
    /**
     * 전체후기수
     * @type {number}
     * @memberof CourseReviewCntDtlOutVo
     */
    'totalReviewCnt'?: number;
    /**
     * 5점 갯수
     * @type {number}
     * @memberof CourseReviewCntDtlOutVo
     */
    'fiveScoreCnt'?: number;
    /**
     * 4점 갯수
     * @type {number}
     * @memberof CourseReviewCntDtlOutVo
     */
    'fourScoreCnt'?: number;
    /**
     * 3점 갯수
     * @type {number}
     * @memberof CourseReviewCntDtlOutVo
     */
    'threeScoreCnt'?: number;
    /**
     * 2점 갯수
     * @type {number}
     * @memberof CourseReviewCntDtlOutVo
     */
    'twoScoreCnt'?: number;
    /**
     * 1점 갯수
     * @type {number}
     * @memberof CourseReviewCntDtlOutVo
     */
    'oneScoreCnt'?: number;
}
/**
 * 
 * @export
 * @interface CourseReviewInVo
 */
export interface CourseReviewInVo {
    /**
     * 후기번호
     * @type {number}
     * @memberof CourseReviewInVo
     */
    'dataSqn'?: number;
    /**
     * 직무교육코드
     * @type {string}
     * @memberof CourseReviewInVo
     */
    'dutyEdctCd'?: string;
    /**
     * 차수번호
     * @type {number}
     * @memberof CourseReviewInVo
     */
    'edctDsprNo'?: number;
    /**
     * 후기점수
     * @type {number}
     * @memberof CourseReviewInVo
     */
    'rvwScr'?: number;
    /**
     * 후기내용
     * @type {string}
     * @memberof CourseReviewInVo
     */
    'rvwCon'?: string;
    /**
     * 사용여부
     * @type {string}
     * @memberof CourseReviewInVo
     */
    'useYn'?: string;
}
/**
 * 
 * @export
 * @interface CourseReviewOutVo
 */
export interface CourseReviewOutVo {
    /**
     * 
     * @type {string}
     * @memberof CourseReviewOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseReviewOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseReviewOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseReviewOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseReviewOutVo
     */
    'cncrName'?: string;
    /**
     * 직무교육코드
     * @type {string}
     * @memberof CourseReviewOutVo
     */
    'dutyEdctCd'?: string;
    /**
     * 차수번호
     * @type {string}
     * @memberof CourseReviewOutVo
     */
    'edctDsprNo'?: string;
    /**
     * 과정명
     * @type {string}
     * @memberof CourseReviewOutVo
     */
    'dutyEdctNm'?: string;
    /**
     * 후기내용
     * @type {string}
     * @memberof CourseReviewOutVo
     */
    'rvwCon'?: string;
    /**
     * 후기점수
     * @type {number}
     * @memberof CourseReviewOutVo
     */
    'rvwScr'?: number;
    /**
     * 후기자가성일시
     * @type {string}
     * @memberof CourseReviewOutVo
     */
    'rvwCretTs'?: string;
    /**
     * 후기미작성 갯수
     * @type {string}
     * @memberof CourseReviewOutVo
     */
    'noRvwCount'?: string;
    /**
     * 후기작성 갯수
     * @type {string}
     * @memberof CourseReviewOutVo
     */
    'rvwCount'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseReviewOutVo
     */
    'mblImgUrlAdr'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseReviewOutVo
     */
    'pcImgUrlAdr'?: string;
    /**
     * 
     * @type {number}
     * @memberof CourseReviewOutVo
     */
    'data_SQN'?: number;
}
/**
 * 
 * @export
 * @interface CourseReviewPageInqInVo
 */
export interface CourseReviewPageInqInVo {
    /**
     * 
     * @type {number}
     * @memberof CourseReviewPageInqInVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof CourseReviewPageInqInVo
     */
    'pageNo'?: number;
    /**
     * 후기내용
     * @type {string}
     * @memberof CourseReviewPageInqInVo
     */
    'searchType'?: string;
}
/**
 * 
 * @export
 * @interface EduInsOutVo
 */
export interface EduInsOutVo {
    /**
     * 
     * @type {string}
     * @memberof EduInsOutVo
     */
    'edinId'?: string;
    /**
     * 
     * @type {string}
     * @memberof EduInsOutVo
     */
    'edinNm'?: string;
    /**
     * 
     * @type {string}
     * @memberof EduInsOutVo
     */
    'edinKcd'?: string;
    /**
     * 
     * @type {string}
     * @memberof EduInsOutVo
     */
    'bzn'?: string;
    /**
     * 
     * @type {string}
     * @memberof EduInsOutVo
     */
    'hmpgAdr'?: string;
    /**
     * 
     * @type {string}
     * @memberof EduInsOutVo
     */
    'cscnTpn'?: string;
    /**
     * 
     * @type {string}
     * @memberof EduInsOutVo
     */
    'bankNm'?: string;
    /**
     * 
     * @type {string}
     * @memberof EduInsOutVo
     */
    'acn'?: string;
    /**
     * 
     * @type {string}
     * @memberof EduInsOutVo
     */
    'dpNm'?: string;
    /**
     * 
     * @type {string}
     * @memberof EduInsOutVo
     */
    'rpNm'?: string;
    /**
     * 
     * @type {string}
     * @memberof EduInsOutVo
     */
    'cnplNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof EduInsOutVo
     */
    'ead'?: string;
    /**
     * 
     * @type {string}
     * @memberof EduInsOutVo
     */
    'lcteDsncNm'?: string;
    /**
     * 
     * @type {string}
     * @memberof EduInsOutVo
     */
    'spczFildNm'?: string;
    /**
     * 
     * @type {string}
     * @memberof EduInsOutVo
     */
    'chcnVl'?: string;
    /**
     * 
     * @type {string}
     * @memberof EduInsOutVo
     */
    'pkgNm'?: string;
    /**
     * 
     * @type {string}
     * @memberof EduInsOutVo
     */
    'actyNm'?: string;
    /**
     * 
     * @type {string}
     * @memberof EduInsOutVo
     */
    'schmNm'?: string;
    /**
     * 
     * @type {string}
     * @memberof EduInsOutVo
     */
    'iposAplkAdr'?: string;
    /**
     * 
     * @type {string}
     * @memberof EduInsOutVo
     */
    'apilUrlVl'?: string;
    /**
     * 
     * @type {string}
     * @memberof EduInsOutVo
     */
    'clotUrlAdr'?: string;
    /**
     * 
     * @type {string}
     * @memberof EduInsOutVo
     */
    'steAdr'?: string;
    /**
     * 
     * @type {string}
     * @memberof EduInsOutVo
     */
    'rmrkCon'?: string;
    /**
     * 
     * @type {string}
     * @memberof EduInsOutVo
     */
    'useYn'?: string;
    /**
     * 
     * @type {string}
     * @memberof EduInsOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof EduInsOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof EduInsOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof EduInsOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof EduInsOutVo
     */
    'iposApilUrlVl'?: string;
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'errorMsg'?: string;
}
/**
 * 
 * @export
 * @interface ExamBlbrOutVo
 */
export interface ExamBlbrOutVo {
    /**
     * 
     * @type {string}
     * @memberof ExamBlbrOutVo
     */
    'courseId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExamBlbrOutVo
     */
    'courseName'?: string;
}
/**
 * 
 * @export
 * @interface ExamBlbrPageInqInVo
 */
export interface ExamBlbrPageInqInVo {
    /**
     * 
     * @type {number}
     * @memberof ExamBlbrPageInqInVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof ExamBlbrPageInqInVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {string}
     * @memberof ExamBlbrPageInqInVo
     */
    'pageGrpInqYn'?: string;
    /**
     * 
     * @type {number}
     * @memberof ExamBlbrPageInqInVo
     */
    'pageGrpNbi'?: number;
    /**
     * 
     * @type {string}
     * @memberof ExamBlbrPageInqInVo
     */
    'cldPotlBlbrDcd'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExamBlbrPageInqInVo
     */
    'cldPotlBlbrTcd'?: string;
}
/**
 * 
 * @export
 * @interface ExamQuestionMultiMediaOutVo
 */
export interface ExamQuestionMultiMediaOutVo {
    /**
     * 
     * @type {string}
     * @memberof ExamQuestionMultiMediaOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExamQuestionMultiMediaOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExamQuestionMultiMediaOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExamQuestionMultiMediaOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExamQuestionMultiMediaOutVo
     */
    'cncrName'?: string;
    /**
     * 일련번호
     * @type {number}
     * @memberof ExamQuestionMultiMediaOutVo
     */
    'dataSqn'?: number;
    /**
     * 문항번호
     * @type {number}
     * @memberof ExamQuestionMultiMediaOutVo
     */
    'qsitNo'?: number;
    /**
     * 보기번호
     * @type {number}
     * @memberof ExamQuestionMultiMediaOutVo
     */
    'lkngNo'?: number;
    /**
     * 매체종류분류값(이미지,영상)
     * @type {string}
     * @memberof ExamQuestionMultiMediaOutVo
     */
    'mdiaKindClsfVl'?: string;
    /**
     * 원본파일명
     * @type {string}
     * @memberof ExamQuestionMultiMediaOutVo
     */
    'orcpFileNm'?: string;
    /**
     * 저장파일명
     * @type {string}
     * @memberof ExamQuestionMultiMediaOutVo
     */
    'strgFileNm'?: string;
    /**
     * 파일URL주소
     * @type {string}
     * @memberof ExamQuestionMultiMediaOutVo
     */
    'fileUrlAdr'?: string;
    /**
     * 클라우드파일URL주소
     * @type {string}
     * @memberof ExamQuestionMultiMediaOutVo
     */
    'cldFileUrlAdr'?: string;
    /**
     * 파일확장자명
     * @type {string}
     * @memberof ExamQuestionMultiMediaOutVo
     */
    'fileEtnsNm'?: string;
    /**
     * 파일크기값
     * @type {number}
     * @memberof ExamQuestionMultiMediaOutVo
     */
    'flszVl'?: number;
    /**
     * 표준이하해상도URL주소
     * @type {string}
     * @memberof ExamQuestionMultiMediaOutVo
     */
    'stndBlwRslnUrlAdr'?: string;
    /**
     * 표준이하해상도파일명
     * @type {string}
     * @memberof ExamQuestionMultiMediaOutVo
     */
    'stndBlwRslnFileNm'?: string;
    /**
     * 표준이상해상도URL주소
     * @type {string}
     * @memberof ExamQuestionMultiMediaOutVo
     */
    'stndAbvRslnUrlAdr'?: string;
    /**
     * 표준이상해상도파일명
     * @type {string}
     * @memberof ExamQuestionMultiMediaOutVo
     */
    'stndAbvRslnFileNm'?: string;
}
/**
 * 첨부파일 삭제 리스트
 * @export
 * @interface FacilityImageDelleteInVo
 */
export interface FacilityImageDelleteInVo {
    /**
     * 시설코드
     * @type {string}
     * @memberof FacilityImageDelleteInVo
     */
    'trngFcltDcd'?: string;
    /**
     * 시설장소유형코드
     * @type {string}
     * @memberof FacilityImageDelleteInVo
     */
    'fcltPsiDcd'?: string;
    /**
     * 시설유형코드
     * @type {string}
     * @memberof FacilityImageDelleteInVo
     */
    'fcltDtlKcd'?: string;
    /**
     * 파일번호
     * @type {number}
     * @memberof FacilityImageDelleteInVo
     */
    'fileNo'?: number;
}
/**
 * 첨부파일 리스트
 * @export
 * @interface FacilityImageOutVo
 */
export interface FacilityImageOutVo {
    /**
     * 
     * @type {string}
     * @memberof FacilityImageOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof FacilityImageOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof FacilityImageOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof FacilityImageOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof FacilityImageOutVo
     */
    'cncrName'?: string;
    /**
     * 시설코드
     * @type {string}
     * @memberof FacilityImageOutVo
     */
    'trngFcltDcd'?: string;
    /**
     * 시설장소유형코드
     * @type {string}
     * @memberof FacilityImageOutVo
     */
    'fcltPsiDcd'?: string;
    /**
     * 시설유형코드
     * @type {string}
     * @memberof FacilityImageOutVo
     */
    'fcltDtlKcd'?: string;
    /**
     * 파일번호
     * @type {number}
     * @memberof FacilityImageOutVo
     */
    'fileNo'?: number;
    /**
     * PC파일URL주소
     * @type {string}
     * @memberof FacilityImageOutVo
     */
    'pcFileUrlAdr'?: string;
    /**
     * PC클라우드파일URL주소
     * @type {string}
     * @memberof FacilityImageOutVo
     */
    'pcCldFileUrlAdr'?: string;
    /**
     * PC원본파일명
     * @type {string}
     * @memberof FacilityImageOutVo
     */
    'pcOrcpFileNm'?: string;
    /**
     * PC저장파일명
     * @type {string}
     * @memberof FacilityImageOutVo
     */
    'pcStrgFileNm'?: string;
    /**
     * PC파일확장자명
     * @type {string}
     * @memberof FacilityImageOutVo
     */
    'pcFileEtnsNm'?: string;
    /**
     * 사용 여부
     * @type {string}
     * @memberof FacilityImageOutVo
     */
    'useYn'?: string;
}
/**
 * 
 * @export
 * @interface FacilityInVo
 */
export interface FacilityInVo {
    /**
     * 시설코드
     * @type {string}
     * @memberof FacilityInVo
     */
    'trngFcltDcd'?: string;
    /**
     * 시설장소유형코드
     * @type {string}
     * @memberof FacilityInVo
     */
    'fcltPsiDcd'?: string;
    /**
     * 시설유형코드
     * @type {string}
     * @memberof FacilityInVo
     */
    'fcltDtlKcd'?: string;
    /**
     * 우편번호
     * @type {string}
     * @memberof FacilityInVo
     */
    'zpcd'?: string;
    /**
     * 주소
     * @type {string}
     * @memberof FacilityInVo
     */
    'fcltAdr'?: string;
    /**
     * 시설사용가능인원수
     * @type {number}
     * @memberof FacilityInVo
     */
    'useAblNmprCnt'?: number;
    /**
     * 시설설명내용
     * @type {string}
     * @memberof FacilityInVo
     */
    'fcltDtdcCon'?: string;
    /**
     * 일정컬러값
     * @type {string}
     * @memberof FacilityInVo
     */
    'schdColrVl'?: string;
    /**
     * 사용 여부
     * @type {string}
     * @memberof FacilityInVo
     */
    'useYn'?: string;
    /**
     * 첨부파일 삭제 리스트
     * @type {Array<FacilityImageDelleteInVo>}
     * @memberof FacilityInVo
     */
    'facilityImageDelleteList'?: Array<FacilityImageDelleteInVo>;
}
/**
 * 
 * @export
 * @interface FacilityOutVo
 */
export interface FacilityOutVo {
    /**
     * 
     * @type {string}
     * @memberof FacilityOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof FacilityOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof FacilityOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof FacilityOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof FacilityOutVo
     */
    'cncrName'?: string;
    /**
     * 시설코드
     * @type {string}
     * @memberof FacilityOutVo
     */
    'trngFcltDcd'?: string;
    /**
     * 시설코드명
     * @type {string}
     * @memberof FacilityOutVo
     */
    'fcltCdNm'?: string;
    /**
     * 시설장소유형코드
     * @type {string}
     * @memberof FacilityOutVo
     */
    'fcltPsiDcd'?: string;
    /**
     * 시설장소유형코드명
     * @type {string}
     * @memberof FacilityOutVo
     */
    'fcltPlacTcdNm'?: string;
    /**
     * 시설유형코드
     * @type {string}
     * @memberof FacilityOutVo
     */
    'fcltDtlKcd'?: string;
    /**
     * 시설유형코드명
     * @type {string}
     * @memberof FacilityOutVo
     */
    'fcltDtlKcdNm'?: string;
    /**
     * 우편번호
     * @type {string}
     * @memberof FacilityOutVo
     */
    'zpcd'?: string;
    /**
     * 주소
     * @type {string}
     * @memberof FacilityOutVo
     */
    'fcltAdr'?: string;
    /**
     * 시설사용가능인원수
     * @type {number}
     * @memberof FacilityOutVo
     */
    'useAblNmprCnt'?: number;
    /**
     * 휴양시설설명내용
     * @type {string}
     * @memberof FacilityOutVo
     */
    'fcltDtdcCon'?: string;
    /**
     * 일정컬러값
     * @type {string}
     * @memberof FacilityOutVo
     */
    'schdColrVl'?: string;
    /**
     * 사용 여부
     * @type {string}
     * @memberof FacilityOutVo
     */
    'useYn'?: string;
    /**
     * 첨부파일 리스트
     * @type {Array<FacilityImageOutVo>}
     * @memberof FacilityOutVo
     */
    'facilityImageList'?: Array<FacilityImageOutVo>;
}
/**
 * 
 * @export
 * @interface FacilityPageInqInVo
 */
export interface FacilityPageInqInVo {
    /**
     * 페이지당출력건수
     * @type {number}
     * @memberof FacilityPageInqInVo
     */
    'pageSize'?: number;
    /**
     * 페이지번호
     * @type {number}
     * @memberof FacilityPageInqInVo
     */
    'pageNo'?: number;
    /**
     * 시설코드
     * @type {string}
     * @memberof FacilityPageInqInVo
     */
    'trngFcltDcd'?: string;
    /**
     * 시설장소유형코드
     * @type {string}
     * @memberof FacilityPageInqInVo
     */
    'fcltPsiDcd'?: string;
    /**
     * 사용 여부
     * @type {string}
     * @memberof FacilityPageInqInVo
     */
    'useYn'?: string;
}
/**
 * 
 * @export
 * @interface FacilityRequestCalendarInqInVo
 */
export interface FacilityRequestCalendarInqInVo {
    /**
     * 예약시작날짜검색시작YYMMDD
     * @type {string}
     * @memberof FacilityRequestCalendarInqInVo
     */
    'rsvtSttgYmdStart'?: string;
    /**
     * 예약시작날짜검색종료YYMMDD
     * @type {string}
     * @memberof FacilityRequestCalendarInqInVo
     */
    'rsvtSttgYmdEnd'?: string;
}
/**
 * 
 * @export
 * @interface FacilityRequestInVo
 */
export interface FacilityRequestInVo {
    /**
     * 시설코드
     * @type {string}
     * @memberof FacilityRequestInVo
     */
    'trngFcltDcd'?: string;
    /**
     * 시설장소유형코드
     * @type {string}
     * @memberof FacilityRequestInVo
     */
    'fcltPsiDcd'?: string;
    /**
     * 시설유형코드
     * @type {string}
     * @memberof FacilityRequestInVo
     */
    'fcltDtlKcd'?: string;
    /**
     * 사용자ID
     * @type {string}
     * @memberof FacilityRequestInVo
     */
    'userId'?: string;
    /**
     * 예약시작년월일
     * @type {string}
     * @memberof FacilityRequestInVo
     */
    'rsvtSttgTs'?: string;
    /**
     * 예약종료년월일
     * @type {string}
     * @memberof FacilityRequestInVo
     */
    'rsvtFnshTs'?: string;
    /**
     * 결제신청서번호
     * @type {number}
     * @memberof FacilityRequestInVo
     */
    'snctApfrNo'?: number;
    /**
     * 신청년월일
     * @type {string}
     * @memberof FacilityRequestInVo
     */
    'aplcYmd'?: string;
    /**
     * 일정명
     * @type {string}
     * @memberof FacilityRequestInVo
     */
    'schdNm'?: string;
    /**
     * 시설사용가능인원수
     * @type {number}
     * @memberof FacilityRequestInVo
     */
    'fcltUseNmprCnt'?: number;
    /**
     * 사무실전화번호
     * @type {string}
     * @memberof FacilityRequestInVo
     */
    'ofcTpn'?: string;
    /**
     * 휴대폰번호
     * @type {string}
     * @memberof FacilityRequestInVo
     */
    'cpn'?: string;
    /**
     * 비고
     * @type {string}
     * @memberof FacilityRequestInVo
     */
    'rmrkCon'?: string;
    /**
     * 동의여부
     * @type {string}
     * @memberof FacilityRequestInVo
     */
    'cosnYn'?: string;
    /**
     * 승인여부
     * @type {string}
     * @memberof FacilityRequestInVo
     */
    'athzYn'?: string;
    /**
     * 사용 여부
     * @type {string}
     * @memberof FacilityRequestInVo
     */
    'useYn'?: string;
    /**
     * 예약시간
     * @type {Array<string>}
     * @memberof FacilityRequestInVo
     */
    'mergedTimes'?: Array<string>;
}
/**
 * 
 * @export
 * @interface FacilityRequestOutVo
 */
export interface FacilityRequestOutVo {
    /**
     * 
     * @type {string}
     * @memberof FacilityRequestOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof FacilityRequestOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof FacilityRequestOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof FacilityRequestOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof FacilityRequestOutVo
     */
    'cncrName'?: string;
    /**
     * 시설코드
     * @type {string}
     * @memberof FacilityRequestOutVo
     */
    'trngFcltDcd'?: string;
    /**
     * 시설코드명
     * @type {string}
     * @memberof FacilityRequestOutVo
     */
    'fcltCdNm'?: string;
    /**
     * 시설장소유형코드
     * @type {string}
     * @memberof FacilityRequestOutVo
     */
    'fcltPsiDcd'?: string;
    /**
     * 시설장소유형코드명
     * @type {string}
     * @memberof FacilityRequestOutVo
     */
    'fcltPlacTcdNm'?: string;
    /**
     * 시설유형코드
     * @type {string}
     * @memberof FacilityRequestOutVo
     */
    'fcltDtlKcd'?: string;
    /**
     * 시설유형코드명
     * @type {string}
     * @memberof FacilityRequestOutVo
     */
    'fcltDtlKcdNm'?: string;
    /**
     * 사용자ID
     * @type {string}
     * @memberof FacilityRequestOutVo
     */
    'userId'?: string;
    /**
     * 사용자이름
     * @type {string}
     * @memberof FacilityRequestOutVo
     */
    'userNm'?: string;
    /**
     * 예약시작년월일
     * @type {string}
     * @memberof FacilityRequestOutVo
     */
    'rsvtSttgTs'?: string;
    /**
     * 예약종료년월일
     * @type {string}
     * @memberof FacilityRequestOutVo
     */
    'rsvtFnshTs'?: string;
    /**
     * 결제신청서번호
     * @type {number}
     * @memberof FacilityRequestOutVo
     */
    'snctApfrNo'?: number;
    /**
     * 신청년월일
     * @type {string}
     * @memberof FacilityRequestOutVo
     */
    'aplcYmd'?: string;
    /**
     * 일정명
     * @type {string}
     * @memberof FacilityRequestOutVo
     */
    'schdNm'?: string;
    /**
     * 시설사용가능인원수
     * @type {number}
     * @memberof FacilityRequestOutVo
     */
    'fcltUseNmprCnt'?: number;
    /**
     * 사무실전화번호
     * @type {string}
     * @memberof FacilityRequestOutVo
     */
    'ofcTpn'?: string;
    /**
     * 휴대폰번호
     * @type {string}
     * @memberof FacilityRequestOutVo
     */
    'cpn'?: string;
    /**
     * 비고
     * @type {string}
     * @memberof FacilityRequestOutVo
     */
    'rmrkCon'?: string;
    /**
     * 동의여부
     * @type {string}
     * @memberof FacilityRequestOutVo
     */
    'cosnYn'?: string;
    /**
     * 승인여부
     * @type {string}
     * @memberof FacilityRequestOutVo
     */
    'athzYn'?: string;
    /**
     * 승인자ID
     * @type {string}
     * @memberof FacilityRequestOutVo
     */
    'aprrId'?: string;
    /**
     * 승인자이름
     * @type {string}
     * @memberof FacilityRequestOutVo
     */
    'aprrIdNm'?: string;
    /**
     * 승인일시
     * @type {string}
     * @memberof FacilityRequestOutVo
     */
    'athzTs'?: string;
    /**
     * 사용 여부
     * @type {string}
     * @memberof FacilityRequestOutVo
     */
    'useYn'?: string;
    /**
     * 켈린더 색상
     * @type {string}
     * @memberof FacilityRequestOutVo
     */
    'schdColrVl'?: string;
}
/**
 * 
 * @export
 * @interface FacilityRequestPageInqInVo
 */
export interface FacilityRequestPageInqInVo {
    /**
     * 페이지당출력건수
     * @type {number}
     * @memberof FacilityRequestPageInqInVo
     */
    'pageSize'?: number;
    /**
     * 페이지번호
     * @type {number}
     * @memberof FacilityRequestPageInqInVo
     */
    'pageNo'?: number;
    /**
     * 시설코드
     * @type {string}
     * @memberof FacilityRequestPageInqInVo
     */
    'trngFcltDcd'?: string;
    /**
     * 시설장소유형코드
     * @type {string}
     * @memberof FacilityRequestPageInqInVo
     */
    'fcltPsiDcd'?: string;
    /**
     * 승인 여부
     * @type {string}
     * @memberof FacilityRequestPageInqInVo
     */
    'athzYn'?: string;
    /**
     * 직원아이디
     * @type {string}
     * @memberof FacilityRequestPageInqInVo
     */
    'userId'?: string;
    /**
     * 직원이름
     * @type {string}
     * @memberof FacilityRequestPageInqInVo
     */
    'userNm'?: string;
    /**
     * 예약시작날짜검색시작YYMMDD
     * @type {string}
     * @memberof FacilityRequestPageInqInVo
     */
    'rsvtSttgYmdStart'?: string;
    /**
     * 예약시작날짜검색종료YYMMDD
     * @type {string}
     * @memberof FacilityRequestPageInqInVo
     */
    'rsvtSttgYmdEnd'?: string;
    /**
     * 예약종료날짜검색시작YYMMDD
     * @type {string}
     * @memberof FacilityRequestPageInqInVo
     */
    'rsvtFnshYmdStart'?: string;
    /**
     * 예약종료날짜검색종료YYMMDD
     * @type {string}
     * @memberof FacilityRequestPageInqInVo
     */
    'rsvtFnshYmdEnd'?: string;
    /**
     * 신청일검색시작YYMMDD
     * @type {string}
     * @memberof FacilityRequestPageInqInVo
     */
    'aplcYmdStart'?: string;
    /**
     * 신청일검색종료YYMMDD
     * @type {string}
     * @memberof FacilityRequestPageInqInVo
     */
    'aplcYmdEnd'?: string;
    /**
     * 강의실 스튜디오
     * @type {string}
     * @memberof FacilityRequestPageInqInVo
     */
    'target'?: string;
}
/**
 * 
 * @export
 * @interface FaqCategoryInVo
 */
export interface FaqCategoryInVo {
    /**
     * 분류 아이디
     * @type {number}
     * @memberof FaqCategoryInVo
     */
    'ctgyId'?: number;
    /**
     * 분류명
     * @type {string}
     * @memberof FaqCategoryInVo
     */
    'ctgyNm'?: string;
    /**
     * 사용 여부
     * @type {string}
     * @memberof FaqCategoryInVo
     */
    'useYn'?: string;
}
/**
 * 
 * @export
 * @interface FaqCategoryOutVo
 */
export interface FaqCategoryOutVo {
    /**
     * 
     * @type {string}
     * @memberof FaqCategoryOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof FaqCategoryOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof FaqCategoryOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof FaqCategoryOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof FaqCategoryOutVo
     */
    'cncrName'?: string;
    /**
     * 분류 아이디
     * @type {number}
     * @memberof FaqCategoryOutVo
     */
    'ctgyId'?: number;
    /**
     * 분류명
     * @type {string}
     * @memberof FaqCategoryOutVo
     */
    'ctgyNm'?: string;
    /**
     * 사용 여부
     * @type {string}
     * @memberof FaqCategoryOutVo
     */
    'useYn'?: string;
}
/**
 * 
 * @export
 * @interface FaqOutVo
 */
export interface FaqOutVo {
    /**
     * 
     * @type {string}
     * @memberof FaqOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof FaqOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof FaqOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof FaqOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof FaqOutVo
     */
    'cncrName'?: string;
    /**
     * faq 아이디
     * @type {number}
     * @memberof FaqOutVo
     */
    'faqId'?: number;
    /**
     * 분류 아이디
     * @type {number}
     * @memberof FaqOutVo
     */
    'ctgyId'?: number;
    /**
     * 분류명
     * @type {string}
     * @memberof FaqOutVo
     */
    'ctgyNm'?: string;
    /**
     * faq 타이틀
     * @type {string}
     * @memberof FaqOutVo
     */
    'faqTtlNm'?: string;
    /**
     * faq 내용
     * @type {string}
     * @memberof FaqOutVo
     */
    'faqCon'?: string;
    /**
     * 사용 여부
     * @type {string}
     * @memberof FaqOutVo
     */
    'useYn'?: string;
    /**
     * 첨부파일 리스트
     * @type {Array<CommonAttachFileOutVo>}
     * @memberof FaqOutVo
     */
    'commonAttachFileOutList'?: Array<CommonAttachFileOutVo>;
}
/**
 * 
 * @export
 * @interface FaqPageInqInVo
 */
export interface FaqPageInqInVo {
    /**
     * 
     * @type {number}
     * @memberof FaqPageInqInVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof FaqPageInqInVo
     */
    'pageNo'?: number;
    /**
     * 분류 아이디
     * @type {number}
     * @memberof FaqPageInqInVo
     */
    'ctgyId'?: number;
    /**
     * 검색 텍스트
     * @type {string}
     * @memberof FaqPageInqInVo
     */
    'searchText'?: string;
}
/**
 * 
 * @export
 * @interface FileOutVo
 */
export interface FileOutVo {
    /**
     * 
     * @type {string}
     * @memberof FileOutVo
     */
    'originalFileName'?: string;
    /**
     * 
     * @type {string}
     * @memberof FileOutVo
     */
    'savedFileName'?: string;
    /**
     * 
     * @type {string}
     * @memberof FileOutVo
     */
    'savedFilePath'?: string;
    /**
     * 
     * @type {string}
     * @memberof FileOutVo
     */
    'resourceFilePath'?: string;
    /**
     * 
     * @type {string}
     * @memberof FileOutVo
     */
    'mimeType'?: string;
    /**
     * 
     * @type {number}
     * @memberof FileOutVo
     */
    'fileSize'?: number;
}
/**
 * 
 * @export
 * @interface FindPwdInVo
 */
export interface FindPwdInVo {
    /**
     * 회원 유형
     * @type {string}
     * @memberof FindPwdInVo
     */
    'userPtrnVl'?: string;
    /**
     * 직원 번호
     * @type {string}
     * @memberof FindPwdInVo
     */
    'userId'?: string;
    /**
     * 이름
     * @type {string}
     * @memberof FindPwdInVo
     */
    'userNm'?: string;
    /**
     * 생년월일
     * @type {string}
     * @memberof FindPwdInVo
     */
    'birtYmd'?: string;
    /**
     * 휴대폰 번호
     * @type {string}
     * @memberof FindPwdInVo
     */
    'cpn'?: string;
}
/**
 * 
 * @export
 * @interface HealthCheckOutVo
 */
export interface HealthCheckOutVo {
    /**
     * 
     * @type {string}
     * @memberof HealthCheckOutVo
     */
    'courseId'?: string;
    /**
     * 
     * @type {string}
     * @memberof HealthCheckOutVo
     */
    'courseName'?: string;
}
/**
 * 
 * @export
 * @interface IdiCostCardOutVo
 */
export interface IdiCostCardOutVo {
    /**
     * 
     * @type {string}
     * @memberof IdiCostCardOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiCostCardOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiCostCardOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiCostCardOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiCostCardOutVo
     */
    'cncrName'?: string;
    /**
     * 사원번호
     * @type {string}
     * @memberof IdiCostCardOutVo
     */
    'emplNo'?: string;
    /**
     * 승인년월일
     * @type {string}
     * @memberof IdiCostCardOutVo
     */
    'athzYmd'?: string;
    /**
     * 암호화카드번호1
     * @type {string}
     * @memberof IdiCostCardOutVo
     */
    'encpCardNo1'?: string;
    /**
     * 암호화카드번호2
     * @type {string}
     * @memberof IdiCostCardOutVo
     */
    'encpCardNo2'?: string;
    /**
     * 암호화카드번호3
     * @type {string}
     * @memberof IdiCostCardOutVo
     */
    'encpCardNo3'?: string;
    /**
     * 암호화카드번호5
     * @type {string}
     * @memberof IdiCostCardOutVo
     */
    'encpCardNo4'?: string;
    /**
     * 카드승인번호
     * @type {string}
     * @memberof IdiCostCardOutVo
     */
    'cardApn'?: string;
    /**
     * 결재금액
     * @type {number}
     * @memberof IdiCostCardOutVo
     */
    'stlmAmt'?: number;
    /**
     * 가맹점명
     * @type {string}
     * @memberof IdiCostCardOutVo
     */
    'afstNm'?: string;
}
/**
 * 
 * @export
 * @interface IdiCostCardPageInVo
 */
export interface IdiCostCardPageInVo {
    /**
     * 페이지당출력건수
     * @type {number}
     * @memberof IdiCostCardPageInVo
     */
    'pageSize'?: number;
    /**
     * 페이지번호
     * @type {number}
     * @memberof IdiCostCardPageInVo
     */
    'pageNo'?: number;
    /**
     * 승인년월일
     * @type {string}
     * @memberof IdiCostCardPageInVo
     */
    'athzYmd'?: string;
    /**
     * 직원번호
     * @type {string}
     * @memberof IdiCostCardPageInVo
     */
    'emplNo'?: string;
}
/**
 * 첨부파일 삭제 리스트
 * @export
 * @interface IdiEduCostAttachFileDeleteInVo
 */
export interface IdiEduCostAttachFileDeleteInVo {
    /**
     * 순서
     * @type {number}
     * @memberof IdiEduCostAttachFileDeleteInVo
     */
    'sqc'?: number;
    /**
     * 첨부파일순번
     * @type {number}
     * @memberof IdiEduCostAttachFileDeleteInVo
     */
    'atchSqn'?: number;
}
/**
 * 첨부파일 리스트
 * @export
 * @interface IdiEduCostAttachFileOutVo
 */
export interface IdiEduCostAttachFileOutVo {
    /**
     * 
     * @type {string}
     * @memberof IdiEduCostAttachFileOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiEduCostAttachFileOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiEduCostAttachFileOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiEduCostAttachFileOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiEduCostAttachFileOutVo
     */
    'cncrName'?: string;
    /**
     * 사용자아이디
     * @type {string}
     * @memberof IdiEduCostAttachFileOutVo
     */
    'userId'?: string;
    /**
     * 사번
     * @type {string}
     * @memberof IdiEduCostAttachFileOutVo
     */
    'emplNo'?: string;
    /**
     * 지원금신청구분코드
     * @type {string}
     * @memberof IdiEduCostAttachFileOutVo
     */
    'spmyAplcDcd'?: string;
    /**
     * 자기개발지원신청구분코드
     * @type {string}
     * @memberof IdiEduCostAttachFileOutVo
     */
    'onslDvlpSprnAplcDcd'?: string;
    /**
     * 순서
     * @type {number}
     * @memberof IdiEduCostAttachFileOutVo
     */
    'sqc'?: number;
    /**
     * 첨부파일순번
     * @type {number}
     * @memberof IdiEduCostAttachFileOutVo
     */
    'atchSqn'?: number;
    /**
     * 원본파일명
     * @type {string}
     * @memberof IdiEduCostAttachFileOutVo
     */
    'orcpFileNm'?: string;
    /**
     * 저장파일명
     * @type {string}
     * @memberof IdiEduCostAttachFileOutVo
     */
    'strgFileNm'?: string;
    /**
     * 파일URL주소
     * @type {string}
     * @memberof IdiEduCostAttachFileOutVo
     */
    'fileUrlAdr'?: string;
    /**
     * 클라우드파일URL주소
     * @type {string}
     * @memberof IdiEduCostAttachFileOutVo
     */
    'cldFileUrlAdr'?: string;
    /**
     * 파일확장자명
     * @type {string}
     * @memberof IdiEduCostAttachFileOutVo
     */
    'fileEtnsNm'?: string;
    /**
     * 파일크기값
     * @type {string}
     * @memberof IdiEduCostAttachFileOutVo
     */
    'flszVl'?: string;
}
/**
 * 
 * @export
 * @interface IdiEduCostAuthListInVo
 */
export interface IdiEduCostAuthListInVo {
    /**
     * 년도
     * @type {string}
     * @memberof IdiEduCostAuthListInVo
     */
    'year'?: string;
}
/**
 * 
 * @export
 * @interface IdiEduCostAuthListOutVo
 */
export interface IdiEduCostAuthListOutVo {
    /**
     * 
     * @type {string}
     * @memberof IdiEduCostAuthListOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiEduCostAuthListOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiEduCostAuthListOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiEduCostAuthListOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiEduCostAuthListOutVo
     */
    'cncrName'?: string;
    /**
     * 순번
     * @type {number}
     * @memberof IdiEduCostAuthListOutVo
     */
    'sqc'?: number;
    /**
     * 사용자아이디
     * @type {string}
     * @memberof IdiEduCostAuthListOutVo
     */
    'userId'?: string;
    /**
     * 사번
     * @type {string}
     * @memberof IdiEduCostAuthListOutVo
     */
    'emplNo'?: string;
    /**
     * 지원금신청구분코드
     * @type {string}
     * @memberof IdiEduCostAuthListOutVo
     */
    'spmyAplcDcd'?: string;
    /**
     * 분야
     * @type {string}
     * @memberof IdiEduCostAuthListOutVo
     */
    'onslDvlpSprnAplcDcd'?: string;
    /**
     * 연수명
     * @type {string}
     * @memberof IdiEduCostAuthListOutVo
     */
    'edctProcNm'?: string;
    /**
     * 교육기관
     * @type {string}
     * @memberof IdiEduCostAuthListOutVo
     */
    'edinNm'?: string;
    /**
     * 수강시작일
     * @type {string}
     * @memberof IdiEduCostAuthListOutVo
     */
    'lcteSttgYmd'?: string;
    /**
     * 수강종료일
     * @type {string}
     * @memberof IdiEduCostAuthListOutVo
     */
    'lcteFnshYmd'?: string;
    /**
     * 학원비(수강료)
     * @type {number}
     * @memberof IdiEduCostAuthListOutVo
     */
    'trngAtlcAmt'?: number;
    /**
     * 지원예정급액
     * @type {number}
     * @memberof IdiEduCostAuthListOutVo
     */
    'pamtAmt'?: number;
    /**
     * 지원금신청년월일
     * @type {string}
     * @memberof IdiEduCostAuthListOutVo
     */
    'spmyAplcYmd'?: string;
    /**
     * 지급합산금액
     * @type {number}
     * @memberof IdiEduCostAuthListOutVo
     */
    'pamtAmtSum'?: number;
    /**
     * 어학지급합산금액
     * @type {number}
     * @memberof IdiEduCostAuthListOutVo
     */
    'languagePamtAmtSum'?: number;
}
/**
 * 
 * @export
 * @interface IdiEduCostDtlInVo
 */
export interface IdiEduCostDtlInVo {
    /**
     * 순번
     * @type {number}
     * @memberof IdiEduCostDtlInVo
     */
    'sqc'?: number;
    /**
     * 지원금신청구분코드
     * @type {string}
     * @memberof IdiEduCostDtlInVo
     */
    'spmyAplcDcd'?: string;
}
/**
 * 
 * @export
 * @interface IdiEduCostInVo
 */
export interface IdiEduCostInVo {
    /**
     * 순번
     * @type {number}
     * @memberof IdiEduCostInVo
     */
    'sqc'?: number;
    /**
     * 수강방법
     * @type {string}
     * @memberof IdiEduCostInVo
     */
    'edctMthdDsncVl'?: string;
    /**
     * 지원금신청구분코드
     * @type {string}
     * @memberof IdiEduCostInVo
     */
    'spmyAplcDcd'?: string;
    /**
     * 자기개발지원신청구분코드
     * @type {string}
     * @memberof IdiEduCostInVo
     */
    'onslDvlpSprnAplcDcd'?: string;
    /**
     * 교육기관명
     * @type {string}
     * @memberof IdiEduCostInVo
     */
    'edinNm'?: string;
    /**
     * 연수명
     * @type {string}
     * @memberof IdiEduCostInVo
     */
    'edctProcNm'?: string;
    /**
     * 수강시작일
     * @type {string}
     * @memberof IdiEduCostInVo
     */
    'lcteSttgYmd'?: string;
    /**
     * 수강종료일
     * @type {string}
     * @memberof IdiEduCostInVo
     */
    'lcteFnshYmd'?: string;
    /**
     * 신청년월일
     * @type {string}
     * @memberof IdiEduCostInVo
     */
    'spmyAplcYmd'?: string;
    /**
     * 학원비(수강료)
     * @type {number}
     * @memberof IdiEduCostInVo
     */
    'trngAtlcAmt'?: number;
    /**
     * 카드승인번호
     * @type {string}
     * @memberof IdiEduCostInVo
     */
    'cardApn'?: string;
    /**
     * 신용카드승인년월일
     * @type {string}
     * @memberof IdiEduCostInVo
     */
    'crdAthzYmd'?: string;
    /**
     * 암호화카드번호
     * @type {string}
     * @memberof IdiEduCostInVo
     */
    'encpCardNo'?: string;
    /**
     * 암호화카드번호1
     * @type {string}
     * @memberof IdiEduCostInVo
     */
    'encpCardNo1'?: string;
    /**
     * 암호화카드번호2
     * @type {string}
     * @memberof IdiEduCostInVo
     */
    'encpCardNo2'?: string;
    /**
     * 암호화카드번호3
     * @type {string}
     * @memberof IdiEduCostInVo
     */
    'encpCardNo3'?: string;
    /**
     * 암호화카드번호4
     * @type {string}
     * @memberof IdiEduCostInVo
     */
    'encpCardNo4'?: string;
    /**
     * 신청상태코드
     * @type {string}
     * @memberof IdiEduCostInVo
     */
    'trngAplcScd'?: string;
    /**
     * 첨부파일 삭제 리스트
     * @type {Array<IdiEduCostAttachFileDeleteInVo>}
     * @memberof IdiEduCostInVo
     */
    'fileDeleteInVoList'?: Array<IdiEduCostAttachFileDeleteInVo>;
}
/**
 * 
 * @export
 * @interface IdiEduCostOutVo
 */
export interface IdiEduCostOutVo {
    /**
     * 
     * @type {string}
     * @memberof IdiEduCostOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiEduCostOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiEduCostOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiEduCostOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiEduCostOutVo
     */
    'cncrName'?: string;
    /**
     * 순번
     * @type {number}
     * @memberof IdiEduCostOutVo
     */
    'sqc'?: number;
    /**
     * 사용자아이디
     * @type {string}
     * @memberof IdiEduCostOutVo
     */
    'userId'?: string;
    /**
     * 사번
     * @type {string}
     * @memberof IdiEduCostOutVo
     */
    'emplNo'?: string;
    /**
     * 사용자이름
     * @type {string}
     * @memberof IdiEduCostOutVo
     */
    'userNm'?: string;
    /**
     * 사용자이름
     * @type {string}
     * @memberof IdiEduCostOutVo
     */
    'edinNm'?: string;
    /**
     * 지원금신청구분코드
     * @type {string}
     * @memberof IdiEduCostOutVo
     */
    'spmyAplcDcd'?: string;
    /**
     * 분야
     * @type {string}
     * @memberof IdiEduCostOutVo
     */
    'onslDvlpSprnAplcDcd'?: string;
    /**
     * 지역구분
     * @type {string}
     * @memberof IdiEduCostOutVo
     */
    'brncPtrnNm'?: string;
    /**
     * 본부
     * @type {string}
     * @memberof IdiEduCostOutVo
     */
    'blngHdqrDsncNm'?: string;
    /**
     * 부서
     * @type {string}
     * @memberof IdiEduCostOutVo
     */
    'deptDsncNm'?: string;
    /**
     * 직급
     * @type {string}
     * @memberof IdiEduCostOutVo
     */
    'jbclCdNm'?: string;
    /**
     * 직책
     * @type {string}
     * @memberof IdiEduCostOutVo
     */
    'rsptDsncNm'?: string;
    /**
     * 승인여부
     * @type {string}
     * @memberof IdiEduCostOutVo
     */
    'trngAplcScd'?: string;
    /**
     * 반려사유
     * @type {string}
     * @memberof IdiEduCostOutVo
     */
    'rtrcRcd'?: string;
    /**
     * 수강방법
     * @type {string}
     * @memberof IdiEduCostOutVo
     */
    'edctMthdDsncVl'?: string;
    /**
     * 교육분야
     * @type {string}
     * @memberof IdiEduCostOutVo
     */
    'onslDvlpSprnAplcDcdNm'?: string;
    /**
     * 연수명
     * @type {string}
     * @memberof IdiEduCostOutVo
     */
    'edctProcNm'?: string;
    /**
     * 수강시작일
     * @type {string}
     * @memberof IdiEduCostOutVo
     */
    'lcteSttgYmd'?: string;
    /**
     * 수강종료일
     * @type {string}
     * @memberof IdiEduCostOutVo
     */
    'lcteFnshYmd'?: string;
    /**
     * 지원금신청년월일
     * @type {string}
     * @memberof IdiEduCostOutVo
     */
    'spmyAplcYmd'?: string;
    /**
     * 학원비(수강료)
     * @type {number}
     * @memberof IdiEduCostOutVo
     */
    'trngAtlcAmt'?: number;
    /**
     * 지원예정급액
     * @type {number}
     * @memberof IdiEduCostOutVo
     */
    'pamtAmt'?: number;
    /**
     * 암호화카드번호
     * @type {string}
     * @memberof IdiEduCostOutVo
     */
    'encpCardNo'?: string;
    /**
     * 암호화카드번호1
     * @type {string}
     * @memberof IdiEduCostOutVo
     */
    'encpCardNo1'?: string;
    /**
     * 암호화카드번호2
     * @type {string}
     * @memberof IdiEduCostOutVo
     */
    'encpCardNo2'?: string;
    /**
     * 암호화카드번호3
     * @type {string}
     * @memberof IdiEduCostOutVo
     */
    'encpCardNo3'?: string;
    /**
     * 암호화카드번호5
     * @type {string}
     * @memberof IdiEduCostOutVo
     */
    'encpCardNo4'?: string;
    /**
     * 카드승인번호
     * @type {string}
     * @memberof IdiEduCostOutVo
     */
    'cardApn'?: string;
    /**
     * 카드승인일
     * @type {string}
     * @memberof IdiEduCostOutVo
     */
    'crdAthzYmd'?: string;
    /**
     * 지급여부
     * @type {string}
     * @memberof IdiEduCostOutVo
     */
    'spmyPamtYn'?: string;
    /**
     * 지급일
     * @type {string}
     * @memberof IdiEduCostOutVo
     */
    'spmyPamtYmd'?: string;
    /**
     * 첨부파일 리스트
     * @type {Array<IdiEduCostAttachFileOutVo>}
     * @memberof IdiEduCostOutVo
     */
    'attachFileList'?: Array<IdiEduCostAttachFileOutVo>;
}
/**
 * 
 * @export
 * @interface IdiEduCostStatisticInVo
 */
export interface IdiEduCostStatisticInVo {
    /**
     * 일반/시니어
     * @type {string}
     * @memberof IdiEduCostStatisticInVo
     */
    'lrngSptgDcd'?: string;
}
/**
 * 
 * @export
 * @interface IdiEduCostStatisticListOutVo
 */
export interface IdiEduCostStatisticListOutVo {
    /**
     * 
     * @type {string}
     * @memberof IdiEduCostStatisticListOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiEduCostStatisticListOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiEduCostStatisticListOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiEduCostStatisticListOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiEduCostStatisticListOutVo
     */
    'cncrName'?: string;
    /**
     * 한도번호
     * @type {number}
     * @memberof IdiEduCostStatisticListOutVo
     */
    'dataRgsnId'?: number;
    /**
     * 일반/시니어구분
     * @type {string}
     * @memberof IdiEduCostStatisticListOutVo
     */
    'lrngSptgDcd'?: string;
    /**
     * 기간구분명
     * @type {string}
     * @memberof IdiEduCostStatisticListOutVo
     */
    'trmCon'?: string;
    /**
     * 기간한도
     * @type {number}
     * @memberof IdiEduCostStatisticListOutVo
     */
    'trmLmtVl'?: number;
    /**
     * 사용금액
     * @type {number}
     * @memberof IdiEduCostStatisticListOutVo
     */
    'pamtSum'?: number;
    /**
     * 잔액
     * @type {number}
     * @memberof IdiEduCostStatisticListOutVo
     */
    'pamtSumBal'?: number;
}
/**
 * 
 * @export
 * @interface IdiEduCostUserInfoOutVo
 */
export interface IdiEduCostUserInfoOutVo {
    /**
     * 
     * @type {string}
     * @memberof IdiEduCostUserInfoOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiEduCostUserInfoOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiEduCostUserInfoOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiEduCostUserInfoOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiEduCostUserInfoOutVo
     */
    'cncrName'?: string;
    /**
     * 시니어변경일
     * @type {string}
     * @memberof IdiEduCostUserInfoOutVo
     */
    'crrRsptOfodYmd'?: string;
    /**
     * 시니어연차
     * @type {string}
     * @memberof IdiEduCostUserInfoOutVo
     */
    'yearsElapsed'?: string;
}
/**
 * 첨부파일 삭제 리스트
 * @export
 * @interface IdiExamCostAttachFileDeleteInVo
 */
export interface IdiExamCostAttachFileDeleteInVo {
    /**
     * 순서
     * @type {number}
     * @memberof IdiExamCostAttachFileDeleteInVo
     */
    'sqc'?: number;
    /**
     * 첨부파일순번
     * @type {number}
     * @memberof IdiExamCostAttachFileDeleteInVo
     */
    'atchSqn'?: number;
}
/**
 * 첨부파일 리스트
 * @export
 * @interface IdiExamCostAttachFileOutVo
 */
export interface IdiExamCostAttachFileOutVo {
    /**
     * 
     * @type {string}
     * @memberof IdiExamCostAttachFileOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiExamCostAttachFileOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiExamCostAttachFileOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiExamCostAttachFileOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiExamCostAttachFileOutVo
     */
    'cncrName'?: string;
    /**
     * 사용자아이디
     * @type {string}
     * @memberof IdiExamCostAttachFileOutVo
     */
    'userId'?: string;
    /**
     * 사번
     * @type {string}
     * @memberof IdiExamCostAttachFileOutVo
     */
    'emplNo'?: string;
    /**
     * 자기개발지원신청구분코드
     * @type {string}
     * @memberof IdiExamCostAttachFileOutVo
     */
    'onslDvlpSprnAplcDcd'?: string;
    /**
     * 순서
     * @type {number}
     * @memberof IdiExamCostAttachFileOutVo
     */
    'sqc'?: number;
    /**
     * 첨부파일순번
     * @type {number}
     * @memberof IdiExamCostAttachFileOutVo
     */
    'atchSqn'?: number;
    /**
     * 원본파일명
     * @type {string}
     * @memberof IdiExamCostAttachFileOutVo
     */
    'orcpFileNm'?: string;
    /**
     * 저장파일명
     * @type {string}
     * @memberof IdiExamCostAttachFileOutVo
     */
    'strgFileNm'?: string;
    /**
     * 파일URL주소
     * @type {string}
     * @memberof IdiExamCostAttachFileOutVo
     */
    'fileUrlAdr'?: string;
    /**
     * 클라우드파일URL주소
     * @type {string}
     * @memberof IdiExamCostAttachFileOutVo
     */
    'cldFileUrlAdr'?: string;
    /**
     * 파일확장자명
     * @type {string}
     * @memberof IdiExamCostAttachFileOutVo
     */
    'fileEtnsNm'?: string;
    /**
     * 파일크기값
     * @type {string}
     * @memberof IdiExamCostAttachFileOutVo
     */
    'flszVl'?: string;
}
/**
 * 
 * @export
 * @interface IdiExamCostAuthListInVo
 */
export interface IdiExamCostAuthListInVo {
    /**
     * 년도
     * @type {string}
     * @memberof IdiExamCostAuthListInVo
     */
    'year'?: string;
}
/**
 * 
 * @export
 * @interface IdiExamCostAuthListOutVo
 */
export interface IdiExamCostAuthListOutVo {
    /**
     * 
     * @type {string}
     * @memberof IdiExamCostAuthListOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiExamCostAuthListOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiExamCostAuthListOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiExamCostAuthListOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiExamCostAuthListOutVo
     */
    'cncrName'?: string;
    /**
     * 사용자아이디
     * @type {string}
     * @memberof IdiExamCostAuthListOutVo
     */
    'userId'?: string;
    /**
     * 사번
     * @type {string}
     * @memberof IdiExamCostAuthListOutVo
     */
    'emplNo'?: string;
    /**
     * 분야
     * @type {string}
     * @memberof IdiExamCostAuthListOutVo
     */
    'onslDvlpSprnAplcDcd'?: string;
    /**
     * 분야명
     * @type {string}
     * @memberof IdiExamCostAuthListOutVo
     */
    'onslDvlpSprnAplcDcdNm'?: string;
    /**
     * 순서
     * @type {number}
     * @memberof IdiExamCostAuthListOutVo
     */
    'sqc'?: number;
    /**
     * 자격증명
     * @type {string}
     * @memberof IdiExamCostAuthListOutVo
     */
    'qlcrNm'?: string;
    /**
     * 카드승인금액
     * @type {number}
     * @memberof IdiExamCostAuthListOutVo
     */
    'crahAmt'?: number;
    /**
     * 지원신청금액
     * @type {number}
     * @memberof IdiExamCostAuthListOutVo
     */
    'sprnAplcAmt'?: number;
    /**
     * 취득일자
     * @type {string}
     * @memberof IdiExamCostAuthListOutVo
     */
    'qlacYmd'?: string;
    /**
     * 신청일
     * @type {string}
     * @memberof IdiExamCostAuthListOutVo
     */
    'spmyAplcYmd'?: string;
    /**
     * 지급합산금액
     * @type {number}
     * @memberof IdiExamCostAuthListOutVo
     */
    'pamtAmtSum'?: number;
}
/**
 * 
 * @export
 * @interface IdiExamCostDtlInVo
 */
export interface IdiExamCostDtlInVo {
    /**
     * 순서
     * @type {number}
     * @memberof IdiExamCostDtlInVo
     */
    'sqc'?: number;
}
/**
 * 
 * @export
 * @interface IdiExamCostInVo
 */
export interface IdiExamCostInVo {
    /**
     * 사원번호
     * @type {string}
     * @memberof IdiExamCostInVo
     */
    'emplNo'?: string;
    /**
     * 자기개발지원신청구분코드
     * @type {string}
     * @memberof IdiExamCostInVo
     */
    'onslDvlpSprnAplcDcd'?: string;
    /**
     * 순서
     * @type {number}
     * @memberof IdiExamCostInVo
     */
    'sqc'?: number;
    /**
     * 자격증구분값
     * @type {string}
     * @memberof IdiExamCostInVo
     */
    'qlcrDsncVl'?: string;
    /**
     * 자격취득년월일
     * @type {string}
     * @memberof IdiExamCostInVo
     */
    'qlacYmd'?: string;
    /**
     * 학습지원대상구분코드
     * @type {string}
     * @memberof IdiExamCostInVo
     */
    'lrngSptgDcd'?: string;
    /**
     * 자격증명
     * @type {string}
     * @memberof IdiExamCostInVo
     */
    'qlcrNm'?: string;
    /**
     * 신용카드승인년월일
     * @type {string}
     * @memberof IdiExamCostInVo
     */
    'crdAthzYmd'?: string;
    /**
     * 암호화카드번호
     * @type {string}
     * @memberof IdiExamCostInVo
     */
    'encpCardNo'?: string;
    /**
     * 신용카드승인번호
     * @type {string}
     * @memberof IdiExamCostInVo
     */
    'crdApn'?: string;
    /**
     * 카드승인금액
     * @type {number}
     * @memberof IdiExamCostInVo
     */
    'crahAmt'?: number;
    /**
     * 암호화카드번호1
     * @type {string}
     * @memberof IdiExamCostInVo
     */
    'encpCardNo1'?: string;
    /**
     * 암호화카드번호2
     * @type {string}
     * @memberof IdiExamCostInVo
     */
    'encpCardNo2'?: string;
    /**
     * 암호화카드번호3
     * @type {string}
     * @memberof IdiExamCostInVo
     */
    'encpCardNo3'?: string;
    /**
     * 암호화카드번호4
     * @type {string}
     * @memberof IdiExamCostInVo
     */
    'encpCardNo4'?: string;
    /**
     * 승인여부
     * @type {string}
     * @memberof IdiExamCostInVo
     */
    'examAaeSprnScd'?: string;
    /**
     * 첨부파일 삭제 리스트
     * @type {Array<IdiExamCostAttachFileDeleteInVo>}
     * @memberof IdiExamCostInVo
     */
    'fileDeleteInVoList'?: Array<IdiExamCostAttachFileDeleteInVo>;
    /**
     * 
     * @type {Array<CommonAttachFilehInVo>}
     * @memberof IdiExamCostInVo
     */
    'atchList'?: Array<CommonAttachFilehInVo>;
}
/**
 * 
 * @export
 * @interface IdiExamCostOutVo
 */
export interface IdiExamCostOutVo {
    /**
     * 
     * @type {string}
     * @memberof IdiExamCostOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiExamCostOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiExamCostOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiExamCostOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiExamCostOutVo
     */
    'cncrName'?: string;
    /**
     * 사용자아이디
     * @type {string}
     * @memberof IdiExamCostOutVo
     */
    'userId'?: string;
    /**
     * 사번
     * @type {string}
     * @memberof IdiExamCostOutVo
     */
    'emplNo'?: string;
    /**
     * 분야
     * @type {string}
     * @memberof IdiExamCostOutVo
     */
    'onslDvlpSprnAplcDcd'?: string;
    /**
     * 순서
     * @type {number}
     * @memberof IdiExamCostOutVo
     */
    'sqc'?: number;
    /**
     * 자격증구분값
     * @type {string}
     * @memberof IdiExamCostOutVo
     */
    'qlcrDsncVl'?: string;
    /**
     * 자격증등급명
     * @type {string}
     * @memberof IdiExamCostOutVo
     */
    'qlcrGdcdNm'?: string;
    /**
     * 취득일자
     * @type {string}
     * @memberof IdiExamCostOutVo
     */
    'qlacYmd'?: string;
    /**
     * 신청일
     * @type {string}
     * @memberof IdiExamCostOutVo
     */
    'spmyAplcYmd'?: string;
    /**
     * 학습지원대상구분코드
     * @type {string}
     * @memberof IdiExamCostOutVo
     */
    'lrngSptgDcd'?: string;
    /**
     * 자격증명
     * @type {string}
     * @memberof IdiExamCostOutVo
     */
    'qlcrNm'?: string;
    /**
     * 카드승인일
     * @type {string}
     * @memberof IdiExamCostOutVo
     */
    'crdAthzYmd'?: string;
    /**
     * 카드승인번호
     * @type {string}
     * @memberof IdiExamCostOutVo
     */
    'crdApn'?: string;
    /**
     * 카드승인금액
     * @type {number}
     * @memberof IdiExamCostOutVo
     */
    'crahAmt'?: number;
    /**
     * 지원신청금액
     * @type {number}
     * @memberof IdiExamCostOutVo
     */
    'sprnAplcAmt'?: number;
    /**
     * 손해보험금액
     * @type {number}
     * @memberof IdiExamCostOutVo
     */
    'prinAmt'?: number;
    /**
     * 생명보험금액
     * @type {number}
     * @memberof IdiExamCostOutVo
     */
    'lfinAmt'?: number;
    /**
     * 보험금액
     * @type {number}
     * @memberof IdiExamCostOutVo
     */
    'insnAmt'?: number;
    /**
     * 펀드금액
     * @type {number}
     * @memberof IdiExamCostOutVo
     */
    'fundAmt'?: number;
    /**
     * 지급여부
     * @type {string}
     * @memberof IdiExamCostOutVo
     */
    'spmyPamtYn'?: string;
    /**
     * 지급일
     * @type {string}
     * @memberof IdiExamCostOutVo
     */
    'spmyPamtYmd'?: string;
    /**
     * 암호화카드번호1
     * @type {string}
     * @memberof IdiExamCostOutVo
     */
    'encpCardNo1'?: string;
    /**
     * 암호화카드번호2
     * @type {string}
     * @memberof IdiExamCostOutVo
     */
    'encpCardNo2'?: string;
    /**
     * 암호화카드번호3
     * @type {string}
     * @memberof IdiExamCostOutVo
     */
    'encpCardNo3'?: string;
    /**
     * 암호화카드번호4
     * @type {string}
     * @memberof IdiExamCostOutVo
     */
    'encpCardNo4'?: string;
    /**
     * 복지비승인상태내용
     * @type {string}
     * @memberof IdiExamCostOutVo
     */
    'wlcsAtstCon'?: string;
    /**
     * 승인상태코드
     * @type {string}
     * @memberof IdiExamCostOutVo
     */
    'examAaeSprnScd'?: string;
    /**
     * 반려사유코드
     * @type {string}
     * @memberof IdiExamCostOutVo
     */
    'rtrcRcd'?: string;
    /**
     * 반려사유내용
     * @type {string}
     * @memberof IdiExamCostOutVo
     */
    'rtreCon'?: string;
    /**
     * 첨부파일 리스트
     * @type {Array<IdiExamCostAttachFileOutVo>}
     * @memberof IdiExamCostOutVo
     */
    'attachFileList'?: Array<IdiExamCostAttachFileOutVo>;
}
/**
 * 
 * @export
 * @interface IdiLicenseCourseOutVo
 */
export interface IdiLicenseCourseOutVo {
    /**
     * 
     * @type {string}
     * @memberof IdiLicenseCourseOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiLicenseCourseOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiLicenseCourseOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiLicenseCourseOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiLicenseCourseOutVo
     */
    'cncrName'?: string;
    /**
     * 연수코드
     * @type {string}
     * @memberof IdiLicenseCourseOutVo
     */
    'dutyEdctCd'?: string;
    /**
     * 연수명
     * @type {string}
     * @memberof IdiLicenseCourseOutVo
     */
    'dutyEdctNm'?: string;
    /**
     * 교육방식명
     * @type {string}
     * @memberof IdiLicenseCourseOutVo
     */
    'edctMthdTcdNm'?: string;
    /**
     * 교육분류
     * @type {string}
     * @memberof IdiLicenseCourseOutVo
     */
    'clsfNmLvl'?: string;
    /**
     * 사용여부
     * @type {string}
     * @memberof IdiLicenseCourseOutVo
     */
    'useYn'?: string;
}
/**
 * 
 * @export
 * @interface IdiLicenseCoursePageInVo
 */
export interface IdiLicenseCoursePageInVo {
    /**
     * 페이지당출력건수
     * @type {number}
     * @memberof IdiLicenseCoursePageInVo
     */
    'pageSize'?: number;
    /**
     * 페이지번호
     * @type {number}
     * @memberof IdiLicenseCoursePageInVo
     */
    'pageNo'?: number;
    /**
     * 자격증코드
     * @type {string}
     * @memberof IdiLicenseCoursePageInVo
     */
    'qlcrDsncVl'?: string;
    /**
     * 연수코드
     * @type {string}
     * @memberof IdiLicenseCoursePageInVo
     */
    'dutyEdctCd'?: string;
}
/**
 * 
 * @export
 * @interface IdiLicenseHistoryInVo
 */
export interface IdiLicenseHistoryInVo {
    /**
     * 대상자
     * @type {Array<string>}
     * @memberof IdiLicenseHistoryInVo
     */
    'userIdList'?: Array<string>;
    /**
     * 자격증코드
     * @type {Array<string>}
     * @memberof IdiLicenseHistoryInVo
     */
    'qlcrDsncVlList'?: Array<string>;
    /**
     * 자격증명
     * @type {string}
     * @memberof IdiLicenseHistoryInVo
     */
    'qlcrNm'?: string;
    /**
     * 취득시작일
     * @type {string}
     * @memberof IdiLicenseHistoryInVo
     */
    'acqtSttgTs'?: string;
    /**
     * 취득종료일
     * @type {string}
     * @memberof IdiLicenseHistoryInVo
     */
    'acqtFnshTs'?: string;
    /**
     * 페이지당출력건수
     * @type {number}
     * @memberof IdiLicenseHistoryInVo
     */
    'pageSize'?: number;
    /**
     * 페이지번호
     * @type {number}
     * @memberof IdiLicenseHistoryInVo
     */
    'pageNo'?: number;
}
/**
 * 
 * @export
 * @interface IdiLicenseHistoryOutVo
 */
export interface IdiLicenseHistoryOutVo {
    /**
     * 
     * @type {string}
     * @memberof IdiLicenseHistoryOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiLicenseHistoryOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiLicenseHistoryOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiLicenseHistoryOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiLicenseHistoryOutVo
     */
    'cncrName'?: string;
    /**
     * 자격증구분값
     * @type {string}
     * @memberof IdiLicenseHistoryOutVo
     */
    'qlcrDsncVl'?: string;
    /**
     * 자격증명
     * @type {string}
     * @memberof IdiLicenseHistoryOutVo
     */
    'qlcrNm'?: string;
    /**
     * 직원아이디
     * @type {string}
     * @memberof IdiLicenseHistoryOutVo
     */
    'userId'?: string;
    /**
     * 직원명
     * @type {string}
     * @memberof IdiLicenseHistoryOutVo
     */
    'userNm'?: string;
    /**
     * 직원번호
     * @type {string}
     * @memberof IdiLicenseHistoryOutVo
     */
    'emplNo'?: string;
    /**
     * 소속명
     * @type {string}
     * @memberof IdiLicenseHistoryOutVo
     */
    'deptDsncNm'?: string;
    /**
     * 직급명
     * @type {string}
     * @memberof IdiLicenseHistoryOutVo
     */
    'jbttDsncNm'?: string;
    /**
     * 직책명
     * @type {string}
     * @memberof IdiLicenseHistoryOutVo
     */
    'rsptDsncNm'?: string;
    /**
     * 등급명
     * @type {string}
     * @memberof IdiLicenseHistoryOutVo
     */
    'qlcrGdcdNm'?: string;
    /**
     * 연수보조금액
     * @type {number}
     * @memberof IdiLicenseHistoryOutVo
     */
    'trngAsstAmt'?: number;
    /**
     * 등록년월일
     * @type {string}
     * @memberof IdiLicenseHistoryOutVo
     */
    'rgsnYmd'?: string;
    /**
     * 취득년월일
     * @type {string}
     * @memberof IdiLicenseHistoryOutVo
     */
    'acqtYmd'?: string;
    /**
     * 자격면허유효년월일
     * @type {string}
     * @memberof IdiLicenseHistoryOutVo
     */
    'qlfcValdYmd'?: string;
    /**
     * 자격면허상실년월일
     * @type {string}
     * @memberof IdiLicenseHistoryOutVo
     */
    'qlfcLcnsLsrgYmd'?: string;
    /**
     * 마일리지발생점수
     * @type {number}
     * @memberof IdiLicenseHistoryOutVo
     */
    'mlgOcrnScr'?: number;
    /**
     * 사용여부
     * @type {string}
     * @memberof IdiLicenseHistoryOutVo
     */
    'useYn'?: string;
}
/**
 * 
 * @export
 * @interface IdiLicenseInterfaceOutVo
 */
export interface IdiLicenseInterfaceOutVo {
    /**
     * 
     * @type {string}
     * @memberof IdiLicenseInterfaceOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiLicenseInterfaceOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiLicenseInterfaceOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiLicenseInterfaceOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiLicenseInterfaceOutVo
     */
    'cncrName'?: string;
    /**
     * 인터페이스년월일
     * @type {string}
     * @memberof IdiLicenseInterfaceOutVo
     */
    'intfYmd'?: string;
    /**
     * 회사구분코드값
     * @type {string}
     * @memberof IdiLicenseInterfaceOutVo
     */
    'cmpnDcdVl'?: string;
    /**
     * 자격증코드
     * @type {string}
     * @memberof IdiLicenseInterfaceOutVo
     */
    'qlcrDsncVl'?: string;
    /**
     * 자격증명
     * @type {string}
     * @memberof IdiLicenseInterfaceOutVo
     */
    'qlcrNm'?: string;
    /**
     * 발급처명
     * @type {string}
     * @memberof IdiLicenseInterfaceOutVo
     */
    'ispcNm'?: string;
    /**
     * 적용된시퀀스
     * @type {number}
     * @memberof IdiLicenseInterfaceOutVo
     */
    'lnpSqc'?: number;
}
/**
 * 
 * @export
 * @interface IdiLicenseInterfacePageInVo
 */
export interface IdiLicenseInterfacePageInVo {
    /**
     * 페이지당출력건수
     * @type {number}
     * @memberof IdiLicenseInterfacePageInVo
     */
    'pageSize'?: number;
    /**
     * 페이지번호
     * @type {number}
     * @memberof IdiLicenseInterfacePageInVo
     */
    'pageNo'?: number;
    /**
     * 검색어
     * @type {string}
     * @memberof IdiLicenseInterfacePageInVo
     */
    'searchText'?: string;
}
/**
 * 
 * @export
 * @interface IdiLicenseOutVo
 */
export interface IdiLicenseOutVo {
    /**
     * 
     * @type {string}
     * @memberof IdiLicenseOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiLicenseOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiLicenseOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiLicenseOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiLicenseOutVo
     */
    'cncrName'?: string;
    /**
     * 자격증구분값
     * @type {string}
     * @memberof IdiLicenseOutVo
     */
    'qlcrDsncVl'?: string;
    /**
     * 자격증명
     * @type {string}
     * @memberof IdiLicenseOutVo
     */
    'qlcrNm'?: string;
    /**
     * 자격증약어명
     * @type {string}
     * @memberof IdiLicenseOutVo
     */
    'abbrNm'?: string;
    /**
     * 출력명
     * @type {string}
     * @memberof IdiLicenseOutVo
     */
    'otptNm'?: string;
    /**
     * 자격증등급코드
     * @type {string}
     * @memberof IdiLicenseOutVo
     */
    'qlcrGdcd'?: string;
    /**
     * 자격증등급코드명
     * @type {string}
     * @memberof IdiLicenseOutVo
     */
    'qlcrGdcdNm'?: string;
    /**
     * 평가자격등급
     * @type {string}
     * @memberof IdiLicenseOutVo
     */
    'prarQlcrGdcd'?: string;
    /**
     * 평가자격등급명
     * @type {string}
     * @memberof IdiLicenseOutVo
     */
    'prarQlcrGdcdNm'?: string;
    /**
     * 연수보조금액
     * @type {number}
     * @memberof IdiLicenseOutVo
     */
    'trngAsstAmt'?: number;
    /**
     * 마일리지발생점수
     * @type {number}
     * @memberof IdiLicenseOutVo
     */
    'mlgOcrnScr'?: number;
    /**
     * 노출여부
     * @type {string}
     * @memberof IdiLicenseOutVo
     */
    'useYn'?: string;
    /**
     * 적용시작일
     * @type {string}
     * @memberof IdiLicenseOutVo
     */
    'apsrYmd'?: string;
    /**
     * 적용종료일
     * @type {string}
     * @memberof IdiLicenseOutVo
     */
    'fnapYmd'?: string;
    /**
     * 비고
     * @type {string}
     * @memberof IdiLicenseOutVo
     */
    'rmrkCon'?: string;
}
/**
 * 
 * @export
 * @interface IdiLicensePageInVo
 */
export interface IdiLicensePageInVo {
    /**
     * 페이지당출력건수
     * @type {number}
     * @memberof IdiLicensePageInVo
     */
    'pageSize'?: number;
    /**
     * 페이지번호
     * @type {number}
     * @memberof IdiLicensePageInVo
     */
    'pageNo'?: number;
    /**
     * 자격증코드
     * @type {string}
     * @memberof IdiLicensePageInVo
     */
    'qlcrDsncVl'?: string;
    /**
     * 등급
     * @type {string}
     * @memberof IdiLicensePageInVo
     */
    'qlcrGdcd'?: string;
    /**
     * 종근평등급
     * @type {string}
     * @memberof IdiLicensePageInVo
     */
    'prarQlcrGdcd'?: string;
    /**
     * 자격증명
     * @type {string}
     * @memberof IdiLicensePageInVo
     */
    'qlcrNm'?: string;
    /**
     * 노출여부
     * @type {string}
     * @memberof IdiLicensePageInVo
     */
    'useYn'?: string;
    /**
     * 자격증코드
     * @type {Array<string>}
     * @memberof IdiLicensePageInVo
     */
    'qlcrDsncVlList'?: Array<string>;
}
/**
 * 
 * @export
 * @interface IdiLicenseSupplyOutVo
 */
export interface IdiLicenseSupplyOutVo {
    /**
     * 등록 일시
     * @type {string}
     * @memberof IdiLicenseSupplyOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiLicenseSupplyOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiLicenseSupplyOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiLicenseSupplyOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiLicenseSupplyOutVo
     */
    'cncrName'?: string;
    /**
     * 사용자 ID
     * @type {string}
     * @memberof IdiLicenseSupplyOutVo
     */
    'userId'?: string;
    /**
     * 사용자명
     * @type {string}
     * @memberof IdiLicenseSupplyOutVo
     */
    'userNm'?: string;
    /**
     * 자격증 구분 값
     * @type {string}
     * @memberof IdiLicenseSupplyOutVo
     */
    'qlcrDsncVl'?: string;
    /**
     * 자격증명
     * @type {string}
     * @memberof IdiLicenseSupplyOutVo
     */
    'qlcrNm'?: string;
    /**
     * 자격증 순번
     * @type {number}
     * @memberof IdiLicenseSupplyOutVo
     */
    'qlcrSqn'?: number;
    /**
     * 사원 번호
     * @type {string}
     * @memberof IdiLicenseSupplyOutVo
     */
    'emplNo'?: string;
    /**
     * 소속명
     * @type {string}
     * @memberof IdiLicenseSupplyOutVo
     */
    'deptDsncNm'?: string;
    /**
     * 직급명
     * @type {string}
     * @memberof IdiLicenseSupplyOutVo
     */
    'jbttDsncNm'?: string;
    /**
     * 직책명
     * @type {string}
     * @memberof IdiLicenseSupplyOutVo
     */
    'rsptDsncNm'?: string;
    /**
     * 신청 년월일
     * @type {string}
     * @memberof IdiLicenseSupplyOutVo
     */
    'aplcYmd'?: string;
    /**
     * 취득 년월일
     * @type {string}
     * @memberof IdiLicenseSupplyOutVo
     */
    'acqtYmd'?: string;
    /**
     * 보조 금액
     * @type {number}
     * @memberof IdiLicenseSupplyOutVo
     */
    'asstAmt'?: number;
    /**
     * 집합 연수 금액
     * @type {number}
     * @memberof IdiLicenseSupplyOutVo
     */
    'asmlTrngAmt'?: number;
    /**
     * 사이버 연수비 금액
     * @type {number}
     * @memberof IdiLicenseSupplyOutVo
     */
    'cybrTrngAmt'?: number;
    /**
     * 학자금 자동 계산 금액
     * @type {number}
     * @memberof IdiLicenseSupplyOutVo
     */
    'scexAtmtClclAmt'?: number;
    /**
     * 학자금 실제 지원 금액
     * @type {number}
     * @memberof IdiLicenseSupplyOutVo
     */
    'scexTrthSprnAmt'?: number;
    /**
     * 특이사항 내용
     * @type {string}
     * @memberof IdiLicenseSupplyOutVo
     */
    'pcsbCon'?: string;
    /**
     * 등록 년월일
     * @type {string}
     * @memberof IdiLicenseSupplyOutVo
     */
    'rgsnYmd'?: string;
    /**
     * 취득/취득갱신 구분 코드
     * @type {string}
     * @memberof IdiLicenseSupplyOutVo
     */
    'qlcrAcqtRnlDcd'?: string;
    /**
     * 취득/취득갱신 구분 코드명
     * @type {string}
     * @memberof IdiLicenseSupplyOutVo
     */
    'qlcrAcqtRnlDcdNm'?: string;
    /**
     * 지원금 지급 상태 코드
     * @type {string}
     * @memberof IdiLicenseSupplyOutVo
     */
    'spmyPamtScd'?: string;
    /**
     * 지원금 지급 상태 코드명
     * @type {string}
     * @memberof IdiLicenseSupplyOutVo
     */
    'spmyPamtScdNm'?: string;
    /**
     * 결재자 ID
     * @type {string}
     * @memberof IdiLicenseSupplyOutVo
     */
    'snpnId'?: string;
    /**
     * 결재 일시
     * @type {string}
     * @memberof IdiLicenseSupplyOutVo
     */
    'snctTs'?: string;
    /**
     * 사유 내용
     * @type {string}
     * @memberof IdiLicenseSupplyOutVo
     */
    'rtreCon'?: string;
    /**
     * 사용 여부
     * @type {string}
     * @memberof IdiLicenseSupplyOutVo
     */
    'useYn'?: string;
    /**
     * 학습시작일시
     * @type {string}
     * @memberof IdiLicenseSupplyOutVo
     */
    'lrngSttgTs'?: string;
    /**
     * 학습종료일시
     * @type {string}
     * @memberof IdiLicenseSupplyOutVo
     */
    'lrngFnshTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiLicenseSupplyOutVo
     */
    'edctMthdTcd'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiLicenseSupplyOutVo
     */
    'edctMthdTcdNm'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiLicenseSupplyOutVo
     */
    'dutyEdctNm'?: string;
    /**
     * 연수분류
     * @type {string}
     * @memberof IdiLicenseSupplyOutVo
     */
    'edctClsfNm'?: string;
    /**
     * 교육금액
     * @type {number}
     * @memberof IdiLicenseSupplyOutVo
     */
    'edexAmt'?: number;
}
/**
 * 
 * @export
 * @interface IdiLicenseSupplyPageInVo
 */
export interface IdiLicenseSupplyPageInVo {
    /**
     * 성명/아이디
     * @type {string}
     * @memberof IdiLicenseSupplyPageInVo
     */
    'userKeyword'?: string;
    /**
     * 직원번호
     * @type {string}
     * @memberof IdiLicenseSupplyPageInVo
     */
    'emplNo'?: string;
    /**
     * 자격증명/코드
     * @type {string}
     * @memberof IdiLicenseSupplyPageInVo
     */
    'qlcrKeyword'?: string;
    /**
     * 지원금지급상태
     * @type {string}
     * @memberof IdiLicenseSupplyPageInVo
     */
    'spmyPamtScd'?: string;
    /**
     * 등록일
     * @type {string}
     * @memberof IdiLicenseSupplyPageInVo
     */
    'cretSttgTs'?: string;
    /**
     * 등록일
     * @type {string}
     * @memberof IdiLicenseSupplyPageInVo
     */
    'cretFnshTs'?: string;
    /**
     * 아이디
     * @type {string}
     * @memberof IdiLicenseSupplyPageInVo
     */
    'userId'?: string;
    /**
     * 자격증구분값
     * @type {string}
     * @memberof IdiLicenseSupplyPageInVo
     */
    'qlcrDsncVl'?: string;
    /**
     * 페이지당출력건수
     * @type {number}
     * @memberof IdiLicenseSupplyPageInVo
     */
    'pageSize'?: number;
    /**
     * 페이지번호
     * @type {number}
     * @memberof IdiLicenseSupplyPageInVo
     */
    'pageNo'?: number;
}
/**
 * 
 * @export
 * @interface IdiMileageEtcOutVo
 */
export interface IdiMileageEtcOutVo {
    /**
     * 
     * @type {string}
     * @memberof IdiMileageEtcOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiMileageEtcOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiMileageEtcOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiMileageEtcOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiMileageEtcOutVo
     */
    'cncrName'?: string;
    /**
     * 마일리지이력ID
     * @type {number}
     * @memberof IdiMileageEtcOutVo
     */
    'mlgPrhsId'?: number;
    /**
     * 회계년
     * @type {string}
     * @memberof IdiMileageEtcOutVo
     */
    'acngYy'?: string;
    /**
     * 사용자ID
     * @type {string}
     * @memberof IdiMileageEtcOutVo
     */
    'userId'?: string;
    /**
     * 적립차감구분코드
     * @type {string}
     * @memberof IdiMileageEtcOutVo
     */
    'rsrgSbtcDcd'?: string;
    /**
     * 적립차감구분명
     * @type {string}
     * @memberof IdiMileageEtcOutVo
     */
    'rsrgSbtcDcdNm'?: string;
    /**
     * 마일리지사용구분코드
     * @type {string}
     * @memberof IdiMileageEtcOutVo
     */
    'mlgUseDcd'?: string;
    /**
     * 마일리지사용구분명
     * @type {string}
     * @memberof IdiMileageEtcOutVo
     */
    'mlgUseDcdNm'?: string;
    /**
     * 마일리지발생사유내용
     * @type {string}
     * @memberof IdiMileageEtcOutVo
     */
    'mlgOcrsCon'?: string;
    /**
     * 마일리지발생점수
     * @type {number}
     * @memberof IdiMileageEtcOutVo
     */
    'mlgOcrnScr'?: number;
    /**
     * 발생년월일
     * @type {string}
     * @memberof IdiMileageEtcOutVo
     */
    'ocrnYmd'?: string;
}
/**
 * 
 * @export
 * @interface IdiMileageEtcPageInVo
 */
export interface IdiMileageEtcPageInVo {
    /**
     * 페이지당출력건수
     * @type {number}
     * @memberof IdiMileageEtcPageInVo
     */
    'pageSize'?: number;
    /**
     * 페이지번호
     * @type {number}
     * @memberof IdiMileageEtcPageInVo
     */
    'pageNo'?: number;
}
/**
 * 
 * @export
 * @interface IdiMileageGiftListInVo
 */
export interface IdiMileageGiftListInVo {
    /**
     * 보상구분
     * @type {string}
     * @memberof IdiMileageGiftListInVo
     */
    'mdcpTrngDcd'?: string;
}
/**
 * 
 * @export
 * @interface IdiMileageGiftListOutVo
 */
export interface IdiMileageGiftListOutVo {
    /**
     * 
     * @type {string}
     * @memberof IdiMileageGiftListOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiMileageGiftListOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiMileageGiftListOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiMileageGiftListOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiMileageGiftListOutVo
     */
    'cncrName'?: string;
    /**
     * 상품권신청ID
     * @type {number}
     * @memberof IdiMileageGiftListOutVo
     */
    'mdcpAplcId'?: number;
    /**
     * 상품권연수구분코드
     * @type {string}
     * @memberof IdiMileageGiftListOutVo
     */
    'mdcpTrngDcd'?: string;
    /**
     * 상품권연수구분코드명
     * @type {string}
     * @memberof IdiMileageGiftListOutVo
     */
    'mdcpTrngDcdNm'?: string;
    /**
     * 상품명
     * @type {string}
     * @memberof IdiMileageGiftListOutVo
     */
    'pdm'?: string;
    /**
     * 신청시작년월일
     * @type {string}
     * @memberof IdiMileageGiftListOutVo
     */
    'aplcSttgYmd'?: string;
    /**
     * 신청종료년월일
     * @type {string}
     * @memberof IdiMileageGiftListOutVo
     */
    'aplcFnshYmd'?: string;
    /**
     * 지급년월일
     * @type {string}
     * @memberof IdiMileageGiftListOutVo
     */
    'pamtYmd'?: string;
    /**
     * 상품권수
     * @type {number}
     * @memberof IdiMileageGiftListOutVo
     */
    'mdcpCnt'?: number;
    /**
     * 마일리지차감점수
     * @type {number}
     * @memberof IdiMileageGiftListOutVo
     */
    'mlgStcScr'?: number;
    /**
     * 비용금액
     * @type {number}
     * @memberof IdiMileageGiftListOutVo
     */
    'expAmt'?: number;
    /**
     * 비고
     * @type {string}
     * @memberof IdiMileageGiftListOutVo
     */
    'rmrkCon'?: string;
}
/**
 * 
 * @export
 * @interface IdiMileageGiftOutVo
 */
export interface IdiMileageGiftOutVo {
    /**
     * 
     * @type {string}
     * @memberof IdiMileageGiftOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiMileageGiftOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiMileageGiftOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiMileageGiftOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiMileageGiftOutVo
     */
    'cncrName'?: string;
    /**
     * 상품권신청ID
     * @type {number}
     * @memberof IdiMileageGiftOutVo
     */
    'mdcpAplcId'?: number;
    /**
     * 상품권연수구분코드
     * @type {string}
     * @memberof IdiMileageGiftOutVo
     */
    'mdcpTrngDcd'?: string;
    /**
     * 상품권연수구분코드명
     * @type {string}
     * @memberof IdiMileageGiftOutVo
     */
    'mdcpTrngDcdNm'?: string;
    /**
     * 상품명
     * @type {string}
     * @memberof IdiMileageGiftOutVo
     */
    'pdm'?: string;
    /**
     * 신청시작년월일
     * @type {string}
     * @memberof IdiMileageGiftOutVo
     */
    'aplcSttgYmd'?: string;
    /**
     * 신청종료년월일
     * @type {string}
     * @memberof IdiMileageGiftOutVo
     */
    'aplcFnshYmd'?: string;
    /**
     * 지급년월일
     * @type {string}
     * @memberof IdiMileageGiftOutVo
     */
    'pamtYmd'?: string;
    /**
     * 상품권수
     * @type {number}
     * @memberof IdiMileageGiftOutVo
     */
    'mdcpCnt'?: number;
    /**
     * 마일리지차감점수
     * @type {number}
     * @memberof IdiMileageGiftOutVo
     */
    'mlgStcScr'?: number;
    /**
     * 비용금액
     * @type {number}
     * @memberof IdiMileageGiftOutVo
     */
    'expAmt'?: number;
    /**
     * 신청인원
     * @type {number}
     * @memberof IdiMileageGiftOutVo
     */
    'requestCnt'?: number;
    /**
     * 총예상금액
     * @type {number}
     * @memberof IdiMileageGiftOutVo
     */
    'totalPay'?: number;
    /**
     * 사용여부
     * @type {string}
     * @memberof IdiMileageGiftOutVo
     */
    'useYn'?: string;
    /**
     * 비고
     * @type {string}
     * @memberof IdiMileageGiftOutVo
     */
    'rmrkCon'?: string;
}
/**
 * 
 * @export
 * @interface IdiMileageGiftPageInVo
 */
export interface IdiMileageGiftPageInVo {
    /**
     * 페이지당출력건수
     * @type {number}
     * @memberof IdiMileageGiftPageInVo
     */
    'pageSize'?: number;
    /**
     * 페이지번호
     * @type {number}
     * @memberof IdiMileageGiftPageInVo
     */
    'pageNo'?: number;
    /**
     * 상품권연수구분코드
     * @type {string}
     * @memberof IdiMileageGiftPageInVo
     */
    'mdcpTrngDcd'?: string;
    /**
     * 상품명
     * @type {string}
     * @memberof IdiMileageGiftPageInVo
     */
    'pdm'?: string;
    /**
     * 사용여부
     * @type {string}
     * @memberof IdiMileageGiftPageInVo
     */
    'useYn'?: string;
    /**
     * 신청시작년월일시작
     * @type {string}
     * @memberof IdiMileageGiftPageInVo
     */
    'aplcSttgYmdStart'?: string;
    /**
     * 신청시작년월일종료
     * @type {string}
     * @memberof IdiMileageGiftPageInVo
     */
    'aplcSttgYmdEnd'?: string;
    /**
     * 신청종료년월일시작
     * @type {string}
     * @memberof IdiMileageGiftPageInVo
     */
    'aplcFnshYmdStart'?: string;
    /**
     * 신청종료년월일종료
     * @type {string}
     * @memberof IdiMileageGiftPageInVo
     */
    'aplcFnshYmdEnd'?: string;
}
/**
 * 
 * @export
 * @interface IdiMileageGiftRequestInVo
 */
export interface IdiMileageGiftRequestInVo {
    /**
     * 마일리지사용구분코드
     * @type {string}
     * @memberof IdiMileageGiftRequestInVo
     */
    'mlgUseDcd'?: string;
    /**
     * 상품권ID
     * @type {number}
     * @memberof IdiMileageGiftRequestInVo
     */
    'mdcpAplcId'?: number;
    /**
     * 신청수량
     * @type {number}
     * @memberof IdiMileageGiftRequestInVo
     */
    'aplcQty'?: number;
}
/**
 * 
 * @export
 * @interface IdiMileageLearningOutVo
 */
export interface IdiMileageLearningOutVo {
    /**
     * 
     * @type {string}
     * @memberof IdiMileageLearningOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiMileageLearningOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiMileageLearningOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiMileageLearningOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiMileageLearningOutVo
     */
    'cncrName'?: string;
    /**
     * 마일리지이력ID
     * @type {number}
     * @memberof IdiMileageLearningOutVo
     */
    'mlgPrhsId'?: number;
    /**
     * 회계년
     * @type {string}
     * @memberof IdiMileageLearningOutVo
     */
    'acngYy'?: string;
    /**
     * 사용자ID
     * @type {string}
     * @memberof IdiMileageLearningOutVo
     */
    'userId'?: string;
    /**
     * 적립차감구분코드
     * @type {string}
     * @memberof IdiMileageLearningOutVo
     */
    'rsrgSbtcDcd'?: string;
    /**
     * 적립차감구분명
     * @type {string}
     * @memberof IdiMileageLearningOutVo
     */
    'rsrgSbtcDcdNm'?: string;
    /**
     * 마일리지사용구분코드
     * @type {string}
     * @memberof IdiMileageLearningOutVo
     */
    'mlgUseDcd'?: string;
    /**
     * 마일리지사용구분명
     * @type {string}
     * @memberof IdiMileageLearningOutVo
     */
    'mlgUseDcdNm'?: string;
    /**
     * 마일리지발생사유내용
     * @type {string}
     * @memberof IdiMileageLearningOutVo
     */
    'mlgOcrsCon'?: string;
    /**
     * 마일리지발생점수
     * @type {number}
     * @memberof IdiMileageLearningOutVo
     */
    'mlgOcrnScr'?: number;
    /**
     * 발생년월일
     * @type {string}
     * @memberof IdiMileageLearningOutVo
     */
    'ocrnYmd'?: string;
    /**
     * 연수명
     * @type {string}
     * @memberof IdiMileageLearningOutVo
     */
    'dutyEdctNm'?: string;
    /**
     * 차수명
     * @type {string}
     * @memberof IdiMileageLearningOutVo
     */
    'edctDsprNm'?: string;
}
/**
 * 
 * @export
 * @interface IdiMileageLearningPageInVo
 */
export interface IdiMileageLearningPageInVo {
    /**
     * 페이지당출력건수
     * @type {number}
     * @memberof IdiMileageLearningPageInVo
     */
    'pageSize'?: number;
    /**
     * 페이지번호
     * @type {number}
     * @memberof IdiMileageLearningPageInVo
     */
    'pageNo'?: number;
}
/**
 * 
 * @export
 * @interface IdiMileageLicenseOutVo
 */
export interface IdiMileageLicenseOutVo {
    /**
     * 
     * @type {string}
     * @memberof IdiMileageLicenseOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiMileageLicenseOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiMileageLicenseOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiMileageLicenseOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiMileageLicenseOutVo
     */
    'cncrName'?: string;
    /**
     * 마일리지이력ID
     * @type {number}
     * @memberof IdiMileageLicenseOutVo
     */
    'mlgPrhsId'?: number;
    /**
     * 회계년
     * @type {string}
     * @memberof IdiMileageLicenseOutVo
     */
    'acngYy'?: string;
    /**
     * 사용자ID
     * @type {string}
     * @memberof IdiMileageLicenseOutVo
     */
    'userId'?: string;
    /**
     * 적립차감구분코드
     * @type {string}
     * @memberof IdiMileageLicenseOutVo
     */
    'rsrgSbtcDcd'?: string;
    /**
     * 적립차감구분명
     * @type {string}
     * @memberof IdiMileageLicenseOutVo
     */
    'rsrgSbtcDcdNm'?: string;
    /**
     * 마일리지사용구분코드
     * @type {string}
     * @memberof IdiMileageLicenseOutVo
     */
    'mlgUseDcd'?: string;
    /**
     * 마일리지사용구분명
     * @type {string}
     * @memberof IdiMileageLicenseOutVo
     */
    'mlgUseDcdNm'?: string;
    /**
     * 마일리지발생사유내용
     * @type {string}
     * @memberof IdiMileageLicenseOutVo
     */
    'mlgOcrsCon'?: string;
    /**
     * 마일리지발생점수
     * @type {number}
     * @memberof IdiMileageLicenseOutVo
     */
    'mlgOcrnScr'?: number;
    /**
     * 발생년월일
     * @type {string}
     * @memberof IdiMileageLicenseOutVo
     */
    'ocrnYmd'?: string;
    /**
     * 자격증명
     * @type {string}
     * @memberof IdiMileageLicenseOutVo
     */
    'qlcrNm'?: string;
    /**
     * 자격증등급
     * @type {string}
     * @memberof IdiMileageLicenseOutVo
     */
    'qlcrGdcd'?: string;
    /**
     * 자격증등급명
     * @type {string}
     * @memberof IdiMileageLicenseOutVo
     */
    'qlcrGdcdNm'?: string;
    /**
     * 자격증취득일
     * @type {string}
     * @memberof IdiMileageLicenseOutVo
     */
    'acqtYmd'?: string;
}
/**
 * 
 * @export
 * @interface IdiMileageLicensePageInVo
 */
export interface IdiMileageLicensePageInVo {
    /**
     * 페이지당출력건수
     * @type {number}
     * @memberof IdiMileageLicensePageInVo
     */
    'pageSize'?: number;
    /**
     * 페이지번호
     * @type {number}
     * @memberof IdiMileageLicensePageInVo
     */
    'pageNo'?: number;
}
/**
 * 
 * @export
 * @interface IdiMileageMyChartTotalOutVo
 */
export interface IdiMileageMyChartTotalOutVo {
    /**
     * 
     * @type {string}
     * @memberof IdiMileageMyChartTotalOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiMileageMyChartTotalOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiMileageMyChartTotalOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiMileageMyChartTotalOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiMileageMyChartTotalOutVo
     */
    'cncrName'?: string;
    /**
     * 전체마일리지
     * @type {number}
     * @memberof IdiMileageMyChartTotalOutVo
     */
    'allSum'?: number;
    /**
     * 나의마일리지
     * @type {number}
     * @memberof IdiMileageMyChartTotalOutVo
     */
    'mySum'?: number;
    /**
     * 직급평균마일리지
     * @type {number}
     * @memberof IdiMileageMyChartTotalOutVo
     */
    'jbclAvg'?: number;
    /**
     * 소속본부평균마일리지
     * @type {number}
     * @memberof IdiMileageMyChartTotalOutVo
     */
    'blngHdqrDsncVlAvg'?: number;
    /**
     * 소속부점평균마일리지
     * @type {number}
     * @memberof IdiMileageMyChartTotalOutVo
     */
    'brncPtrnVlAvg'?: number;
}
/**
 * 
 * @export
 * @interface IdiMileageMyTotalOutVo
 */
export interface IdiMileageMyTotalOutVo {
    /**
     * 
     * @type {string}
     * @memberof IdiMileageMyTotalOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiMileageMyTotalOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiMileageMyTotalOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiMileageMyTotalOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiMileageMyTotalOutVo
     */
    'cncrName'?: string;
    /**
     * 연간누적마일리지
     * @type {number}
     * @memberof IdiMileageMyTotalOutVo
     */
    'mlgOcrnScrYearSum'?: number;
    /**
     * 직급누적마일리지
     * @type {number}
     * @memberof IdiMileageMyTotalOutVo
     */
    'mlgOcrnScrSum'?: number;
    /**
     * 학습취득마일리지
     * @type {number}
     * @memberof IdiMileageMyTotalOutVo
     */
    'learningSum'?: number;
    /**
     * 자격증취득마일리지
     * @type {number}
     * @memberof IdiMileageMyTotalOutVo
     */
    'licenseSum'?: number;
    /**
     * 기타취득마일리지
     * @type {number}
     * @memberof IdiMileageMyTotalOutVo
     */
    'etcSum'?: number;
}
/**
 * 
 * @export
 * @interface IdiMileageRequestOutVo
 */
export interface IdiMileageRequestOutVo {
    /**
     * 
     * @type {string}
     * @memberof IdiMileageRequestOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiMileageRequestOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiMileageRequestOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiMileageRequestOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiMileageRequestOutVo
     */
    'cncrName'?: string;
    /**
     * 마일리지이력ID
     * @type {number}
     * @memberof IdiMileageRequestOutVo
     */
    'mlgPrhsId'?: number;
    /**
     * 회계년
     * @type {string}
     * @memberof IdiMileageRequestOutVo
     */
    'acngYy'?: string;
    /**
     * 사용자ID
     * @type {string}
     * @memberof IdiMileageRequestOutVo
     */
    'userId'?: string;
    /**
     * 사용자이름
     * @type {string}
     * @memberof IdiMileageRequestOutVo
     */
    'userNm'?: string;
    /**
     * 소속
     * @type {string}
     * @memberof IdiMileageRequestOutVo
     */
    'blngHdqrDsncNm'?: string;
    /**
     * 직급
     * @type {string}
     * @memberof IdiMileageRequestOutVo
     */
    'jbclCdNm'?: string;
    /**
     * 직책
     * @type {string}
     * @memberof IdiMileageRequestOutVo
     */
    'rsptDsncNm'?: string;
    /**
     * 적립차감구분코드
     * @type {string}
     * @memberof IdiMileageRequestOutVo
     */
    'rsrgSbtcDcd'?: string;
    /**
     * 적립차감구분코드명
     * @type {string}
     * @memberof IdiMileageRequestOutVo
     */
    'rsrgSbtcDcdNm'?: string;
    /**
     * 마일리지사용구분코드
     * @type {string}
     * @memberof IdiMileageRequestOutVo
     */
    'mlgUseDcd'?: string;
    /**
     * 마일리지발생사유내용
     * @type {string}
     * @memberof IdiMileageRequestOutVo
     */
    'mlgOcrsCon'?: string;
    /**
     * 마일리지발생점수
     * @type {number}
     * @memberof IdiMileageRequestOutVo
     */
    'mlgOcrnScr'?: number;
    /**
     * 발생년월일
     * @type {string}
     * @memberof IdiMileageRequestOutVo
     */
    'ocrnYmd'?: string;
    /**
     * 신청수량
     * @type {number}
     * @memberof IdiMileageRequestOutVo
     */
    'aplcQty'?: number;
    /**
     * 지급상태코드
     * @type {string}
     * @memberof IdiMileageRequestOutVo
     */
    'pamtScd'?: string;
    /**
     * 상품권아이디
     * @type {number}
     * @memberof IdiMileageRequestOutVo
     */
    'mdcpAplcId'?: number;
    /**
     * 결재자아이디
     * @type {string}
     * @memberof IdiMileageRequestOutVo
     */
    'snpnId'?: string;
    /**
     * 비고
     * @type {string}
     * @memberof IdiMileageRequestOutVo
     */
    'rmrkCon'?: string;
    /**
     * 잔여마일리지
     * @type {number}
     * @memberof IdiMileageRequestOutVo
     */
    'cumulativeMileage'?: number;
}
/**
 * 
 * @export
 * @interface IdiMileageRequestPageInVo
 */
export interface IdiMileageRequestPageInVo {
    /**
     * 페이지당출력건수
     * @type {number}
     * @memberof IdiMileageRequestPageInVo
     */
    'pageSize'?: number;
    /**
     * 페이지번호
     * @type {number}
     * @memberof IdiMileageRequestPageInVo
     */
    'pageNo'?: number;
    /**
     * 지급상태
     * @type {string}
     * @memberof IdiMileageRequestPageInVo
     */
    'pamtScd'?: string;
    /**
     * 적립차감일시작
     * @type {string}
     * @memberof IdiMileageRequestPageInVo
     */
    'ocrnYmdStart'?: string;
    /**
     * 적립차감일종료
     * @type {string}
     * @memberof IdiMileageRequestPageInVo
     */
    'ocrnYmdEnd'?: string;
}
/**
 * 
 * @export
 * @interface IdiMyCostOutVo
 */
export interface IdiMyCostOutVo {
    /**
     * 
     * @type {string}
     * @memberof IdiMyCostOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiMyCostOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiMyCostOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiMyCostOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiMyCostOutVo
     */
    'cncrName'?: string;
    /**
     * 순번
     * @type {number}
     * @memberof IdiMyCostOutVo
     */
    'sqc'?: number;
    /**
     * 사용자아이디
     * @type {string}
     * @memberof IdiMyCostOutVo
     */
    'userId'?: string;
    /**
     * 사번
     * @type {string}
     * @memberof IdiMyCostOutVo
     */
    'emplNo'?: string;
    /**
     * 사용자이름
     * @type {string}
     * @memberof IdiMyCostOutVo
     */
    'userNm'?: string;
    /**
     * 사용자이름
     * @type {string}
     * @memberof IdiMyCostOutVo
     */
    'edinNm'?: string;
    /**
     * 지원금신청구분코드
     * @type {string}
     * @memberof IdiMyCostOutVo
     */
    'spmyAplcDcd'?: string;
    /**
     * 분야
     * @type {string}
     * @memberof IdiMyCostOutVo
     */
    'onslDvlpSprnAplcDcd'?: string;
    /**
     * 지역구분
     * @type {string}
     * @memberof IdiMyCostOutVo
     */
    'brncPtrnNm'?: string;
    /**
     * 본부
     * @type {string}
     * @memberof IdiMyCostOutVo
     */
    'blngHdqrDsncNm'?: string;
    /**
     * 부서
     * @type {string}
     * @memberof IdiMyCostOutVo
     */
    'deptDsncNm'?: string;
    /**
     * 직급
     * @type {string}
     * @memberof IdiMyCostOutVo
     */
    'jbclCdNm'?: string;
    /**
     * 직책
     * @type {string}
     * @memberof IdiMyCostOutVo
     */
    'rsptDsncNm'?: string;
    /**
     * 승인여부
     * @type {string}
     * @memberof IdiMyCostOutVo
     */
    'trngAplcScd'?: string;
    /**
     * 반려사유
     * @type {string}
     * @memberof IdiMyCostOutVo
     */
    'rtrcRcd'?: string;
    /**
     * 수강방법
     * @type {string}
     * @memberof IdiMyCostOutVo
     */
    'edctMthdDsncVl'?: string;
    /**
     * 교육분야
     * @type {string}
     * @memberof IdiMyCostOutVo
     */
    'onslDvlpSprnAplcDcdNm'?: string;
    /**
     * 연수명
     * @type {string}
     * @memberof IdiMyCostOutVo
     */
    'edctProcNm'?: string;
    /**
     * 수강시작일
     * @type {string}
     * @memberof IdiMyCostOutVo
     */
    'lcteSttgYmd'?: string;
    /**
     * 수강종료일
     * @type {string}
     * @memberof IdiMyCostOutVo
     */
    'lcteFnshYmd'?: string;
    /**
     * 지원금신청년월일
     * @type {string}
     * @memberof IdiMyCostOutVo
     */
    'spmyAplcYmd'?: string;
    /**
     * 학원비(수강료)
     * @type {number}
     * @memberof IdiMyCostOutVo
     */
    'trngAtlcAmt'?: number;
    /**
     * 지원예정급액
     * @type {number}
     * @memberof IdiMyCostOutVo
     */
    'pamtAmt'?: number;
    /**
     * 암호화카드번호
     * @type {string}
     * @memberof IdiMyCostOutVo
     */
    'encpCardNo'?: string;
    /**
     * 암호화카드번호1
     * @type {string}
     * @memberof IdiMyCostOutVo
     */
    'encpCardNo1'?: string;
    /**
     * 암호화카드번호2
     * @type {string}
     * @memberof IdiMyCostOutVo
     */
    'encpCardNo2'?: string;
    /**
     * 암호화카드번호3
     * @type {string}
     * @memberof IdiMyCostOutVo
     */
    'encpCardNo3'?: string;
    /**
     * 암호화카드번호5
     * @type {string}
     * @memberof IdiMyCostOutVo
     */
    'encpCardNo4'?: string;
    /**
     * 카드승인번호
     * @type {string}
     * @memberof IdiMyCostOutVo
     */
    'cardApn'?: string;
    /**
     * 카드승인일
     * @type {string}
     * @memberof IdiMyCostOutVo
     */
    'crdAthzYmd'?: string;
    /**
     * 지급여부
     * @type {string}
     * @memberof IdiMyCostOutVo
     */
    'spmyPamtYn'?: string;
    /**
     * 지급일
     * @type {string}
     * @memberof IdiMyCostOutVo
     */
    'spmyPamtYmd'?: string;
    /**
     * 첨부파일 리스트
     * @type {Array<IdiEduCostAttachFileOutVo>}
     * @memberof IdiMyCostOutVo
     */
    'attachFileList'?: Array<IdiEduCostAttachFileOutVo>;
}
/**
 * 
 * @export
 * @interface IdiSupportDevDescInVo
 */
export interface IdiSupportDevDescInVo {
    /**
     * 페이지당출력건수
     * @type {number}
     * @memberof IdiSupportDevDescInVo
     */
    'pageSize'?: number;
    /**
     * 페이지번호
     * @type {number}
     * @memberof IdiSupportDevDescInVo
     */
    'pageNo'?: number;
    /**
     * 시작날자
     * @type {string}
     * @memberof IdiSupportDevDescInVo
     */
    'startDate'?: string;
    /**
     * 종료날자
     * @type {string}
     * @memberof IdiSupportDevDescInVo
     */
    'endDate'?: string;
    /**
     * 사용자아이디
     * @type {string}
     * @memberof IdiSupportDevDescInVo
     */
    'userId'?: string;
}
/**
 * 
 * @export
 * @interface IdiSupportDevDescOutVo
 */
export interface IdiSupportDevDescOutVo {
    /**
     * 
     * @type {string}
     * @memberof IdiSupportDevDescOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiSupportDevDescOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiSupportDevDescOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiSupportDevDescOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiSupportDevDescOutVo
     */
    'cncrName'?: string;
    /**
     * 헤더 제목
     * @type {string}
     * @memberof IdiSupportDevDescOutVo
     */
    'headTitle'?: string;
    /**
     * 신청타입
     * @type {string}
     * @memberof IdiSupportDevDescOutVo
     */
    'applyType'?: string;
    /**
     * 사용자 ID
     * @type {string}
     * @memberof IdiSupportDevDescOutVo
     */
    'userId'?: string;
    /**
     * 사원번호
     * @type {string}
     * @memberof IdiSupportDevDescOutVo
     */
    'emplNo'?: string;
    /**
     * 현업개발지원신청구분코드
     * @type {string}
     * @memberof IdiSupportDevDescOutVo
     */
    'onslDvplSprnAplcDcd'?: string;
    /**
     * 외국어시험코드
     * @type {string}
     * @memberof IdiSupportDevDescOutVo
     */
    'frlgExamCd'?: string;
    /**
     * 학위코드
     * @type {string}
     * @memberof IdiSupportDevDescOutVo
     */
    'acdgCd'?: string;
    /**
     * 학위과정구분값
     * @type {string}
     * @memberof IdiSupportDevDescOutVo
     */
    'acdgProcDsncVl'?: string;
    /**
     * 순번
     * @type {number}
     * @memberof IdiSupportDevDescOutVo
     */
    'sqc'?: number;
    /**
     * 상태1
     * @type {string}
     * @memberof IdiSupportDevDescOutVo
     */
    'status1'?: string;
    /**
     * 상태1명
     * @type {string}
     * @memberof IdiSupportDevDescOutVo
     */
    'status1Nm'?: string;
    /**
     * 상태2
     * @type {string}
     * @memberof IdiSupportDevDescOutVo
     */
    'status2'?: string;
    /**
     * 상태2명
     * @type {string}
     * @memberof IdiSupportDevDescOutVo
     */
    'status2Nm'?: string;
    /**
     * 확정여부
     * @type {string}
     * @memberof IdiSupportDevDescOutVo
     */
    'dfnnYn'?: string;
}
/**
 * 
 * @export
 * @interface KyoboOutVo
 */
export interface KyoboOutVo {
    /**
     * 암호화키
     * @type {string}
     * @memberof KyoboOutVo
     */
    'entrKey'?: string;
    /**
     * 사용자ID
     * @type {string}
     * @memberof KyoboOutVo
     */
    'userId'?: string;
    /**
     * 사용자명
     * @type {string}
     * @memberof KyoboOutVo
     */
    'userNm'?: string;
    /**
     * sso주소
     * @type {string}
     * @memberof KyoboOutVo
     */
    'ssoUrl'?: string;
}
/**
 * 
 * @export
 * @interface LogOutInVo
 */
export interface LogOutInVo {
    /**
     * accessToken
     * @type {string}
     * @memberof LogOutInVo
     */
    'accessToken'?: string;
}
/**
 * 
 * @export
 * @interface LoginAppInVo
 */
export interface LoginAppInVo {
    /**
     * 사용자ID
     * @type {string}
     * @memberof LoginAppInVo
     */
    'userId'?: string;
    /**
     * 사용자비번
     * @type {string}
     * @memberof LoginAppInVo
     */
    'userPwd'?: string;
}
/**
 * 
 * @export
 * @interface LoginInVo
 */
export interface LoginInVo {
    /**
     * 사용자ID
     * @type {string}
     * @memberof LoginInVo
     */
    'userId'?: string;
    /**
     * 사용자비번
     * @type {string}
     * @memberof LoginInVo
     */
    'userPwd'?: string;
}
/**
 * 
 * @export
 * @interface LoginMotpInVo
 */
export interface LoginMotpInVo {
    /**
     * 사용자 ID
     * @type {string}
     * @memberof LoginMotpInVo
     */
    'userId'?: string;
    /**
     * 오티피 번호
     * @type {string}
     * @memberof LoginMotpInVo
     */
    'otpNumber'?: string;
    /**
     * TOKEN
     * @type {string}
     * @memberof LoginMotpInVo
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface MainCourseOutVo
 */
export interface MainCourseOutVo {
    /**
     * 
     * @type {string}
     * @memberof MainCourseOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainCourseOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainCourseOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainCourseOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainCourseOutVo
     */
    'cncrName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainCourseOutVo
     */
    'dutyEdctCd'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainCourseOutVo
     */
    'dutyEdctNm'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainCourseOutVo
     */
    'mblImgUrlAdr'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainCourseOutVo
     */
    'pcImgUrlAdr'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainCourseOutVo
     */
    'edctMthdTcd'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainCourseOutVo
     */
    'edctMthdNm'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainCourseOutVo
     */
    'edctDsprNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainCourseOutVo
     */
    'likeYn'?: string;
    /**
     * 
     * @type {number}
     * @memberof MainCourseOutVo
     */
    'dataSqn'?: number;
}
/**
 * 
 * @export
 * @interface MainModuleOutVo
 */
export interface MainModuleOutVo {
    /**
     * 
     * @type {string}
     * @memberof MainModuleOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainModuleOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainModuleOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainModuleOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainModuleOutVo
     */
    'cncrName'?: string;
    /**
     * 
     * @type {number}
     * @memberof MainModuleOutVo
     */
    'desgMdulNo'?: number;
    /**
     * 
     * @type {string}
     * @memberof MainModuleOutVo
     */
    'desgMdulTcd'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainModuleOutVo
     */
    'desgMdulNm'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainModuleOutVo
     */
    'useYn'?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof MainModuleOutVo
     */
    'list'?: Array<object>;
}
/**
 * 
 * @export
 * @interface MainNoticeOutVo
 */
export interface MainNoticeOutVo {
    /**
     * 
     * @type {string}
     * @memberof MainNoticeOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainNoticeOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainNoticeOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainNoticeOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainNoticeOutVo
     */
    'cncrName'?: string;
    /**
     * 
     * @type {number}
     * @memberof MainNoticeOutVo
     */
    'blbrNo'?: number;
    /**
     * 
     * @type {string}
     * @memberof MainNoticeOutVo
     */
    'cybrTriuBlbrKcd'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainNoticeOutVo
     */
    'blbrNm'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainNoticeOutVo
     */
    'lkngUsayClsfVl'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainNoticeOutVo
     */
    'wrtnUsayClsfVl'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainNoticeOutVo
     */
    'rpcmUsayClsfVl'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainNoticeOutVo
     */
    'stsfUseYn'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainNoticeOutVo
     */
    'rpcmUseYn'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainNoticeOutVo
     */
    'atchUseYn'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainNoticeOutVo
     */
    'ctgyUseYn'?: string;
    /**
     * 
     * @type {number}
     * @memberof MainNoticeOutVo
     */
    'blbrPtngId'?: number;
    /**
     * 
     * @type {number}
     * @memberof MainNoticeOutVo
     */
    'blbrCtgyId'?: number;
    /**
     * 
     * @type {string}
     * @memberof MainNoticeOutVo
     */
    'ctgyNm'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainNoticeOutVo
     */
    'bltApowTtlNm'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainNoticeOutVo
     */
    'bltApowCon'?: string;
    /**
     * 
     * @type {number}
     * @memberof MainNoticeOutVo
     */
    'inqCnt'?: number;
    /**
     * 
     * @type {string}
     * @memberof MainNoticeOutVo
     */
    'bestYn'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainNoticeOutVo
     */
    'useYn'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainNoticeOutVo
     */
    'noticeYn'?: string;
}
/**
 * 
 * @export
 * @interface MainPopupOutVo
 */
export interface MainPopupOutVo {
    /**
     * 
     * @type {string}
     * @memberof MainPopupOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainPopupOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainPopupOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainPopupOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainPopupOutVo
     */
    'cncrName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainPopupOutVo
     */
    'ppupId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainPopupOutVo
     */
    'ppupTtlNm'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainPopupOutVo
     */
    'ppupCon'?: string;
    /**
     * 화면유형 (NM: 노멀, LY: 레이어)
     * @type {string}
     * @memberof MainPopupOutVo
     */
    'ppupTcd'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainPopupOutVo
     */
    'ppupTnm'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainPopupOutVo
     */
    'ppupUrlAdr'?: string;
}
/**
 * 
 * @export
 * @interface MainReviewOutVo
 */
export interface MainReviewOutVo {
    /**
     * 
     * @type {string}
     * @memberof MainReviewOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainReviewOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainReviewOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainReviewOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainReviewOutVo
     */
    'cncrName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainReviewOutVo
     */
    'dutyEdctCd'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainReviewOutVo
     */
    'dutyEdctNm'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainReviewOutVo
     */
    'mblImgUrlAdr'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainReviewOutVo
     */
    'pcImgUrlAdr'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainReviewOutVo
     */
    'edctMthdTcd'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainReviewOutVo
     */
    'edctMthdNm'?: string;
    /**
     * 
     * @type {string}
     * @memberof MainReviewOutVo
     */
    'edctDsprNo'?: string;
    /**
     * 
     * @type {number}
     * @memberof MainReviewOutVo
     */
    'dataSqn'?: number;
    /**
     * 
     * @type {string}
     * @memberof MainReviewOutVo
     */
    'rvwCon'?: string;
    /**
     * 
     * @type {number}
     * @memberof MainReviewOutVo
     */
    'rvwScr'?: number;
    /**
     * 
     * @type {string}
     * @memberof MainReviewOutVo
     */
    'useYn'?: string;
}
/**
 * 마스터 과정 첨부 파일
 * @export
 * @interface MasterCourseAttachFileOutVo
 */
export interface MasterCourseAttachFileOutVo {
    /**
     * 
     * @type {string}
     * @memberof MasterCourseAttachFileOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof MasterCourseAttachFileOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MasterCourseAttachFileOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MasterCourseAttachFileOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof MasterCourseAttachFileOutVo
     */
    'cncrName'?: string;
    /**
     * 교육과정학습분류코드값
     * @type {string}
     * @memberof MasterCourseAttachFileOutVo
     */
    'edctClsfVl'?: string;
    /**
     * 교육과정코드
     * @type {string}
     * @memberof MasterCourseAttachFileOutVo
     */
    'dutyEdctCd'?: string;
    /**
     * 첨부파일순번
     * @type {number}
     * @memberof MasterCourseAttachFileOutVo
     */
    'atchSqn'?: number;
    /**
     * 개설카테고리코드값
     * @type {string}
     * @memberof MasterCourseAttachFileOutVo
     */
    'opnCtgyVl'?: string;
    /**
     * 원본파일명
     * @type {string}
     * @memberof MasterCourseAttachFileOutVo
     */
    'orcpFileNm'?: string;
    /**
     * 시스템파일명
     * @type {string}
     * @memberof MasterCourseAttachFileOutVo
     */
    'sysFileNm'?: string;
    /**
     * 파일URL주소
     * @type {string}
     * @memberof MasterCourseAttachFileOutVo
     */
    'fileUrlAdr'?: string;
    /**
     * 파일확장자코드
     * @type {string}
     * @memberof MasterCourseAttachFileOutVo
     */
    'fileEtnsNm'?: string;
    /**
     * 파일크기값
     * @type {number}
     * @memberof MasterCourseAttachFileOutVo
     */
    'flszVl'?: number;
    /**
     * 사용여부
     * @type {string}
     * @memberof MasterCourseAttachFileOutVo
     */
    'useYn'?: string;
}
/**
 * 
 * @export
 * @interface MasterCourseDetailInVo
 */
export interface MasterCourseDetailInVo {
    /**
     * 연수직무코드
     * @type {string}
     * @memberof MasterCourseDetailInVo
     */
    'dutyEdctCd'?: string;
    /**
     * 교육차수번호
     * @type {number}
     * @memberof MasterCourseDetailInVo
     */
    'edctDsprNo'?: number;
}
/**
 * 
 * @export
 * @interface MasterCourseDisplayCategoryOutVo
 */
export interface MasterCourseDisplayCategoryOutVo {
    /**
     * 
     * @type {string}
     * @memberof MasterCourseDisplayCategoryOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof MasterCourseDisplayCategoryOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MasterCourseDisplayCategoryOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MasterCourseDisplayCategoryOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof MasterCourseDisplayCategoryOutVo
     */
    'cncrName'?: string;
    /**
     * 개설카테고리코드값
     * @type {string}
     * @memberof MasterCourseDisplayCategoryOutVo
     */
    'opnCtgyVl'?: string;
    /**
     * 상위개설카테고리코드값
     * @type {string}
     * @memberof MasterCourseDisplayCategoryOutVo
     */
    'hgrnOpnCtgyVl'?: string;
    /**
     * 개설카테고리명
     * @type {string}
     * @memberof MasterCourseDisplayCategoryOutVo
     */
    'ctgyNm'?: string;
    /**
     * 정렬순서
     * @type {number}
     * @memberof MasterCourseDisplayCategoryOutVo
     */
    'lnpSqc'?: number;
    /**
     * 레벨번호
     * @type {number}
     * @memberof MasterCourseDisplayCategoryOutVo
     */
    'lvlNo'?: number;
    /**
     * 사용여부
     * @type {string}
     * @memberof MasterCourseDisplayCategoryOutVo
     */
    'useYn'?: string;
}
/**
 * 
 * @export
 * @interface MasterCourseFavoriteInVo
 */
export interface MasterCourseFavoriteInVo {
    /**
     * 연수직무코드
     * @type {string}
     * @memberof MasterCourseFavoriteInVo
     */
    'dutyEdctCd'?: string;
}
/**
 * 마스터 과정 정책 지원 자격증 리스트
 * @export
 * @interface MasterCourseLicenseOutVo
 */
export interface MasterCourseLicenseOutVo {
    /**
     * 
     * @type {string}
     * @memberof MasterCourseLicenseOutVo
     */
    'dutyEdctCd'?: string;
    /**
     * 
     * @type {string}
     * @memberof MasterCourseLicenseOutVo
     */
    'qlcrDsncVl'?: string;
    /**
     * 
     * @type {string}
     * @memberof MasterCourseLicenseOutVo
     */
    'useYn'?: string;
}
/**
 * 
 * @export
 * @interface MasterCourseListInVo
 */
export interface MasterCourseListInVo {
    /**
     * 페이지당출력건수
     * @type {number}
     * @memberof MasterCourseListInVo
     */
    'pageSize'?: number;
    /**
     * 페이지번호
     * @type {number}
     * @memberof MasterCourseListInVo
     */
    'pageNo'?: number;
    /**
     * 카테고리
     * @type {Array<string>}
     * @memberof MasterCourseListInVo
     */
    'opnCtgyVl'?: Array<string>;
    /**
     * 검색어
     * @type {string}
     * @memberof MasterCourseListInVo
     */
    'searchName'?: string;
    /**
     * 키워드 조건
     * @type {Array<string>}
     * @memberof MasterCourseListInVo
     */
    'keywords'?: Array<string>;
    /**
     * 전체 연수 Y, 신청 가능한 연수 N
     * @type {string}
     * @memberof MasterCourseListInVo
     */
    'isAll'?: string;
    /**
     * 교육방식 코드
     * @type {string}
     * @memberof MasterCourseListInVo
     */
    'edctMthdTcd'?: string;
    /**
     * 정렬 타입 찜많은순, 최신순, 후기많은순
     * @type {string}
     * @memberof MasterCourseListInVo
     */
    'sortType'?: MasterCourseListInVoSortTypeEnum;
    /**
     * 3급 필수 여부
     * @type {string}
     * @memberof MasterCourseListInVo
     */
    'deg3MndrYn'?: string;
    /**
     * 4급 필수 여부
     * @type {string}
     * @memberof MasterCourseListInVo
     */
    'deg4MndrYn'?: string;
    /**
     * 평정 여부
     * @type {string}
     * @memberof MasterCourseListInVo
     */
    'evltYn'?: string;
}

export const MasterCourseListInVoSortTypeEnum = {
    Like: 'like',
    Date: 'date',
    Review: 'review'
} as const;

export type MasterCourseListInVoSortTypeEnum = typeof MasterCourseListInVoSortTypeEnum[keyof typeof MasterCourseListInVoSortTypeEnum];

/**
 * 
 * @export
 * @interface MasterCourseListOutVo
 */
export interface MasterCourseListOutVo {
    /**
     * 교육 과정코드
     * @type {string}
     * @memberof MasterCourseListOutVo
     */
    'dutyEdctCd'?: string;
    /**
     * 교육과정학습분류코드값
     * @type {string}
     * @memberof MasterCourseListOutVo
     */
    'edctClsfVl'?: string;
    /**
     * 개설카테고리코드값
     * @type {string}
     * @memberof MasterCourseListOutVo
     */
    'opnCtgyVl'?: string;
    /**
     * 교육방식코드
     * @type {string}
     * @memberof MasterCourseListOutVo
     */
    'edctMthdTcd'?: string;
    /**
     * 교육수준코드
     * @type {string}
     * @memberof MasterCourseListOutVo
     */
    'edctDflvTcd'?: string;
    /**
     * 키워드값
     * @type {string}
     * @memberof MasterCourseListOutVo
     */
    'kwrVl'?: string;
    /**
     * 교육과정명
     * @type {string}
     * @memberof MasterCourseListOutVo
     */
    'dutyEdctNm'?: string;
    /**
     * 교육과정목적내용
     * @type {string}
     * @memberof MasterCourseListOutVo
     */
    'dutyEdctObjtCon'?: string;
    /**
     * 교육과정설명내용
     * @type {string}
     * @memberof MasterCourseListOutVo
     */
    'dutyEdctDescCon'?: string;
    /**
     * 교육과정대상내용
     * @type {string}
     * @memberof MasterCourseListOutVo
     */
    'dutyEdctTgtCon'?: string;
    /**
     * 배송지사용여부
     * @type {string}
     * @memberof MasterCourseListOutVo
     */
    'dlplUseYn'?: string;
    /**
     * 3급필수여부
     * @type {string}
     * @memberof MasterCourseListOutVo
     */
    'deg3MndrYn'?: string;
    /**
     * 3급기준점수
     * @type {number}
     * @memberof MasterCourseListOutVo
     */
    'deg3BaseScr'?: number;
    /**
     * 4급필수여부
     * @type {string}
     * @memberof MasterCourseListOutVo
     */
    'deg4MndrYn'?: string;
    /**
     * 4급기준점수
     * @type {number}
     * @memberof MasterCourseListOutVo
     */
    'deg4BaseScr'?: number;
    /**
     * 평점여부
     * @type {string}
     * @memberof MasterCourseListOutVo
     */
    'evltYn'?: string;
    /**
     * 순서
     * @type {number}
     * @memberof MasterCourseListOutVo
     */
    'sqc'?: number;
    /**
     * 부서결재사용여부
     * @type {string}
     * @memberof MasterCourseListOutVo
     */
    'deptSnctUseYn'?: string;
    /**
     * 결재여부
     * @type {string}
     * @memberof MasterCourseListOutVo
     */
    'athzYn'?: string;
    /**
     * 모바일이미지URL주소
     * @type {string}
     * @memberof MasterCourseListOutVo
     */
    'mblImgUrlAdr'?: string;
    /**
     * PC이미지URL주소
     * @type {string}
     * @memberof MasterCourseListOutVo
     */
    'pcImgUrlAdr'?: string;
    /**
     * 교육과정비고내용
     * @type {string}
     * @memberof MasterCourseListOutVo
     */
    'rmrkCon'?: string;
    /**
     * 사용여부
     * @type {string}
     * @memberof MasterCourseListOutVo
     */
    'useYn'?: string;
    /**
     * 교육대상지정사용여부
     * @type {string}
     * @memberof MasterCourseListOutVo
     */
    'edtgDsgtUseYn'?: string;
    /**
     * 신청대기코드
     * @type {string}
     * @memberof MasterCourseListOutVo
     */
    'aplcWaitTcd'?: string;
    /**
     * 중복수강가능여부
     * @type {string}
     * @memberof MasterCourseListOutVo
     */
    'dpltAtlcAblYn'?: string;
    /**
     * 당해년재수강여부
     * @type {string}
     * @memberof MasterCourseListOutVo
     */
    'condYyReAtlcYn'?: string;
    /**
     * 재수강가능개월수
     * @type {number}
     * @memberof MasterCourseListOutVo
     */
    'itrnAtlcAblMntsCnt'?: number;
    /**
     * 이전교육수료사용여부
     * @type {string}
     * @memberof MasterCourseListOutVo
     */
    'fmtsEdctCtcrUseYn'?: string;
    /**
     * 전체교육수료여부
     * @type {string}
     * @memberof MasterCourseListOutVo
     */
    'allEdctCtcrYn'?: string;
    /**
     * 자격증취득여부
     * @type {string}
     * @memberof MasterCourseListOutVo
     */
    'qlcrAcqtYn'?: string;
    /**
     * 전체자격증취득여부
     * @type {string}
     * @memberof MasterCourseListOutVo
     */
    'allQlcrAcqtYn'?: string;
    /**
     * 지원자격증코드값
     * @type {string}
     * @memberof MasterCourseListOutVo
     */
    'sprnQlcrCdVl'?: string;
    /**
     * 동일교육제한사용여부
     * @type {string}
     * @memberof MasterCourseListOutVo
     */
    'sameEdctLmtnUseYn'?: string;
    /**
     * 교육과정운영자명
     * @type {string}
     * @memberof MasterCourseListOutVo
     */
    'edctSyopNm'?: string;
    /**
     * 모바일여부
     * @type {string}
     * @memberof MasterCourseListOutVo
     */
    'mblYn'?: string;
    /**
     * 교육과정공유값
     * @type {string}
     * @memberof MasterCourseListOutVo
     */
    'edctShrnCdVl'?: string;
    /**
     * 마스터 과정 정책 선수과정 리스트
     * @type {Array<MasterCoursePreOutVo>}
     * @memberof MasterCourseListOutVo
     */
    'preList'?: Array<MasterCoursePreOutVo>;
    /**
     * 마스터 과정 정책 지원 자격증 리스트
     * @type {Array<MasterCourseLicenseOutVo>}
     * @memberof MasterCourseListOutVo
     */
    'licenseList'?: Array<MasterCourseLicenseOutVo>;
    /**
     * 마스터 과정 첨부 파일
     * @type {Array<MasterCourseAttachFileOutVo>}
     * @memberof MasterCourseListOutVo
     */
    'attchFileList'?: Array<MasterCourseAttachFileOutVo>;
    /**
     * 동일 과정 리스트
     * @type {Array<MasterCourseSameOutVo>}
     * @memberof MasterCourseListOutVo
     */
    'sameList'?: Array<MasterCourseSameOutVo>;
    /**
     * 과정 차수 리스트
     * @type {Array<CourseDegreeOutVo>}
     * @memberof MasterCourseListOutVo
     */
    'courseDegreeList'?: Array<CourseDegreeOutVo>;
    /**
     * 즐겨찾기 여부
     * @type {string}
     * @memberof MasterCourseListOutVo
     */
    'isFavoriteYn'?: string;
    /**
     * 
     * @type {CourseReviewCntDtlOutVo}
     * @memberof MasterCourseListOutVo
     */
    'courseReviewCntDtlOutVo'?: CourseReviewCntDtlOutVo;
    /**
     * 찜하기 카운트
     * @type {number}
     * @memberof MasterCourseListOutVo
     */
    'likeCnt'?: number;
    /**
     * 수강 후기 카운트
     * @type {number}
     * @memberof MasterCourseListOutVo
     */
    'reviewCnt'?: number;
    /**
     * 모바일여부
     * @type {Array<MasterCourseMobileOutVo>}
     * @memberof MasterCourseListOutVo
     */
    'mobileList'?: Array<MasterCourseMobileOutVo>;
}
/**
 * 모바일여부
 * @export
 * @interface MasterCourseMobileOutVo
 */
export interface MasterCourseMobileOutVo {
    /**
     * 
     * @type {string}
     * @memberof MasterCourseMobileOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof MasterCourseMobileOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MasterCourseMobileOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MasterCourseMobileOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof MasterCourseMobileOutVo
     */
    'cncrName'?: string;
    /**
     * 직무교육코드
     * @type {string}
     * @memberof MasterCourseMobileOutVo
     */
    'dutyEdctCd'?: string;
    /**
     * 타입ID
     * @type {string}
     * @memberof MasterCourseMobileOutVo
     */
    'typeId'?: string;
    /**
     * 타입명
     * @type {string}
     * @memberof MasterCourseMobileOutVo
     */
    'typeNm'?: string;
    /**
     * 사용여부
     * @type {string}
     * @memberof MasterCourseMobileOutVo
     */
    'useYn'?: string;
}
/**
 * 마스터 과정 정책 선수과정 리스트
 * @export
 * @interface MasterCoursePreOutVo
 */
export interface MasterCoursePreOutVo {
    /**
     * 
     * @type {string}
     * @memberof MasterCoursePreOutVo
     */
    'dutyEdctCd'?: string;
    /**
     * 
     * @type {string}
     * @memberof MasterCoursePreOutVo
     */
    'bffcCmcrDutyEdctCd'?: string;
    /**
     * 
     * @type {string}
     * @memberof MasterCoursePreOutVo
     */
    'useYn'?: string;
}
/**
 * 동일 과정 리스트
 * @export
 * @interface MasterCourseSameOutVo
 */
export interface MasterCourseSameOutVo {
    /**
     * 
     * @type {string}
     * @memberof MasterCourseSameOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof MasterCourseSameOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MasterCourseSameOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MasterCourseSameOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof MasterCourseSameOutVo
     */
    'cncrName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MasterCourseSameOutVo
     */
    'dutyEdctCd'?: string;
    /**
     * 
     * @type {string}
     * @memberof MasterCourseSameOutVo
     */
    'sameDutyEdctCd'?: string;
    /**
     * 
     * @type {string}
     * @memberof MasterCourseSameOutVo
     */
    'useYn'?: string;
}
/**
 * 
 * @export
 * @interface MenuAllOutVo
 */
export interface MenuAllOutVo {
    /**
     * 
     * @type {string}
     * @memberof MenuAllOutVo
     */
    'screTcd'?: string;
    /**
     * 
     * @type {number}
     * @memberof MenuAllOutVo
     */
    'menuId'?: number;
    /**
     * 
     * @type {number}
     * @memberof MenuAllOutVo
     */
    'hgrnMenuId'?: number;
    /**
     * 
     * @type {string}
     * @memberof MenuAllOutVo
     */
    'menuNm'?: string;
    /**
     * 
     * @type {number}
     * @memberof MenuAllOutVo
     */
    'menuLvlNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof MenuAllOutVo
     */
    'menuSqc'?: number;
    /**
     * 
     * @type {string}
     * @memberof MenuAllOutVo
     */
    'useYn'?: string;
    /**
     * 
     * @type {string}
     * @memberof MenuAllOutVo
     */
    'rgsnTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof MenuAllOutVo
     */
    'rgsnId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MenuAllOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof MenuAllOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MenuAllOutVo
     */
    'fullOrder'?: string;
    /**
     * 
     * @type {string}
     * @memberof MenuAllOutVo
     */
    'menuIdPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof MenuAllOutVo
     */
    'menuNmPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof MenuAllOutVo
     */
    'prrmUrlAdr'?: string;
    /**
     * 
     * @type {string}
     * @memberof MenuAllOutVo
     */
    'linkUrlAdr'?: string;
    /**
     * 
     * @type {string}
     * @memberof MenuAllOutVo
     */
    'linkTcd'?: string;
    /**
     * 
     * @type {string}
     * @memberof MenuAllOutVo
     */
    'ppupUrlAdr'?: string;
    /**
     * 
     * @type {Array<AuthOutVo>}
     * @memberof MenuAllOutVo
     */
    'authList'?: Array<AuthOutVo>;
}
/**
 * 
 * @export
 * @interface MenuInVo
 */
export interface MenuInVo {
    /**
     * 화면유형
     * @type {string}
     * @memberof MenuInVo
     */
    'screTcd'?: string;
    /**
     * 메뉴 ID
     * @type {string}
     * @memberof MenuInVo
     */
    'menuId'?: string;
    /**
     * 상위 메뉴 ID
     * @type {string}
     * @memberof MenuInVo
     */
    'hgrnMenuId'?: string;
    /**
     * 메뉴명
     * @type {string}
     * @memberof MenuInVo
     */
    'menuNm'?: string;
    /**
     * 링크유형코드
     * @type {string}
     * @memberof MenuInVo
     */
    'linkTcd'?: string;
    /**
     * 프로그램URL주소
     * @type {string}
     * @memberof MenuInVo
     */
    'prrmUrlAdr'?: string;
    /**
     * 링크URL주소
     * @type {string}
     * @memberof MenuInVo
     */
    'linkUrlAdr'?: string;
    /**
     * 팝업URL주소
     * @type {string}
     * @memberof MenuInVo
     */
    'ppupUrlAdr'?: string;
    /**
     * 메뉴 레벨 번호
     * @type {number}
     * @memberof MenuInVo
     */
    'menuLvlNo'?: number;
    /**
     * 메뉴 순서
     * @type {number}
     * @memberof MenuInVo
     */
    'menuSqc'?: number;
    /**
     * 사용 여부
     * @type {string}
     * @memberof MenuInVo
     */
    'useYn'?: string;
    /**
     * 권한 리스트
     * @type {Array<AuthInVo>}
     * @memberof MenuInVo
     */
    'authList'?: Array<AuthInVo>;
    /**
     * 메뉴 권한 체크 여부
     * @type {string}
     * @memberof MenuInVo
     */
    'authModeYn'?: string;
}
/**
 * VOD 정보
 * @export
 * @interface MultimediaOutVo
 */
export interface MultimediaOutVo {
    /**
     * 
     * @type {string}
     * @memberof MultimediaOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof MultimediaOutVo
     */
    'cncrId'?: string;
    /**
     * 인재개발시스템최종변경자ID
     * @type {string}
     * @memberof MultimediaOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 인재개발시스템최종변경일시
     * @type {string}
     * @memberof MultimediaOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof MultimediaOutVo
     */
    'cncrName'?: string;
    /**
     * 콘텐츠ID
     * @type {string}
     * @memberof MultimediaOutVo
     */
    'connId'?: string;
    /**
     * 교육과정학습분류코드값
     * @type {string}
     * @memberof MultimediaOutVo
     */
    'edctClsfVl'?: string;
    /**
     * 교육기관코드
     * @type {string}
     * @memberof MultimediaOutVo
     */
    'edinId'?: string;
    /**
     * 콘텐츠유형코드
     * @type {string}
     * @memberof MultimediaOutVo
     */
    'connKcd'?: string;
    /**
     * 콘텐츠명
     * @type {string}
     * @memberof MultimediaOutVo
     */
    'connTtlNm'?: string;
    /**
     * 콘텐츠내용
     * @type {string}
     * @memberof MultimediaOutVo
     */
    'connDtlCon'?: string;
    /**
     * 등록자명
     * @type {string}
     * @memberof MultimediaOutVo
     */
    'rgsrNm'?: string;
    /**
     * 콘텐츠등급코드
     * @type {string}
     * @memberof MultimediaOutVo
     */
    'edctDflvTcd'?: string;
    /**
     * 콘텐츠등급명
     * @type {string}
     * @memberof MultimediaOutVo
     */
    'connGrdNm'?: string;
    /**
     * 콘텐츠원본파일명
     * @type {string}
     * @memberof MultimediaOutVo
     */
    'orcpFileNm'?: string;
    /**
     * 콘텐츠시스템파일명
     * @type {string}
     * @memberof MultimediaOutVo
     */
    'strgFileNm'?: string;
    /**
     * 콘텐츠파일크기값
     * @type {number}
     * @memberof MultimediaOutVo
     */
    'flszVl'?: number;
    /**
     * 콘텐츠미리보기URL주소
     * @type {string}
     * @memberof MultimediaOutVo
     */
    'prvwUrlAdr'?: string;
    /**
     * 내부URL주소
     * @type {string}
     * @memberof MultimediaOutVo
     */
    'fileUrlAdr'?: string;
    /**
     * 외부URL주소
     * @type {string}
     * @memberof MultimediaOutVo
     */
    'cldFileUrlAdr'?: string;
    /**
     * 콘텐츠시간
     * @type {number}
     * @memberof MultimediaOutVo
     */
    'connLen'?: number;
    /**
     * 콘텐츠저화질URL주소
     * @type {string}
     * @memberof MultimediaOutVo
     */
    'stndBlwRslnUrlAdr'?: string;
    /**
     * 콘텐츠저화질파일명
     * @type {string}
     * @memberof MultimediaOutVo
     */
    'stndBlwRslnFileNm'?: string;
    /**
     * 콘텐츠고화질URL주소
     * @type {string}
     * @memberof MultimediaOutVo
     */
    'stndAbvRslnUrlAdr'?: string;
    /**
     * 콘텐츠고화질파일명
     * @type {string}
     * @memberof MultimediaOutVo
     */
    'stndAbvRslnFileNm'?: string;
    /**
     * 사용여부
     * @type {string}
     * @memberof MultimediaOutVo
     */
    'useYn'?: string;
    /**
     * 교육과정분류명경로
     * @type {string}
     * @memberof MultimediaOutVo
     */
    'clsfNmPath'?: string;
}
/**
 * 
 * @export
 * @interface MyPageInVo
 */
export interface MyPageInVo {
    /**
     * 페이지당출력건수
     * @type {number}
     * @memberof MyPageInVo
     */
    'pageSize'?: number;
    /**
     * 페이지번호
     * @type {number}
     * @memberof MyPageInVo
     */
    'pageNo'?: number;
}
/**
 * 
 * @export
 * @interface MySkillCategoryStatisticsDetailInVo
 */
export interface MySkillCategoryStatisticsDetailInVo {
    /**
     * 스킬 분류 값
     * @type {string}
     * @memberof MySkillCategoryStatisticsDetailInVo
     */
    'skllClsfVl'?: string;
}
/**
 * 
 * @export
 * @interface MySkillCategoryStatisticsDetailOutVo
 */
export interface MySkillCategoryStatisticsDetailOutVo {
    /**
     * 스킬 코드
     * @type {string}
     * @memberof MySkillCategoryStatisticsDetailOutVo
     */
    'skllCd'?: string;
    /**
     * 스킬 명
     * @type {string}
     * @memberof MySkillCategoryStatisticsDetailOutVo
     */
    'skllNm'?: string;
    /**
     * 스킬 분류 값
     * @type {string}
     * @memberof MySkillCategoryStatisticsDetailOutVo
     */
    'skllClsfVl'?: string;
    /**
     * 스킬 분류 명
     * @type {string}
     * @memberof MySkillCategoryStatisticsDetailOutVo
     */
    'skllClsfNm'?: string;
    /**
     * 내 점수
     * @type {number}
     * @memberof MySkillCategoryStatisticsDetailOutVo
     */
    'myScore'?: number;
    /**
     * 직급 평균 점수
     * @type {number}
     * @memberof MySkillCategoryStatisticsDetailOutVo
     */
    'positionAvgScore'?: number;
    /**
     * 그룹(본부) 평균 점수
     * @type {number}
     * @memberof MySkillCategoryStatisticsDetailOutVo
     */
    'groupAvgScore'?: number;
    /**
     * 부점 평균 점수
     * @type {number}
     * @memberof MySkillCategoryStatisticsDetailOutVo
     */
    'deptAvgScore'?: number;
}
/**
 * 
 * @export
 * @interface MySkillCategoryStatisticsOutVo
 */
export interface MySkillCategoryStatisticsOutVo {
    /**
     * 스킬 분류 값
     * @type {string}
     * @memberof MySkillCategoryStatisticsOutVo
     */
    'skllClsfVl'?: string;
    /**
     * 스킬 분류 명
     * @type {string}
     * @memberof MySkillCategoryStatisticsOutVo
     */
    'skllClsfNm'?: string;
    /**
     * 내 점수
     * @type {number}
     * @memberof MySkillCategoryStatisticsOutVo
     */
    'myScore'?: number;
    /**
     * 직급 평균 점수
     * @type {number}
     * @memberof MySkillCategoryStatisticsOutVo
     */
    'positionAvgScore'?: number;
    /**
     * 그룹(본부) 평균 점수
     * @type {number}
     * @memberof MySkillCategoryStatisticsOutVo
     */
    'groupAvgScore'?: number;
    /**
     * 부점 평균 점수
     * @type {number}
     * @memberof MySkillCategoryStatisticsOutVo
     */
    'deptAvgScore'?: number;
}
/**
 * 
 * @export
 * @interface MySkillInVo
 */
export interface MySkillInVo {
    /**
     * 스킬 분류 값
     * @type {string}
     * @memberof MySkillInVo
     */
    'skllClsfVl'?: string;
}
/**
 * 
 * @export
 * @interface MySkillOutVo
 */
export interface MySkillOutVo {
    /**
     * 스킬 분류 값
     * @type {string}
     * @memberof MySkillOutVo
     */
    'skllClsfVl'?: string;
    /**
     * 스킬 분류 명
     * @type {string}
     * @memberof MySkillOutVo
     */
    'skllClsfNm'?: string;
    /**
     * 스킬 분류 점수
     * @type {number}
     * @memberof MySkillOutVo
     */
    'skllClsfScore'?: number;
}
/**
 * 
 * @export
 * @interface MyStudyCalendarOutVo
 */
export interface MyStudyCalendarOutVo {
    /**
     * 교육과정코드
     * @type {string}
     * @memberof MyStudyCalendarOutVo
     */
    'dutyEdctCd'?: string;
    /**
     * 연수명
     * @type {string}
     * @memberof MyStudyCalendarOutVo
     */
    'dutyEdctNm'?: string;
    /**
     * 차수번호
     * @type {number}
     * @memberof MyStudyCalendarOutVo
     */
    'edctDsprNo'?: number;
    /**
     * 차수명
     * @type {string}
     * @memberof MyStudyCalendarOutVo
     */
    'edctDsprNm'?: string;
    /**
     * 사용자아이디
     * @type {string}
     * @memberof MyStudyCalendarOutVo
     */
    'userId'?: string;
    /**
     * 사용자이름
     * @type {string}
     * @memberof MyStudyCalendarOutVo
     */
    'userNm'?: string;
    /**
     * 부서명
     * @type {string}
     * @memberof MyStudyCalendarOutVo
     */
    'deptDsncNm'?: string;
    /**
     * 직급
     * @type {string}
     * @memberof MyStudyCalendarOutVo
     */
    'jbttDsncNm'?: string;
    /**
     * 학습시작일
     * @type {string}
     * @memberof MyStudyCalendarOutVo
     */
    'lrngSttgTs'?: string;
    /**
     * 학습종료일
     * @type {string}
     * @memberof MyStudyCalendarOutVo
     */
    'lrngFnshTs'?: string;
    /**
     * 학습인정시간
     * @type {number}
     * @memberof MyStudyCalendarOutVo
     */
    'lrngAcknTim'?: number;
    /**
     * 교육장소
     * @type {string}
     * @memberof MyStudyCalendarOutVo
     */
    'fcltPlacNm'?: string;
}
/**
 * 
 * @export
 * @interface PageAddressOutVo
 */
export interface PageAddressOutVo {
    /**
     * 
     * @type {number}
     * @memberof PageAddressOutVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageAddressOutVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageAddressOutVo
     */
    'ttalDataNbi'?: number;
    /**
     * 
     * @type {Array<AddressOutVo>}
     * @memberof PageAddressOutVo
     */
    'contents'?: Array<AddressOutVo>;
    /**
     * 
     * @type {number}
     * @memberof PageAddressOutVo
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageAddressOutVo
     */
    'pageGrpNoList'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageAddressOutVo
     */
    'contentsNbi'?: number;
}
/**
 * 
 * @export
 * @interface PageApprovalMyOutVo
 */
export interface PageApprovalMyOutVo {
    /**
     * 
     * @type {number}
     * @memberof PageApprovalMyOutVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageApprovalMyOutVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageApprovalMyOutVo
     */
    'ttalDataNbi'?: number;
    /**
     * 
     * @type {Array<ApprovalMyOutVo>}
     * @memberof PageApprovalMyOutVo
     */
    'contents'?: Array<ApprovalMyOutVo>;
    /**
     * 
     * @type {number}
     * @memberof PageApprovalMyOutVo
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageApprovalMyOutVo
     */
    'pageGrpNoList'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageApprovalMyOutVo
     */
    'contentsNbi'?: number;
}
/**
 * 
 * @export
 * @interface PageApprovalOutVo
 */
export interface PageApprovalOutVo {
    /**
     * 
     * @type {number}
     * @memberof PageApprovalOutVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageApprovalOutVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageApprovalOutVo
     */
    'ttalDataNbi'?: number;
    /**
     * 
     * @type {Array<ApprovalOutVo>}
     * @memberof PageApprovalOutVo
     */
    'contents'?: Array<ApprovalOutVo>;
    /**
     * 
     * @type {number}
     * @memberof PageApprovalOutVo
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageApprovalOutVo
     */
    'pageGrpNoList'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageApprovalOutVo
     */
    'contentsNbi'?: number;
}
/**
 * 
 * @export
 * @interface PageAuthMemberUserOutVo
 */
export interface PageAuthMemberUserOutVo {
    /**
     * 
     * @type {number}
     * @memberof PageAuthMemberUserOutVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageAuthMemberUserOutVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageAuthMemberUserOutVo
     */
    'ttalDataNbi'?: number;
    /**
     * 
     * @type {Array<AuthMemberUserOutVo>}
     * @memberof PageAuthMemberUserOutVo
     */
    'contents'?: Array<AuthMemberUserOutVo>;
    /**
     * 
     * @type {number}
     * @memberof PageAuthMemberUserOutVo
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageAuthMemberUserOutVo
     */
    'pageGrpNoList'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageAuthMemberUserOutVo
     */
    'contentsNbi'?: number;
}
/**
 * 
 * @export
 * @interface PageBoardContentsCommentOutVo
 */
export interface PageBoardContentsCommentOutVo {
    /**
     * 
     * @type {number}
     * @memberof PageBoardContentsCommentOutVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageBoardContentsCommentOutVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageBoardContentsCommentOutVo
     */
    'ttalDataNbi'?: number;
    /**
     * 
     * @type {Array<BoardContentsCommentOutVo>}
     * @memberof PageBoardContentsCommentOutVo
     */
    'contents'?: Array<BoardContentsCommentOutVo>;
    /**
     * 
     * @type {number}
     * @memberof PageBoardContentsCommentOutVo
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageBoardContentsCommentOutVo
     */
    'pageGrpNoList'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageBoardContentsCommentOutVo
     */
    'contentsNbi'?: number;
}
/**
 * 
 * @export
 * @interface PageBoardContentsOutVo
 */
export interface PageBoardContentsOutVo {
    /**
     * 
     * @type {number}
     * @memberof PageBoardContentsOutVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageBoardContentsOutVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageBoardContentsOutVo
     */
    'ttalDataNbi'?: number;
    /**
     * 
     * @type {Array<BoardContentsOutVo>}
     * @memberof PageBoardContentsOutVo
     */
    'contents'?: Array<BoardContentsOutVo>;
    /**
     * 
     * @type {number}
     * @memberof PageBoardContentsOutVo
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageBoardContentsOutVo
     */
    'pageGrpNoList'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageBoardContentsOutVo
     */
    'contentsNbi'?: number;
}
/**
 * 
 * @export
 * @interface PageBoardOutVo
 */
export interface PageBoardOutVo {
    /**
     * 
     * @type {number}
     * @memberof PageBoardOutVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageBoardOutVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageBoardOutVo
     */
    'ttalDataNbi'?: number;
    /**
     * 
     * @type {Array<BoardOutVo>}
     * @memberof PageBoardOutVo
     */
    'contents'?: Array<BoardOutVo>;
    /**
     * 
     * @type {number}
     * @memberof PageBoardOutVo
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageBoardOutVo
     */
    'pageGrpNoList'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageBoardOutVo
     */
    'contentsNbi'?: number;
}
/**
 * 
 * @export
 * @interface PageCommonCourseDegreeOutVo
 */
export interface PageCommonCourseDegreeOutVo {
    /**
     * 
     * @type {number}
     * @memberof PageCommonCourseDegreeOutVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageCommonCourseDegreeOutVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageCommonCourseDegreeOutVo
     */
    'ttalDataNbi'?: number;
    /**
     * 
     * @type {Array<CommonCourseDegreeOutVo>}
     * @memberof PageCommonCourseDegreeOutVo
     */
    'contents'?: Array<CommonCourseDegreeOutVo>;
    /**
     * 
     * @type {number}
     * @memberof PageCommonCourseDegreeOutVo
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageCommonCourseDegreeOutVo
     */
    'pageGrpNoList'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageCommonCourseDegreeOutVo
     */
    'contentsNbi'?: number;
}
/**
 * 
 * @export
 * @interface PageCommonSurveyQuestionOutVo
 */
export interface PageCommonSurveyQuestionOutVo {
    /**
     * 
     * @type {number}
     * @memberof PageCommonSurveyQuestionOutVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageCommonSurveyQuestionOutVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageCommonSurveyQuestionOutVo
     */
    'ttalDataNbi'?: number;
    /**
     * 
     * @type {Array<CommonSurveyQuestionOutVo>}
     * @memberof PageCommonSurveyQuestionOutVo
     */
    'contents'?: Array<CommonSurveyQuestionOutVo>;
    /**
     * 
     * @type {number}
     * @memberof PageCommonSurveyQuestionOutVo
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageCommonSurveyQuestionOutVo
     */
    'pageGrpNoList'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageCommonSurveyQuestionOutVo
     */
    'contentsNbi'?: number;
}
/**
 * 
 * @export
 * @interface PageCourseDegreeLessonHistoryOutVo
 */
export interface PageCourseDegreeLessonHistoryOutVo {
    /**
     * 
     * @type {number}
     * @memberof PageCourseDegreeLessonHistoryOutVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageCourseDegreeLessonHistoryOutVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageCourseDegreeLessonHistoryOutVo
     */
    'ttalDataNbi'?: number;
    /**
     * 
     * @type {Array<CourseDegreeLessonHistoryOutVo>}
     * @memberof PageCourseDegreeLessonHistoryOutVo
     */
    'contents'?: Array<CourseDegreeLessonHistoryOutVo>;
    /**
     * 
     * @type {number}
     * @memberof PageCourseDegreeLessonHistoryOutVo
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageCourseDegreeLessonHistoryOutVo
     */
    'pageGrpNoList'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageCourseDegreeLessonHistoryOutVo
     */
    'contentsNbi'?: number;
}
/**
 * 
 * @export
 * @interface PageCourseDegreeMyPageOutVo
 */
export interface PageCourseDegreeMyPageOutVo {
    /**
     * 
     * @type {number}
     * @memberof PageCourseDegreeMyPageOutVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageCourseDegreeMyPageOutVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageCourseDegreeMyPageOutVo
     */
    'ttalDataNbi'?: number;
    /**
     * 
     * @type {Array<CourseDegreeMyPageOutVo>}
     * @memberof PageCourseDegreeMyPageOutVo
     */
    'contents'?: Array<CourseDegreeMyPageOutVo>;
    /**
     * 
     * @type {number}
     * @memberof PageCourseDegreeMyPageOutVo
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageCourseDegreeMyPageOutVo
     */
    'pageGrpNoList'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageCourseDegreeMyPageOutVo
     */
    'contentsNbi'?: number;
}
/**
 * 
 * @export
 * @interface PageCourseInterestOutVo
 */
export interface PageCourseInterestOutVo {
    /**
     * 
     * @type {number}
     * @memberof PageCourseInterestOutVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageCourseInterestOutVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageCourseInterestOutVo
     */
    'ttalDataNbi'?: number;
    /**
     * 
     * @type {Array<CourseInterestOutVo>}
     * @memberof PageCourseInterestOutVo
     */
    'contents'?: Array<CourseInterestOutVo>;
    /**
     * 
     * @type {number}
     * @memberof PageCourseInterestOutVo
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageCourseInterestOutVo
     */
    'pageGrpNoList'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageCourseInterestOutVo
     */
    'contentsNbi'?: number;
}
/**
 * 
 * @export
 * @interface PageCourseLibraryOutVo
 */
export interface PageCourseLibraryOutVo {
    /**
     * 
     * @type {number}
     * @memberof PageCourseLibraryOutVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageCourseLibraryOutVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageCourseLibraryOutVo
     */
    'ttalDataNbi'?: number;
    /**
     * 
     * @type {Array<CourseLibraryOutVo>}
     * @memberof PageCourseLibraryOutVo
     */
    'contents'?: Array<CourseLibraryOutVo>;
    /**
     * 
     * @type {number}
     * @memberof PageCourseLibraryOutVo
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageCourseLibraryOutVo
     */
    'pageGrpNoList'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageCourseLibraryOutVo
     */
    'contentsNbi'?: number;
}
/**
 * 
 * @export
 * @interface PageCourseLikeMyPageOutVo
 */
export interface PageCourseLikeMyPageOutVo {
    /**
     * 
     * @type {number}
     * @memberof PageCourseLikeMyPageOutVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageCourseLikeMyPageOutVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageCourseLikeMyPageOutVo
     */
    'ttalDataNbi'?: number;
    /**
     * 
     * @type {Array<CourseLikeMyPageOutVo>}
     * @memberof PageCourseLikeMyPageOutVo
     */
    'contents'?: Array<CourseLikeMyPageOutVo>;
    /**
     * 
     * @type {number}
     * @memberof PageCourseLikeMyPageOutVo
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageCourseLikeMyPageOutVo
     */
    'pageGrpNoList'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageCourseLikeMyPageOutVo
     */
    'contentsNbi'?: number;
}
/**
 * 
 * @export
 * @interface PageCourseNoticeOutVo
 */
export interface PageCourseNoticeOutVo {
    /**
     * 
     * @type {number}
     * @memberof PageCourseNoticeOutVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageCourseNoticeOutVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageCourseNoticeOutVo
     */
    'ttalDataNbi'?: number;
    /**
     * 
     * @type {Array<CourseNoticeOutVo>}
     * @memberof PageCourseNoticeOutVo
     */
    'contents'?: Array<CourseNoticeOutVo>;
    /**
     * 
     * @type {number}
     * @memberof PageCourseNoticeOutVo
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageCourseNoticeOutVo
     */
    'pageGrpNoList'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageCourseNoticeOutVo
     */
    'contentsNbi'?: number;
}
/**
 * 
 * @export
 * @interface PageCourseQuestionOutVo
 */
export interface PageCourseQuestionOutVo {
    /**
     * 
     * @type {number}
     * @memberof PageCourseQuestionOutVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageCourseQuestionOutVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageCourseQuestionOutVo
     */
    'ttalDataNbi'?: number;
    /**
     * 
     * @type {Array<CourseQuestionOutVo>}
     * @memberof PageCourseQuestionOutVo
     */
    'contents'?: Array<CourseQuestionOutVo>;
    /**
     * 
     * @type {number}
     * @memberof PageCourseQuestionOutVo
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageCourseQuestionOutVo
     */
    'pageGrpNoList'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageCourseQuestionOutVo
     */
    'contentsNbi'?: number;
}
/**
 * 
 * @export
 * @interface PageCourseReviewOutVo
 */
export interface PageCourseReviewOutVo {
    /**
     * 
     * @type {number}
     * @memberof PageCourseReviewOutVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageCourseReviewOutVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageCourseReviewOutVo
     */
    'ttalDataNbi'?: number;
    /**
     * 
     * @type {Array<CourseReviewOutVo>}
     * @memberof PageCourseReviewOutVo
     */
    'contents'?: Array<CourseReviewOutVo>;
    /**
     * 
     * @type {number}
     * @memberof PageCourseReviewOutVo
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageCourseReviewOutVo
     */
    'pageGrpNoList'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageCourseReviewOutVo
     */
    'contentsNbi'?: number;
}
/**
 * 
 * @export
 * @interface PageExamBlbrOutVo
 */
export interface PageExamBlbrOutVo {
    /**
     * 
     * @type {number}
     * @memberof PageExamBlbrOutVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageExamBlbrOutVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageExamBlbrOutVo
     */
    'ttalDataNbi'?: number;
    /**
     * 
     * @type {Array<ExamBlbrOutVo>}
     * @memberof PageExamBlbrOutVo
     */
    'contents'?: Array<ExamBlbrOutVo>;
    /**
     * 
     * @type {number}
     * @memberof PageExamBlbrOutVo
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageExamBlbrOutVo
     */
    'pageGrpNoList'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageExamBlbrOutVo
     */
    'contentsNbi'?: number;
}
/**
 * 
 * @export
 * @interface PageFacilityOutVo
 */
export interface PageFacilityOutVo {
    /**
     * 
     * @type {number}
     * @memberof PageFacilityOutVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageFacilityOutVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageFacilityOutVo
     */
    'ttalDataNbi'?: number;
    /**
     * 
     * @type {Array<FacilityOutVo>}
     * @memberof PageFacilityOutVo
     */
    'contents'?: Array<FacilityOutVo>;
    /**
     * 
     * @type {number}
     * @memberof PageFacilityOutVo
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageFacilityOutVo
     */
    'pageGrpNoList'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageFacilityOutVo
     */
    'contentsNbi'?: number;
}
/**
 * 
 * @export
 * @interface PageFacilityRequestOutVo
 */
export interface PageFacilityRequestOutVo {
    /**
     * 
     * @type {number}
     * @memberof PageFacilityRequestOutVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageFacilityRequestOutVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageFacilityRequestOutVo
     */
    'ttalDataNbi'?: number;
    /**
     * 
     * @type {Array<FacilityRequestOutVo>}
     * @memberof PageFacilityRequestOutVo
     */
    'contents'?: Array<FacilityRequestOutVo>;
    /**
     * 
     * @type {number}
     * @memberof PageFacilityRequestOutVo
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageFacilityRequestOutVo
     */
    'pageGrpNoList'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageFacilityRequestOutVo
     */
    'contentsNbi'?: number;
}
/**
 * 
 * @export
 * @interface PageFaqOutVo
 */
export interface PageFaqOutVo {
    /**
     * 
     * @type {number}
     * @memberof PageFaqOutVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageFaqOutVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageFaqOutVo
     */
    'ttalDataNbi'?: number;
    /**
     * 
     * @type {Array<FaqOutVo>}
     * @memberof PageFaqOutVo
     */
    'contents'?: Array<FaqOutVo>;
    /**
     * 
     * @type {number}
     * @memberof PageFaqOutVo
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageFaqOutVo
     */
    'pageGrpNoList'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageFaqOutVo
     */
    'contentsNbi'?: number;
}
/**
 * 
 * @export
 * @interface PageIdiCostCardOutVo
 */
export interface PageIdiCostCardOutVo {
    /**
     * 
     * @type {number}
     * @memberof PageIdiCostCardOutVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageIdiCostCardOutVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageIdiCostCardOutVo
     */
    'ttalDataNbi'?: number;
    /**
     * 
     * @type {Array<IdiCostCardOutVo>}
     * @memberof PageIdiCostCardOutVo
     */
    'contents'?: Array<IdiCostCardOutVo>;
    /**
     * 
     * @type {number}
     * @memberof PageIdiCostCardOutVo
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageIdiCostCardOutVo
     */
    'pageGrpNoList'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageIdiCostCardOutVo
     */
    'contentsNbi'?: number;
}
/**
 * 
 * @export
 * @interface PageIdiLicenseCourseOutVo
 */
export interface PageIdiLicenseCourseOutVo {
    /**
     * 
     * @type {number}
     * @memberof PageIdiLicenseCourseOutVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageIdiLicenseCourseOutVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageIdiLicenseCourseOutVo
     */
    'ttalDataNbi'?: number;
    /**
     * 
     * @type {Array<IdiLicenseCourseOutVo>}
     * @memberof PageIdiLicenseCourseOutVo
     */
    'contents'?: Array<IdiLicenseCourseOutVo>;
    /**
     * 
     * @type {number}
     * @memberof PageIdiLicenseCourseOutVo
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageIdiLicenseCourseOutVo
     */
    'pageGrpNoList'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageIdiLicenseCourseOutVo
     */
    'contentsNbi'?: number;
}
/**
 * 
 * @export
 * @interface PageIdiLicenseHistoryOutVo
 */
export interface PageIdiLicenseHistoryOutVo {
    /**
     * 
     * @type {number}
     * @memberof PageIdiLicenseHistoryOutVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageIdiLicenseHistoryOutVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageIdiLicenseHistoryOutVo
     */
    'ttalDataNbi'?: number;
    /**
     * 
     * @type {Array<IdiLicenseHistoryOutVo>}
     * @memberof PageIdiLicenseHistoryOutVo
     */
    'contents'?: Array<IdiLicenseHistoryOutVo>;
    /**
     * 
     * @type {number}
     * @memberof PageIdiLicenseHistoryOutVo
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageIdiLicenseHistoryOutVo
     */
    'pageGrpNoList'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageIdiLicenseHistoryOutVo
     */
    'contentsNbi'?: number;
}
/**
 * 
 * @export
 * @interface PageIdiLicenseInterfaceOutVo
 */
export interface PageIdiLicenseInterfaceOutVo {
    /**
     * 
     * @type {number}
     * @memberof PageIdiLicenseInterfaceOutVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageIdiLicenseInterfaceOutVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageIdiLicenseInterfaceOutVo
     */
    'ttalDataNbi'?: number;
    /**
     * 
     * @type {Array<IdiLicenseInterfaceOutVo>}
     * @memberof PageIdiLicenseInterfaceOutVo
     */
    'contents'?: Array<IdiLicenseInterfaceOutVo>;
    /**
     * 
     * @type {number}
     * @memberof PageIdiLicenseInterfaceOutVo
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageIdiLicenseInterfaceOutVo
     */
    'pageGrpNoList'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageIdiLicenseInterfaceOutVo
     */
    'contentsNbi'?: number;
}
/**
 * 
 * @export
 * @interface PageIdiLicenseOutVo
 */
export interface PageIdiLicenseOutVo {
    /**
     * 
     * @type {number}
     * @memberof PageIdiLicenseOutVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageIdiLicenseOutVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageIdiLicenseOutVo
     */
    'ttalDataNbi'?: number;
    /**
     * 
     * @type {Array<IdiLicenseOutVo>}
     * @memberof PageIdiLicenseOutVo
     */
    'contents'?: Array<IdiLicenseOutVo>;
    /**
     * 
     * @type {number}
     * @memberof PageIdiLicenseOutVo
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageIdiLicenseOutVo
     */
    'pageGrpNoList'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageIdiLicenseOutVo
     */
    'contentsNbi'?: number;
}
/**
 * 
 * @export
 * @interface PageIdiLicenseSupplyOutVo
 */
export interface PageIdiLicenseSupplyOutVo {
    /**
     * 
     * @type {number}
     * @memberof PageIdiLicenseSupplyOutVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageIdiLicenseSupplyOutVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageIdiLicenseSupplyOutVo
     */
    'ttalDataNbi'?: number;
    /**
     * 
     * @type {Array<IdiLicenseSupplyOutVo>}
     * @memberof PageIdiLicenseSupplyOutVo
     */
    'contents'?: Array<IdiLicenseSupplyOutVo>;
    /**
     * 
     * @type {number}
     * @memberof PageIdiLicenseSupplyOutVo
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageIdiLicenseSupplyOutVo
     */
    'pageGrpNoList'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageIdiLicenseSupplyOutVo
     */
    'contentsNbi'?: number;
}
/**
 * 
 * @export
 * @interface PageIdiMileageEtcOutVo
 */
export interface PageIdiMileageEtcOutVo {
    /**
     * 
     * @type {number}
     * @memberof PageIdiMileageEtcOutVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageIdiMileageEtcOutVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageIdiMileageEtcOutVo
     */
    'ttalDataNbi'?: number;
    /**
     * 
     * @type {Array<IdiMileageEtcOutVo>}
     * @memberof PageIdiMileageEtcOutVo
     */
    'contents'?: Array<IdiMileageEtcOutVo>;
    /**
     * 
     * @type {number}
     * @memberof PageIdiMileageEtcOutVo
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageIdiMileageEtcOutVo
     */
    'pageGrpNoList'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageIdiMileageEtcOutVo
     */
    'contentsNbi'?: number;
}
/**
 * 
 * @export
 * @interface PageIdiMileageLearningOutVo
 */
export interface PageIdiMileageLearningOutVo {
    /**
     * 
     * @type {number}
     * @memberof PageIdiMileageLearningOutVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageIdiMileageLearningOutVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageIdiMileageLearningOutVo
     */
    'ttalDataNbi'?: number;
    /**
     * 
     * @type {Array<IdiMileageLearningOutVo>}
     * @memberof PageIdiMileageLearningOutVo
     */
    'contents'?: Array<IdiMileageLearningOutVo>;
    /**
     * 
     * @type {number}
     * @memberof PageIdiMileageLearningOutVo
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageIdiMileageLearningOutVo
     */
    'pageGrpNoList'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageIdiMileageLearningOutVo
     */
    'contentsNbi'?: number;
}
/**
 * 
 * @export
 * @interface PageIdiMileageLicenseOutVo
 */
export interface PageIdiMileageLicenseOutVo {
    /**
     * 
     * @type {number}
     * @memberof PageIdiMileageLicenseOutVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageIdiMileageLicenseOutVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageIdiMileageLicenseOutVo
     */
    'ttalDataNbi'?: number;
    /**
     * 
     * @type {Array<IdiMileageLicenseOutVo>}
     * @memberof PageIdiMileageLicenseOutVo
     */
    'contents'?: Array<IdiMileageLicenseOutVo>;
    /**
     * 
     * @type {number}
     * @memberof PageIdiMileageLicenseOutVo
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageIdiMileageLicenseOutVo
     */
    'pageGrpNoList'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageIdiMileageLicenseOutVo
     */
    'contentsNbi'?: number;
}
/**
 * 
 * @export
 * @interface PageIdiMileageRequestOutVo
 */
export interface PageIdiMileageRequestOutVo {
    /**
     * 
     * @type {number}
     * @memberof PageIdiMileageRequestOutVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageIdiMileageRequestOutVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageIdiMileageRequestOutVo
     */
    'ttalDataNbi'?: number;
    /**
     * 
     * @type {Array<IdiMileageRequestOutVo>}
     * @memberof PageIdiMileageRequestOutVo
     */
    'contents'?: Array<IdiMileageRequestOutVo>;
    /**
     * 
     * @type {number}
     * @memberof PageIdiMileageRequestOutVo
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageIdiMileageRequestOutVo
     */
    'pageGrpNoList'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageIdiMileageRequestOutVo
     */
    'contentsNbi'?: number;
}
/**
 * 
 * @export
 * @interface PageIdiSupportDevDescOutVo
 */
export interface PageIdiSupportDevDescOutVo {
    /**
     * 
     * @type {number}
     * @memberof PageIdiSupportDevDescOutVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageIdiSupportDevDescOutVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageIdiSupportDevDescOutVo
     */
    'ttalDataNbi'?: number;
    /**
     * 
     * @type {Array<IdiSupportDevDescOutVo>}
     * @memberof PageIdiSupportDevDescOutVo
     */
    'contents'?: Array<IdiSupportDevDescOutVo>;
    /**
     * 
     * @type {number}
     * @memberof PageIdiSupportDevDescOutVo
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageIdiSupportDevDescOutVo
     */
    'pageGrpNoList'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageIdiSupportDevDescOutVo
     */
    'contentsNbi'?: number;
}
/**
 * 
 * @export
 * @interface PageMasterCourseListOutVo
 */
export interface PageMasterCourseListOutVo {
    /**
     * 
     * @type {number}
     * @memberof PageMasterCourseListOutVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageMasterCourseListOutVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageMasterCourseListOutVo
     */
    'ttalDataNbi'?: number;
    /**
     * 
     * @type {Array<MasterCourseListOutVo>}
     * @memberof PageMasterCourseListOutVo
     */
    'contents'?: Array<MasterCourseListOutVo>;
    /**
     * 
     * @type {number}
     * @memberof PageMasterCourseListOutVo
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageMasterCourseListOutVo
     */
    'pageGrpNoList'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageMasterCourseListOutVo
     */
    'contentsNbi'?: number;
}
/**
 * 
 * @export
 * @interface PagePopupOutVo
 */
export interface PagePopupOutVo {
    /**
     * 
     * @type {number}
     * @memberof PagePopupOutVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PagePopupOutVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof PagePopupOutVo
     */
    'ttalDataNbi'?: number;
    /**
     * 
     * @type {Array<PopupOutVo>}
     * @memberof PagePopupOutVo
     */
    'contents'?: Array<PopupOutVo>;
    /**
     * 
     * @type {number}
     * @memberof PagePopupOutVo
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PagePopupOutVo
     */
    'pageGrpNoList'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PagePopupOutVo
     */
    'contentsNbi'?: number;
}
/**
 * 
 * @export
 * @interface PageQuestionOutVo
 */
export interface PageQuestionOutVo {
    /**
     * 
     * @type {number}
     * @memberof PageQuestionOutVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageQuestionOutVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageQuestionOutVo
     */
    'ttalDataNbi'?: number;
    /**
     * 
     * @type {Array<QuestionOutVo>}
     * @memberof PageQuestionOutVo
     */
    'contents'?: Array<QuestionOutVo>;
    /**
     * 
     * @type {number}
     * @memberof PageQuestionOutVo
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageQuestionOutVo
     */
    'pageGrpNoList'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageQuestionOutVo
     */
    'contentsNbi'?: number;
}
/**
 * 
 * @export
 * @interface PageResortFacilityApprovalOutVo
 */
export interface PageResortFacilityApprovalOutVo {
    /**
     * 
     * @type {number}
     * @memberof PageResortFacilityApprovalOutVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageResortFacilityApprovalOutVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageResortFacilityApprovalOutVo
     */
    'ttalDataNbi'?: number;
    /**
     * 
     * @type {Array<ResortFacilityApprovalOutVo>}
     * @memberof PageResortFacilityApprovalOutVo
     */
    'contents'?: Array<ResortFacilityApprovalOutVo>;
    /**
     * 
     * @type {number}
     * @memberof PageResortFacilityApprovalOutVo
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageResortFacilityApprovalOutVo
     */
    'pageGrpNoList'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageResortFacilityApprovalOutVo
     */
    'contentsNbi'?: number;
}
/**
 * 
 * @export
 * @interface PageResortFacilityOutVo
 */
export interface PageResortFacilityOutVo {
    /**
     * 
     * @type {number}
     * @memberof PageResortFacilityOutVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageResortFacilityOutVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageResortFacilityOutVo
     */
    'ttalDataNbi'?: number;
    /**
     * 
     * @type {Array<ResortFacilityOutVo>}
     * @memberof PageResortFacilityOutVo
     */
    'contents'?: Array<ResortFacilityOutVo>;
    /**
     * 
     * @type {number}
     * @memberof PageResortFacilityOutVo
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageResortFacilityOutVo
     */
    'pageGrpNoList'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageResortFacilityOutVo
     */
    'contentsNbi'?: number;
}
/**
 * 
 * @export
 * @interface PageResortFacilityRequestMyOutVo
 */
export interface PageResortFacilityRequestMyOutVo {
    /**
     * 
     * @type {number}
     * @memberof PageResortFacilityRequestMyOutVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageResortFacilityRequestMyOutVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageResortFacilityRequestMyOutVo
     */
    'ttalDataNbi'?: number;
    /**
     * 
     * @type {Array<ResortFacilityRequestMyOutVo>}
     * @memberof PageResortFacilityRequestMyOutVo
     */
    'contents'?: Array<ResortFacilityRequestMyOutVo>;
    /**
     * 
     * @type {number}
     * @memberof PageResortFacilityRequestMyOutVo
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageResortFacilityRequestMyOutVo
     */
    'pageGrpNoList'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageResortFacilityRequestMyOutVo
     */
    'contentsNbi'?: number;
}
/**
 * 
 * @export
 * @interface PageResortFacilityRequestOutVo
 */
export interface PageResortFacilityRequestOutVo {
    /**
     * 
     * @type {number}
     * @memberof PageResortFacilityRequestOutVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageResortFacilityRequestOutVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageResortFacilityRequestOutVo
     */
    'ttalDataNbi'?: number;
    /**
     * 
     * @type {Array<ResortFacilityRequestOutVo>}
     * @memberof PageResortFacilityRequestOutVo
     */
    'contents'?: Array<ResortFacilityRequestOutVo>;
    /**
     * 
     * @type {number}
     * @memberof PageResortFacilityRequestOutVo
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageResortFacilityRequestOutVo
     */
    'pageGrpNoList'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageResortFacilityRequestOutVo
     */
    'contentsNbi'?: number;
}
/**
 * 
 * @export
 * @interface PageSklRoadmapCourseOutVo
 */
export interface PageSklRoadmapCourseOutVo {
    /**
     * 
     * @type {number}
     * @memberof PageSklRoadmapCourseOutVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageSklRoadmapCourseOutVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageSklRoadmapCourseOutVo
     */
    'ttalDataNbi'?: number;
    /**
     * 
     * @type {Array<SklRoadmapCourseOutVo>}
     * @memberof PageSklRoadmapCourseOutVo
     */
    'contents'?: Array<SklRoadmapCourseOutVo>;
    /**
     * 
     * @type {number}
     * @memberof PageSklRoadmapCourseOutVo
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageSklRoadmapCourseOutVo
     */
    'pageGrpNoList'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageSklRoadmapCourseOutVo
     */
    'contentsNbi'?: number;
}
/**
 * 
 * @export
 * @interface PageSocialLearningOutVo
 */
export interface PageSocialLearningOutVo {
    /**
     * 
     * @type {number}
     * @memberof PageSocialLearningOutVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageSocialLearningOutVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageSocialLearningOutVo
     */
    'ttalDataNbi'?: number;
    /**
     * 
     * @type {Array<SocialLearningOutVo>}
     * @memberof PageSocialLearningOutVo
     */
    'contents'?: Array<SocialLearningOutVo>;
    /**
     * 
     * @type {number}
     * @memberof PageSocialLearningOutVo
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageSocialLearningOutVo
     */
    'pageGrpNoList'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageSocialLearningOutVo
     */
    'contentsNbi'?: number;
}
/**
 * 
 * @export
 * @interface PageStudyRoomHistoryOutVo
 */
export interface PageStudyRoomHistoryOutVo {
    /**
     * 
     * @type {number}
     * @memberof PageStudyRoomHistoryOutVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageStudyRoomHistoryOutVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageStudyRoomHistoryOutVo
     */
    'ttalDataNbi'?: number;
    /**
     * 
     * @type {Array<StudyRoomHistoryOutVo>}
     * @memberof PageStudyRoomHistoryOutVo
     */
    'contents'?: Array<StudyRoomHistoryOutVo>;
    /**
     * 
     * @type {number}
     * @memberof PageStudyRoomHistoryOutVo
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageStudyRoomHistoryOutVo
     */
    'pageGrpNoList'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageStudyRoomHistoryOutVo
     */
    'contentsNbi'?: number;
}
/**
 * 
 * @export
 * @interface PageStudyRoomProgressOutVo
 */
export interface PageStudyRoomProgressOutVo {
    /**
     * 
     * @type {number}
     * @memberof PageStudyRoomProgressOutVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageStudyRoomProgressOutVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageStudyRoomProgressOutVo
     */
    'ttalDataNbi'?: number;
    /**
     * 
     * @type {Array<object>}
     * @memberof PageStudyRoomProgressOutVo
     */
    'contents'?: Array<object>;
    /**
     * 
     * @type {number}
     * @memberof PageStudyRoomProgressOutVo
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageStudyRoomProgressOutVo
     */
    'pageGrpNoList'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageStudyRoomProgressOutVo
     */
    'contentsNbi'?: number;
}
/**
 * 
 * @export
 * @interface PageUserOutVo
 */
export interface PageUserOutVo {
    /**
     * 
     * @type {number}
     * @memberof PageUserOutVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageUserOutVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageUserOutVo
     */
    'ttalDataNbi'?: number;
    /**
     * 
     * @type {Array<UserOutVo>}
     * @memberof PageUserOutVo
     */
    'contents'?: Array<UserOutVo>;
    /**
     * 
     * @type {number}
     * @memberof PageUserOutVo
     */
    'totalPages'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageUserOutVo
     */
    'pageGrpNoList'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageUserOutVo
     */
    'contentsNbi'?: number;
}
/**
 * 
 * @export
 * @interface PopupInVo
 */
export interface PopupInVo {
    /**
     * 팝업 아이디
     * @type {number}
     * @memberof PopupInVo
     */
    'ppupId'?: number;
    /**
     * 팝업 타이틀명
     * @type {string}
     * @memberof PopupInVo
     */
    'ppupTtlNm'?: string;
    /**
     * 팝업 내용
     * @type {string}
     * @memberof PopupInVo
     */
    'ppupCon'?: string;
    /**
     * 노출시작년월일
     * @type {string}
     * @memberof PopupInVo
     */
    'expuSttgYmd'?: string;
    /**
     * 노출종료년월일
     * @type {string}
     * @memberof PopupInVo
     */
    'expuFnshYmd'?: string;
    /**
     * 사용 여부
     * @type {string}
     * @memberof PopupInVo
     */
    'useYn'?: string;
}
/**
 * 
 * @export
 * @interface PopupOutVo
 */
export interface PopupOutVo {
    /**
     * 
     * @type {string}
     * @memberof PopupOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof PopupOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PopupOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PopupOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof PopupOutVo
     */
    'cncrName'?: string;
    /**
     * 팝업 아이디
     * @type {number}
     * @memberof PopupOutVo
     */
    'ppupId'?: number;
    /**
     * 팝업 타이틀명
     * @type {string}
     * @memberof PopupOutVo
     */
    'ppupTtlNm'?: string;
    /**
     * 팝업 내용
     * @type {string}
     * @memberof PopupOutVo
     */
    'ppupCon'?: string;
    /**
     * 노출시작년월일
     * @type {string}
     * @memberof PopupOutVo
     */
    'expuSttgYmd'?: string;
    /**
     * 노출종료년월일
     * @type {string}
     * @memberof PopupOutVo
     */
    'expuFnshYmd'?: string;
    /**
     * 사용 여부
     * @type {string}
     * @memberof PopupOutVo
     */
    'useYn'?: string;
    /**
     * 첨부파일 갯수
     * @type {string}
     * @memberof PopupOutVo
     */
    'atchCount'?: string;
    /**
     * 첨부파일 리스트
     * @type {Array<CommonAttachFileOutVo>}
     * @memberof PopupOutVo
     */
    'commonAttachFileOutList'?: Array<CommonAttachFileOutVo>;
}
/**
 * 
 * @export
 * @interface PopupPageInqInVo
 */
export interface PopupPageInqInVo {
    /**
     * 
     * @type {number}
     * @memberof PopupPageInqInVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PopupPageInqInVo
     */
    'pageNo'?: number;
    /**
     * 팝업 타이틀
     * @type {string}
     * @memberof PopupPageInqInVo
     */
    'ppupTtlNm'?: string;
    /**
     * 사용여부
     * @type {string}
     * @memberof PopupPageInqInVo
     */
    'useYn'?: string;
}
/**
 * 
 * @export
 * @interface PreviousAddressOutVo
 */
export interface PreviousAddressOutVo {
    /**
     * 
     * @type {string}
     * @memberof PreviousAddressOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof PreviousAddressOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PreviousAddressOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PreviousAddressOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof PreviousAddressOutVo
     */
    'cncrName'?: string;
    /**
     * 우편번호
     * @type {string}
     * @memberof PreviousAddressOutVo
     */
    'dlplPssrNo'?: string;
    /**
     * 배송지기본주소
     * @type {string}
     * @memberof PreviousAddressOutVo
     */
    'dlplBscAdr'?: string;
    /**
     * 배송지상세주소
     * @type {string}
     * @memberof PreviousAddressOutVo
     */
    'dlplDtlAdr'?: string;
    /**
     * 휴대폰번호
     * @type {string}
     * @memberof PreviousAddressOutVo
     */
    'cpn'?: string;
    /**
     * 회사전화번호
     * @type {string}
     * @memberof PreviousAddressOutVo
     */
    'cmpnTpn'?: string;
    /**
     * 이메일
     * @type {string}
     * @memberof PreviousAddressOutVo
     */
    'ead'?: string;
}
/**
 * 
 * @export
 * @interface QuestionAnswerDeleteInVo
 */
export interface QuestionAnswerDeleteInVo {
    /**
     * 문의글 아이디
     * @type {number}
     * @memberof QuestionAnswerDeleteInVo
     */
    'blbrQstnId'?: number;
    /**
     * 답변 아이디
     * @type {number}
     * @memberof QuestionAnswerDeleteInVo
     */
    'blbrQsrpId'?: number;
}
/**
 * 
 * @export
 * @interface QuestionAnswerInVo
 */
export interface QuestionAnswerInVo {
    /**
     * 문의글 아이디
     * @type {number}
     * @memberof QuestionAnswerInVo
     */
    'blbrQstnId'?: number;
    /**
     * 답변 아이디
     * @type {number}
     * @memberof QuestionAnswerInVo
     */
    'blbrQsrpId'?: number;
    /**
     * 답변 내용
     * @type {string}
     * @memberof QuestionAnswerInVo
     */
    'rplyCon'?: string;
    /**
     * 사용 여부
     * @type {string}
     * @memberof QuestionAnswerInVo
     */
    'useYn'?: string;
    /**
     * 첨부파일 삭제 리스트
     * @type {Array<CommonAttachFileDeleteInVo>}
     * @memberof QuestionAnswerInVo
     */
    'questionAnswerDeleteAtchList'?: Array<CommonAttachFileDeleteInVo>;
}
/**
 * 
 * @export
 * @interface QuestionAnswerOutVo
 */
export interface QuestionAnswerOutVo {
    /**
     * 문의글 아이디
     * @type {number}
     * @memberof QuestionAnswerOutVo
     */
    'blbrQstnId'?: number;
    /**
     * 답변 아이디
     * @type {number}
     * @memberof QuestionAnswerOutVo
     */
    'blbrQsrpId'?: number;
    /**
     * 답변 내용
     * @type {string}
     * @memberof QuestionAnswerOutVo
     */
    'rplyCon'?: string;
    /**
     * 사용 여부
     * @type {string}
     * @memberof QuestionAnswerOutVo
     */
    'useYn'?: string;
    /**
     * 질문 등록 일
     * @type {string}
     * @memberof QuestionAnswerOutVo
     */
    'cretTs'?: string;
    /**
     * 질문 등록 아이디
     * @type {string}
     * @memberof QuestionAnswerOutVo
     */
    'cncrId'?: string;
    /**
     * 첨부파일 리스트
     * @type {Array<CommonAttachFileOutVo>}
     * @memberof QuestionAnswerOutVo
     */
    'answerAttachFileOutList'?: Array<CommonAttachFileOutVo>;
}
/**
 * 
 * @export
 * @interface QuestionDeleteInVo
 */
export interface QuestionDeleteInVo {
    /**
     * 문의글 아이디
     * @type {number}
     * @memberof QuestionDeleteInVo
     */
    'blbrQstnId'?: number;
}
/**
 * 
 * @export
 * @interface QuestionInVo
 */
export interface QuestionInVo {
    /**
     * 문의글 아이디
     * @type {number}
     * @memberof QuestionInVo
     */
    'blbrQstnId'?: number;
    /**
     * 질문 타이틀 명
     * @type {string}
     * @memberof QuestionInVo
     */
    'blbrQstnTtlNm'?: string;
    /**
     * 질문 내용
     * @type {string}
     * @memberof QuestionInVo
     */
    'qstnCon'?: string;
    /**
     * 비밀글여부
     * @type {string}
     * @memberof QuestionInVo
     */
    'secrtPtngYn'?: string;
    /**
     * 사용 여부
     * @type {string}
     * @memberof QuestionInVo
     */
    'useYn'?: string;
    /**
     * 첨부파일 삭제 리스트
     * @type {Array<CommonAttachFileDeleteInVo>}
     * @memberof QuestionInVo
     */
    'questionDeleteAtchList'?: Array<CommonAttachFileDeleteInVo>;
    /**
     * 
     * @type {Array<CommonAttachFilehInVo>}
     * @memberof QuestionInVo
     */
    'atchList'?: Array<CommonAttachFilehInVo>;
}
/**
 * 
 * @export
 * @interface QuestionOutVo
 */
export interface QuestionOutVo {
    /**
     * 질문 타이틀 명
     * @type {string}
     * @memberof QuestionOutVo
     */
    'blbrQstnTtlNm'?: string;
    /**
     * 질문 내용
     * @type {string}
     * @memberof QuestionOutVo
     */
    'qstnCon'?: string;
    /**
     * 비밀글여부
     * @type {string}
     * @memberof QuestionOutVo
     */
    'secrtPtngYn'?: string;
    /**
     * 사용 여부
     * @type {string}
     * @memberof QuestionOutVo
     */
    'useYn'?: string;
    /**
     * 질문 등록 일
     * @type {string}
     * @memberof QuestionOutVo
     */
    'cretTs'?: string;
    /**
     * 질문 등록 아이디
     * @type {string}
     * @memberof QuestionOutVo
     */
    'cncrId'?: string;
    /**
     * 등록자이름
     * @type {string}
     * @memberof QuestionOutVo
     */
    'cncrName'?: string;
    /**
     * 답변 내용
     * @type {string}
     * @memberof QuestionOutVo
     */
    'rplyCon'?: string;
    /**
     * 답변 사용 여부
     * @type {string}
     * @memberof QuestionOutVo
     */
    'answUseYn'?: string;
    /**
     * 답변 등록 일
     * @type {string}
     * @memberof QuestionOutVo
     */
    'answCretTs'?: string;
    /**
     * 답변 등록 아이디
     * @type {string}
     * @memberof QuestionOutVo
     */
    'answCncrId'?: string;
    /**
     * 답변자이름
     * @type {string}
     * @memberof QuestionOutVo
     */
    'answCncrName'?: string;
    /**
     * 첨부파일 리스트
     * @type {Array<CommonAttachFileOutVo>}
     * @memberof QuestionOutVo
     */
    'questionAttachFileOutList'?: Array<CommonAttachFileOutVo>;
    /**
     * 답변 첨부파일 리스트
     * @type {Array<CommonAttachFileOutVo>}
     * @memberof QuestionOutVo
     */
    'answerAttachFileOutList'?: Array<CommonAttachFileOutVo>;
}
/**
 * 
 * @export
 * @interface QuestionPageInqInVo
 */
export interface QuestionPageInqInVo {
    /**
     * 
     * @type {number}
     * @memberof QuestionPageInqInVo
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof QuestionPageInqInVo
     */
    'pageNo'?: number;
    /**
     * 
     * @type {string}
     * @memberof QuestionPageInqInVo
     */
    'blbrQstnTtlNm'?: string;
}
/**
 * 
 * @export
 * @interface ReportOutVo
 */
export interface ReportOutVo {
    /**
     * 
     * @type {string}
     * @memberof ReportOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof ReportOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ReportOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ReportOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof ReportOutVo
     */
    'cncrName'?: string;
    /**
     * 교육 과정코드
     * @type {string}
     * @memberof ReportOutVo
     */
    'dutyEdctCd'?: string;
    /**
     * 차수 번호
     * @type {number}
     * @memberof ReportOutVo
     */
    'edctDsprNo'?: number;
    /**
     * 수챕터번호
     * @type {number}
     * @memberof ReportOutVo
     */
    'edctDsprChpaNo'?: number;
    /**
     * 레슨번호
     * @type {number}
     * @memberof ReportOutVo
     */
    'edctDsprLssoNo'?: number;
    /**
     * 회원아이디
     * @type {string}
     * @memberof ReportOutVo
     */
    'userId'?: string;
    /**
     * 파일순번
     * @type {number}
     * @memberof ReportOutVo
     */
    'hstSrn'?: number;
    /**
     * 과제명
     * @type {string}
     * @memberof ReportOutVo
     */
    'taskNm'?: string;
    /**
     * 과제내용
     * @type {string}
     * @memberof ReportOutVo
     */
    'taskCon'?: string;
    /**
     * 원본파일명
     * @type {string}
     * @memberof ReportOutVo
     */
    'orcpFileNm'?: string;
    /**
     * 저장파일명
     * @type {string}
     * @memberof ReportOutVo
     */
    'strgFileNm'?: string;
    /**
     * 파일URL주소
     * @type {string}
     * @memberof ReportOutVo
     */
    'fileUrlAdr'?: string;
    /**
     * 클라우드파일URL주소
     * @type {string}
     * @memberof ReportOutVo
     */
    'cldFileUrlAdr'?: string;
    /**
     * 파일확장자명
     * @type {string}
     * @memberof ReportOutVo
     */
    'fileEtnsNm'?: string;
    /**
     * 파일크기값
     * @type {number}
     * @memberof ReportOutVo
     */
    'flszVl'?: number;
}
/**
 * 
 * @export
 * @interface ResetPwdInVo
 */
export interface ResetPwdInVo {
    /**
     * 회원 유형
     * @type {string}
     * @memberof ResetPwdInVo
     */
    'userPtrnVl'?: string;
    /**
     * 직원 번호
     * @type {string}
     * @memberof ResetPwdInVo
     */
    'userId'?: string;
    /**
     * 이름
     * @type {string}
     * @memberof ResetPwdInVo
     */
    'userNm'?: string;
    /**
     * 생년월일
     * @type {string}
     * @memberof ResetPwdInVo
     */
    'birtYmd'?: string;
    /**
     * 휴대폰 번호
     * @type {string}
     * @memberof ResetPwdInVo
     */
    'cpn'?: string;
    /**
     * 전송 타입
     * @type {string}
     * @memberof ResetPwdInVo
     */
    'sendTp'?: ResetPwdInVoSendTpEnum;
}

export const ResetPwdInVoSendTpEnum = {
    Sms: 'SMS',
    Email: 'EMAIL'
} as const;

export type ResetPwdInVoSendTpEnum = typeof ResetPwdInVoSendTpEnum[keyof typeof ResetPwdInVoSendTpEnum];

/**
 * 
 * @export
 * @interface ResortFacilityApprovalInVo
 */
export interface ResortFacilityApprovalInVo {
    /**
     * 휴양시설운영년
     * @type {string}
     * @memberof ResortFacilityApprovalInVo
     */
    'vcfcOprtYy'?: string;
    /**
     * 시설코드
     * @type {string}
     * @memberof ResortFacilityApprovalInVo
     */
    'trngFcltDcd'?: string;
    /**
     * 시설장소유형코드
     * @type {string}
     * @memberof ResortFacilityApprovalInVo
     */
    'fcltPsiDcd'?: string;
    /**
     * 객실타입코드
     * @type {string}
     * @memberof ResortFacilityApprovalInVo
     */
    'gsrmTcd'?: string;
    /**
     * 회차
     * @type {number}
     * @memberof ResortFacilityApprovalInVo
     */
    'tob'?: number;
    /**
     * 사용자ID
     * @type {string}
     * @memberof ResortFacilityApprovalInVo
     */
    'userId'?: string;
    /**
     * 신청일
     * @type {string}
     * @memberof ResortFacilityApprovalInVo
     */
    'aplcTs'?: string;
    /**
     * 결제신청서번호
     * @type {number}
     * @memberof ResortFacilityApprovalInVo
     */
    'snctApfrNo'?: number;
    /**
     * 휴양시설입실년월일
     * @type {string}
     * @memberof ResortFacilityApprovalInVo
     */
    'vcfcCkinYmd'?: string;
    /**
     * 휴양시설퇴실년월일
     * @type {string}
     * @memberof ResortFacilityApprovalInVo
     */
    'vcfcCcotYmd'?: string;
    /**
     * 숙박일수
     * @type {number}
     * @memberof ResortFacilityApprovalInVo
     */
    'ldgnNdd'?: number;
    /**
     * 휴양시설배정여부
     * @type {string}
     * @memberof ResortFacilityApprovalInVo
     */
    'vcfcAlctYn'?: string;
    /**
     * 휴양시설배정호수
     * @type {string}
     * @memberof ResortFacilityApprovalInVo
     */
    'vcfcAlctRnm'?: string;
    /**
     * 예약번호
     * @type {string}
     * @memberof ResortFacilityApprovalInVo
     */
    'rsvtNo'?: string;
    /**
     * 비고내용
     * @type {string}
     * @memberof ResortFacilityApprovalInVo
     */
    'rmrkCon'?: string;
    /**
     * 휴양시설적용점수
     * @type {number}
     * @memberof ResortFacilityApprovalInVo
     */
    'vcfcAplyScr'?: number;
    /**
     * 비상전화번호
     * @type {string}
     * @memberof ResortFacilityApprovalInVo
     */
    'emrnTpn'?: string;
    /**
     * 차량번호
     * @type {string}
     * @memberof ResortFacilityApprovalInVo
     */
    'vhclNo'?: string;
    /**
     * 동의여부
     * @type {string}
     * @memberof ResortFacilityApprovalInVo
     */
    'cosnYn'?: string;
    /**
     * 사용 여부
     * @type {string}
     * @memberof ResortFacilityApprovalInVo
     */
    'useYn'?: string;
}
/**
 * 
 * @export
 * @interface ResortFacilityApprovalOutVo
 */
export interface ResortFacilityApprovalOutVo {
    /**
     * 
     * @type {string}
     * @memberof ResortFacilityApprovalOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResortFacilityApprovalOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResortFacilityApprovalOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResortFacilityApprovalOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResortFacilityApprovalOutVo
     */
    'cncrName'?: string;
    /**
     * 휴양시설운영년
     * @type {string}
     * @memberof ResortFacilityApprovalOutVo
     */
    'vcfcOprtYy'?: string;
    /**
     * 시설코드
     * @type {string}
     * @memberof ResortFacilityApprovalOutVo
     */
    'trngFcltDcd'?: string;
    /**
     * 시설코드명
     * @type {string}
     * @memberof ResortFacilityApprovalOutVo
     */
    'fcltCdNm'?: string;
    /**
     * 시설장소유형코드
     * @type {string}
     * @memberof ResortFacilityApprovalOutVo
     */
    'fcltPsiDcd'?: string;
    /**
     * 시설장소유형코드명
     * @type {string}
     * @memberof ResortFacilityApprovalOutVo
     */
    'fcltPlacTcdNm'?: string;
    /**
     * 객실타입코드
     * @type {string}
     * @memberof ResortFacilityApprovalOutVo
     */
    'gsrmTcd'?: string;
    /**
     * 객실타입코드명
     * @type {string}
     * @memberof ResortFacilityApprovalOutVo
     */
    'gsrmTypeCdNm'?: string;
    /**
     * 회차
     * @type {number}
     * @memberof ResortFacilityApprovalOutVo
     */
    'tob'?: number;
    /**
     * 사용자ID
     * @type {string}
     * @memberof ResortFacilityApprovalOutVo
     */
    'userId'?: string;
    /**
     * 사용자이름
     * @type {string}
     * @memberof ResortFacilityApprovalOutVo
     */
    'userNm'?: string;
    /**
     * 직급
     * @type {string}
     * @memberof ResortFacilityApprovalOutVo
     */
    'jbclCd'?: string;
    /**
     * 직책
     * @type {string}
     * @memberof ResortFacilityApprovalOutVo
     */
    'rsptDsncNm'?: string;
    /**
     * 소숮부점
     * @type {string}
     * @memberof ResortFacilityApprovalOutVo
     */
    'arhdDsncNm'?: string;
    /**
     * 입행일
     * @type {string}
     * @memberof ResortFacilityApprovalOutVo
     */
    'etbnYmd'?: string;
    /**
     * 신청일
     * @type {string}
     * @memberof ResortFacilityApprovalOutVo
     */
    'aplcTs'?: string;
    /**
     * 결제신청서번호
     * @type {number}
     * @memberof ResortFacilityApprovalOutVo
     */
    'snctApfrNo'?: number;
    /**
     * 휴양시설입실년월일
     * @type {string}
     * @memberof ResortFacilityApprovalOutVo
     */
    'vcfcCkinYmd'?: string;
    /**
     * 휴양시설퇴실년월일
     * @type {string}
     * @memberof ResortFacilityApprovalOutVo
     */
    'vcfcCcotYmd'?: string;
    /**
     * 숙박일수
     * @type {number}
     * @memberof ResortFacilityApprovalOutVo
     */
    'ldgnNdd'?: number;
    /**
     * 휴양시설배정여부
     * @type {string}
     * @memberof ResortFacilityApprovalOutVo
     */
    'vcfcAlctYn'?: string;
    /**
     * 휴양시설배정상태
     * @type {string}
     * @memberof ResortFacilityApprovalOutVo
     */
    'vcfcAlctSts'?: string;
    /**
     * 휴양시설배정호수
     * @type {string}
     * @memberof ResortFacilityApprovalOutVo
     */
    'vcfcAlctRnm'?: string;
    /**
     * 휴양시설배정자ID
     * @type {string}
     * @memberof ResortFacilityApprovalOutVo
     */
    'vcfcPwwaId'?: string;
    /**
     * 휴양시설배정자명
     * @type {string}
     * @memberof ResortFacilityApprovalOutVo
     */
    'vcfcPwwaNm'?: string;
    /**
     * 휴양시설배정년월일
     * @type {string}
     * @memberof ResortFacilityApprovalOutVo
     */
    'vcfcAlctYmd'?: string;
    /**
     * 예약번호
     * @type {string}
     * @memberof ResortFacilityApprovalOutVo
     */
    'rsvtNo'?: string;
    /**
     * 비고내용
     * @type {string}
     * @memberof ResortFacilityApprovalOutVo
     */
    'rmrkCon'?: string;
    /**
     * 휴양시설적용점수
     * @type {number}
     * @memberof ResortFacilityApprovalOutVo
     */
    'vcfcAplyScr'?: number;
    /**
     * 비상전화번호
     * @type {string}
     * @memberof ResortFacilityApprovalOutVo
     */
    'emrnTpn'?: string;
    /**
     * 차량번호
     * @type {string}
     * @memberof ResortFacilityApprovalOutVo
     */
    'vhclNo'?: string;
    /**
     * 동의여부
     * @type {string}
     * @memberof ResortFacilityApprovalOutVo
     */
    'cosnYn'?: string;
    /**
     * 사용 여부
     * @type {string}
     * @memberof ResortFacilityApprovalOutVo
     */
    'useYn'?: string;
    /**
     * 휴양시설이용횟수
     * @type {number}
     * @memberof ResortFacilityApprovalOutVo
     */
    'vcfcAlctCount'?: number;
}
/**
 * 
 * @export
 * @interface ResortFacilityApprovalPageInqInVo
 */
export interface ResortFacilityApprovalPageInqInVo {
    /**
     * 페이지당출력건수
     * @type {number}
     * @memberof ResortFacilityApprovalPageInqInVo
     */
    'pageSize'?: number;
    /**
     * 페이지번호
     * @type {number}
     * @memberof ResortFacilityApprovalPageInqInVo
     */
    'pageNo'?: number;
    /**
     * 휴양시설운영년
     * @type {string}
     * @memberof ResortFacilityApprovalPageInqInVo
     */
    'vcfcOprtYy'?: string;
    /**
     * 시설코드
     * @type {string}
     * @memberof ResortFacilityApprovalPageInqInVo
     */
    'trngFcltDcd'?: string;
    /**
     * 시설장소유형코드
     * @type {string}
     * @memberof ResortFacilityApprovalPageInqInVo
     */
    'fcltPsiDcd'?: string;
    /**
     * 객실타입코드
     * @type {string}
     * @memberof ResortFacilityApprovalPageInqInVo
     */
    'gsrmTcd'?: string;
    /**
     * 회차
     * @type {number}
     * @memberof ResortFacilityApprovalPageInqInVo
     */
    'tob'?: number;
}
/**
 * 첨부파일 삭제 리스트
 * @export
 * @interface ResortFacilityImageDelleteInVo
 */
export interface ResortFacilityImageDelleteInVo {
    /**
     * 시설코드
     * @type {string}
     * @memberof ResortFacilityImageDelleteInVo
     */
    'trngFcltDcd'?: string;
    /**
     * 시설장소유형코드
     * @type {string}
     * @memberof ResortFacilityImageDelleteInVo
     */
    'fcltPsiDcd'?: string;
    /**
     * 객실타입코드
     * @type {string}
     * @memberof ResortFacilityImageDelleteInVo
     */
    'gsrmTcd'?: string;
    /**
     * 파일번호
     * @type {number}
     * @memberof ResortFacilityImageDelleteInVo
     */
    'fileNo'?: number;
}
/**
 * 첨부파일 리스트
 * @export
 * @interface ResortFacilityImageOutVo
 */
export interface ResortFacilityImageOutVo {
    /**
     * 
     * @type {string}
     * @memberof ResortFacilityImageOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResortFacilityImageOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResortFacilityImageOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResortFacilityImageOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResortFacilityImageOutVo
     */
    'cncrName'?: string;
    /**
     * 시설코드
     * @type {string}
     * @memberof ResortFacilityImageOutVo
     */
    'trngFcltDcd'?: string;
    /**
     * 시설장소유형코드
     * @type {string}
     * @memberof ResortFacilityImageOutVo
     */
    'fcltPsiDcd'?: string;
    /**
     * 객실타입코드
     * @type {string}
     * @memberof ResortFacilityImageOutVo
     */
    'gsrmTcd'?: string;
    /**
     * 파일번호
     * @type {number}
     * @memberof ResortFacilityImageOutVo
     */
    'fileNo'?: number;
    /**
     * PC파일URL주소
     * @type {string}
     * @memberof ResortFacilityImageOutVo
     */
    'pcFileUrlAdr'?: string;
    /**
     * PC클라우드파일URL주소
     * @type {string}
     * @memberof ResortFacilityImageOutVo
     */
    'pcCldFileUrlAdr'?: string;
    /**
     * PC원본파일명
     * @type {string}
     * @memberof ResortFacilityImageOutVo
     */
    'pcOrcpFileNm'?: string;
    /**
     * PC저장파일명
     * @type {string}
     * @memberof ResortFacilityImageOutVo
     */
    'pcStrgFileNm'?: string;
    /**
     * PC파일확장자명
     * @type {string}
     * @memberof ResortFacilityImageOutVo
     */
    'pcFileEtnsNm'?: string;
    /**
     * 사용 여부
     * @type {string}
     * @memberof ResortFacilityImageOutVo
     */
    'useYn'?: string;
}
/**
 * 
 * @export
 * @interface ResortFacilityInVo
 */
export interface ResortFacilityInVo {
    /**
     * 시설코드
     * @type {string}
     * @memberof ResortFacilityInVo
     */
    'trngFcltDcd'?: string;
    /**
     * 시설장소유형코드
     * @type {string}
     * @memberof ResortFacilityInVo
     */
    'fcltPsiDcd'?: string;
    /**
     * 객실타입코드
     * @type {string}
     * @memberof ResortFacilityInVo
     */
    'gsrmTcd'?: string;
    /**
     * 우편번호
     * @type {string}
     * @memberof ResortFacilityInVo
     */
    'zpcd'?: string;
    /**
     * 주소
     * @type {string}
     * @memberof ResortFacilityInVo
     */
    'adr'?: string;
    /**
     * 시설사용가능인원수
     * @type {number}
     * @memberof ResortFacilityInVo
     */
    'fcltUseNmprCnt'?: number;
    /**
     * 휴양시설설명내용
     * @type {string}
     * @memberof ResortFacilityInVo
     */
    'vcfcDescCon'?: string;
    /**
     * 일정컬러값
     * @type {string}
     * @memberof ResortFacilityInVo
     */
    'schdColrVl'?: string;
    /**
     * 사용 여부
     * @type {string}
     * @memberof ResortFacilityInVo
     */
    'useYn'?: string;
    /**
     * 첨부파일 삭제 리스트
     * @type {Array<ResortFacilityImageDelleteInVo>}
     * @memberof ResortFacilityInVo
     */
    'resortFacilityImageDelleteList'?: Array<ResortFacilityImageDelleteInVo>;
}
/**
 * 
 * @export
 * @interface ResortFacilityOutVo
 */
export interface ResortFacilityOutVo {
    /**
     * 
     * @type {string}
     * @memberof ResortFacilityOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResortFacilityOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResortFacilityOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResortFacilityOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResortFacilityOutVo
     */
    'cncrName'?: string;
    /**
     * 시설코드
     * @type {string}
     * @memberof ResortFacilityOutVo
     */
    'trngFcltDcd'?: string;
    /**
     * 시설코드명
     * @type {string}
     * @memberof ResortFacilityOutVo
     */
    'fcltCdNm'?: string;
    /**
     * 시설장소유형코드
     * @type {string}
     * @memberof ResortFacilityOutVo
     */
    'fcltPsiDcd'?: string;
    /**
     * 시설장소유형코드명
     * @type {string}
     * @memberof ResortFacilityOutVo
     */
    'fcltPlacTcdNm'?: string;
    /**
     * 객실타입코드
     * @type {string}
     * @memberof ResortFacilityOutVo
     */
    'gsrmTcd'?: string;
    /**
     * 객실타입코드명
     * @type {string}
     * @memberof ResortFacilityOutVo
     */
    'gsrmTypeCdNm'?: string;
    /**
     * 우편번호
     * @type {string}
     * @memberof ResortFacilityOutVo
     */
    'zpcd'?: string;
    /**
     * 주소
     * @type {string}
     * @memberof ResortFacilityOutVo
     */
    'adr'?: string;
    /**
     * 시설사용가능인원수
     * @type {number}
     * @memberof ResortFacilityOutVo
     */
    'fcltUseNmprCnt'?: number;
    /**
     * 휴양시설설명내용
     * @type {string}
     * @memberof ResortFacilityOutVo
     */
    'vcfcDescCon'?: string;
    /**
     * 일정컬러값
     * @type {string}
     * @memberof ResortFacilityOutVo
     */
    'schdColrVl'?: string;
    /**
     * 사용 여부
     * @type {string}
     * @memberof ResortFacilityOutVo
     */
    'useYn'?: string;
    /**
     * 첨부파일 리스트
     * @type {Array<ResortFacilityImageOutVo>}
     * @memberof ResortFacilityOutVo
     */
    'resortFacilityImageList'?: Array<ResortFacilityImageOutVo>;
}
/**
 * 
 * @export
 * @interface ResortFacilityPageInqInVo
 */
export interface ResortFacilityPageInqInVo {
    /**
     * 페이지당출력건수
     * @type {number}
     * @memberof ResortFacilityPageInqInVo
     */
    'pageSize'?: number;
    /**
     * 페이지번호
     * @type {number}
     * @memberof ResortFacilityPageInqInVo
     */
    'pageNo'?: number;
    /**
     * 시설코드
     * @type {string}
     * @memberof ResortFacilityPageInqInVo
     */
    'trngFcltDcd'?: string;
    /**
     * 시설장소유형코드
     * @type {string}
     * @memberof ResortFacilityPageInqInVo
     */
    'fcltPsiDcd'?: string;
    /**
     * 객실타입코드
     * @type {string}
     * @memberof ResortFacilityPageInqInVo
     */
    'gsrmTcd'?: string;
    /**
     * 사용 여부
     * @type {string}
     * @memberof ResortFacilityPageInqInVo
     */
    'useYn'?: string;
}
/**
 * 
 * @export
 * @interface ResortFacilityRequestInVo
 */
export interface ResortFacilityRequestInVo {
    /**
     * 휴양시설운영년
     * @type {string}
     * @memberof ResortFacilityRequestInVo
     */
    'vcfcOprtYy'?: string;
    /**
     * 시설코드
     * @type {string}
     * @memberof ResortFacilityRequestInVo
     */
    'trngFcltDcd'?: string;
    /**
     * 시설장소유형코드
     * @type {string}
     * @memberof ResortFacilityRequestInVo
     */
    'fcltPsiDcd'?: string;
    /**
     * 객실타입코드
     * @type {string}
     * @memberof ResortFacilityRequestInVo
     */
    'gsrmTcd'?: string;
    /**
     * 회차
     * @type {number}
     * @memberof ResortFacilityRequestInVo
     */
    'tob'?: number;
    /**
     * 사용자ID
     * @type {string}
     * @memberof ResortFacilityRequestInVo
     */
    'userId'?: string;
    /**
     * 신청일
     * @type {string}
     * @memberof ResortFacilityRequestInVo
     */
    'aplcTs'?: string;
    /**
     * 휴양시설입실년월일
     * @type {string}
     * @memberof ResortFacilityRequestInVo
     */
    'vcfcCkinYmd'?: string;
    /**
     * 휴양시설퇴실년월일
     * @type {string}
     * @memberof ResortFacilityRequestInVo
     */
    'vcfcCcotYmd'?: string;
    /**
     * 숙박일수
     * @type {number}
     * @memberof ResortFacilityRequestInVo
     */
    'ldgnNdd'?: number;
    /**
     * 휴양시설배정여부
     * @type {string}
     * @memberof ResortFacilityRequestInVo
     */
    'vcfcAlctYn'?: string;
    /**
     * 휴양시설배정호수
     * @type {string}
     * @memberof ResortFacilityRequestInVo
     */
    'vcfcAlctRnm'?: string;
    /**
     * 예약번호
     * @type {string}
     * @memberof ResortFacilityRequestInVo
     */
    'rsvtNo'?: string;
    /**
     * 비고내용
     * @type {string}
     * @memberof ResortFacilityRequestInVo
     */
    'rmrkCon'?: string;
    /**
     * 입실명단명
     * @type {string}
     * @memberof ResortFacilityRequestInVo
     */
    'ckinNmlsNm'?: string;
    /**
     * 휴양시설적용점수
     * @type {number}
     * @memberof ResortFacilityRequestInVo
     */
    'vcfcAplyScr'?: number;
    /**
     * 비상전화번호
     * @type {string}
     * @memberof ResortFacilityRequestInVo
     */
    'emrnTpn'?: string;
    /**
     * 차량번호
     * @type {string}
     * @memberof ResortFacilityRequestInVo
     */
    'vhclNo'?: string;
    /**
     * 동의여부
     * @type {string}
     * @memberof ResortFacilityRequestInVo
     */
    'cosnYn'?: string;
    /**
     * 사용 여부
     * @type {string}
     * @memberof ResortFacilityRequestInVo
     */
    'useYn'?: string;
}
/**
 * 
 * @export
 * @interface ResortFacilityRequestMyOutVo
 */
export interface ResortFacilityRequestMyOutVo {
    /**
     * 
     * @type {string}
     * @memberof ResortFacilityRequestMyOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResortFacilityRequestMyOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResortFacilityRequestMyOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResortFacilityRequestMyOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResortFacilityRequestMyOutVo
     */
    'cncrName'?: string;
    /**
     * 휴양동/시설명
     * @type {string}
     * @memberof ResortFacilityRequestMyOutVo
     */
    'fcltCdNm'?: string;
    /**
     * 객식/시설유형
     * @type {string}
     * @memberof ResortFacilityRequestMyOutVo
     */
    'fcltPlacTcdNm'?: string;
    /**
     * 시설장소
     * @type {string}
     * @memberof ResortFacilityRequestMyOutVo
     */
    'fcltDtlKcdNm'?: string;
    /**
     * 신청일
     * @type {string}
     * @memberof ResortFacilityRequestMyOutVo
     */
    'aplcYmd'?: string;
    /**
     * 입실일
     * @type {string}
     * @memberof ResortFacilityRequestMyOutVo
     */
    'rsvtSttgTs'?: string;
    /**
     * 퇴실일
     * @type {string}
     * @memberof ResortFacilityRequestMyOutVo
     */
    'rsvtFnshTs'?: string;
    /**
     * 승인상태
     * @type {string}
     * @memberof ResortFacilityRequestMyOutVo
     */
    'athzYn'?: string;
    /**
     * 연수시설구분코드
     * @type {string}
     * @memberof ResortFacilityRequestMyOutVo
     */
    'trngFcltDcd'?: string;
    /**
     * 승인상태
     * @type {string}
     * @memberof ResortFacilityRequestMyOutVo
     */
    'fcltPsiDcd'?: string;
    /**
     * 시설유형코드
     * @type {string}
     * @memberof ResortFacilityRequestMyOutVo
     */
    'fcltDtlKcd'?: string;
    /**
     * 사용자ID
     * @type {string}
     * @memberof ResortFacilityRequestMyOutVo
     */
    'userId'?: string;
    /**
     * 휴양시설운영년
     * @type {string}
     * @memberof ResortFacilityRequestMyOutVo
     */
    'vcfcOprtYy'?: string;
    /**
     * 회차
     * @type {string}
     * @memberof ResortFacilityRequestMyOutVo
     */
    'tob'?: string;
    /**
     * 휴양신청일시
     * @type {string}
     * @memberof ResortFacilityRequestMyOutVo
     */
    'aplcTs'?: string;
    /**
     * 휴양연수시설구분코드
     * @type {string}
     * @memberof ResortFacilityRequestMyOutVo
     */
    'gsrmTcd'?: string;
}
/**
 * 
 * @export
 * @interface ResortFacilityRequestMyPageInqInVo
 */
export interface ResortFacilityRequestMyPageInqInVo {
    /**
     * 페이지당출력건수
     * @type {number}
     * @memberof ResortFacilityRequestMyPageInqInVo
     */
    'pageSize'?: number;
    /**
     * 페이지번호
     * @type {number}
     * @memberof ResortFacilityRequestMyPageInqInVo
     */
    'pageNo'?: number;
}
/**
 * 
 * @export
 * @interface ResortFacilityRequestOutVo
 */
export interface ResortFacilityRequestOutVo {
    /**
     * 
     * @type {string}
     * @memberof ResortFacilityRequestOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResortFacilityRequestOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResortFacilityRequestOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResortFacilityRequestOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResortFacilityRequestOutVo
     */
    'cncrName'?: string;
    /**
     * 휴양시설운영년
     * @type {string}
     * @memberof ResortFacilityRequestOutVo
     */
    'vcfcOprtYy'?: string;
    /**
     * 시설코드
     * @type {string}
     * @memberof ResortFacilityRequestOutVo
     */
    'trngFcltDcd'?: string;
    /**
     * 시설코드명
     * @type {string}
     * @memberof ResortFacilityRequestOutVo
     */
    'fcltCdNm'?: string;
    /**
     * 시설장소유형코드
     * @type {string}
     * @memberof ResortFacilityRequestOutVo
     */
    'fcltPsiDcd'?: string;
    /**
     * 시설장소유형코드명
     * @type {string}
     * @memberof ResortFacilityRequestOutVo
     */
    'fcltPlacTcdNm'?: string;
    /**
     * 객실타입코드
     * @type {string}
     * @memberof ResortFacilityRequestOutVo
     */
    'gsrmTcd'?: string;
    /**
     * 객실타입코드명
     * @type {string}
     * @memberof ResortFacilityRequestOutVo
     */
    'gsrmTypeCdNm'?: string;
    /**
     * 회차
     * @type {number}
     * @memberof ResortFacilityRequestOutVo
     */
    'tob'?: number;
    /**
     * 사용자ID
     * @type {string}
     * @memberof ResortFacilityRequestOutVo
     */
    'userId'?: string;
    /**
     * 사용자이름
     * @type {string}
     * @memberof ResortFacilityRequestOutVo
     */
    'userNm'?: string;
    /**
     * 신청일
     * @type {string}
     * @memberof ResortFacilityRequestOutVo
     */
    'aplcTs'?: string;
    /**
     * 휴양시설입실년월일
     * @type {string}
     * @memberof ResortFacilityRequestOutVo
     */
    'vcfcCkinYmd'?: string;
    /**
     * 휴양시설퇴실년월일
     * @type {string}
     * @memberof ResortFacilityRequestOutVo
     */
    'vcfcCcotYmd'?: string;
    /**
     * 숙박일수
     * @type {number}
     * @memberof ResortFacilityRequestOutVo
     */
    'ldgnNdd'?: number;
    /**
     * 휴양시설배정여부
     * @type {string}
     * @memberof ResortFacilityRequestOutVo
     */
    'vcfcAlctYn'?: string;
    /**
     * 휴양시설배정호수
     * @type {string}
     * @memberof ResortFacilityRequestOutVo
     */
    'vcfcAlctRnm'?: string;
    /**
     * 휴양시설배정자ID
     * @type {string}
     * @memberof ResortFacilityRequestOutVo
     */
    'vcfcPwwaId'?: string;
    /**
     * 휴양시설배정자명
     * @type {string}
     * @memberof ResortFacilityRequestOutVo
     */
    'vcfcPwwaNm'?: string;
    /**
     * 휴양시설배정년월일
     * @type {string}
     * @memberof ResortFacilityRequestOutVo
     */
    'vcfcAlctYmd'?: string;
    /**
     * 휴양시설신청상태코드
     * @type {string}
     * @memberof ResortFacilityRequestOutVo
     */
    'vcfcAplcScd'?: string;
    /**
     * 휴양시설신청상태
     * @type {string}
     * @memberof ResortFacilityRequestOutVo
     */
    'vcfcAplcScdNm'?: string;
    /**
     * 예약번호
     * @type {string}
     * @memberof ResortFacilityRequestOutVo
     */
    'rsvtNo'?: string;
    /**
     * 비고내용
     * @type {string}
     * @memberof ResortFacilityRequestOutVo
     */
    'rmrkCon'?: string;
    /**
     * 휴양시설적용점수
     * @type {number}
     * @memberof ResortFacilityRequestOutVo
     */
    'vcfcAplyScr'?: number;
    /**
     * 감점점수
     * @type {number}
     * @memberof ResortFacilityRequestOutVo
     */
    'dmrkScr'?: number;
    /**
     * 비상전화번호
     * @type {string}
     * @memberof ResortFacilityRequestOutVo
     */
    'emrnTpn'?: string;
    /**
     * 차량번호
     * @type {string}
     * @memberof ResortFacilityRequestOutVo
     */
    'vhclNo'?: string;
    /**
     * 입실명단명
     * @type {string}
     * @memberof ResortFacilityRequestOutVo
     */
    'ckinNmlsNm'?: string;
    /**
     * 동의여부
     * @type {string}
     * @memberof ResortFacilityRequestOutVo
     */
    'cosnYn'?: string;
    /**
     * 사용 여부
     * @type {string}
     * @memberof ResortFacilityRequestOutVo
     */
    'useYn'?: string;
    /**
     * 휴양시설이용횟수
     * @type {number}
     * @memberof ResortFacilityRequestOutVo
     */
    'vcfcAlctCount'?: number;
}
/**
 * 
 * @export
 * @interface ResortFacilityRequestPageInqInVo
 */
export interface ResortFacilityRequestPageInqInVo {
    /**
     * 페이지당출력건수
     * @type {number}
     * @memberof ResortFacilityRequestPageInqInVo
     */
    'pageSize'?: number;
    /**
     * 페이지번호
     * @type {number}
     * @memberof ResortFacilityRequestPageInqInVo
     */
    'pageNo'?: number;
    /**
     * 휴양시설운영년
     * @type {string}
     * @memberof ResortFacilityRequestPageInqInVo
     */
    'vcfcOprtYy'?: string;
    /**
     * 시설코드
     * @type {string}
     * @memberof ResortFacilityRequestPageInqInVo
     */
    'trngFcltDcd'?: string;
    /**
     * 시설장소유형코드
     * @type {string}
     * @memberof ResortFacilityRequestPageInqInVo
     */
    'fcltPsiDcd'?: string;
    /**
     * 객실타입코드
     * @type {string}
     * @memberof ResortFacilityRequestPageInqInVo
     */
    'gsrmTcd'?: string;
    /**
     * 회차
     * @type {number}
     * @memberof ResortFacilityRequestPageInqInVo
     */
    'tob'?: number;
    /**
     * 신청일시작일
     * @type {string}
     * @memberof ResortFacilityRequestPageInqInVo
     */
    'aplcYmdStart'?: string;
    /**
     * 신청일종료일
     * @type {string}
     * @memberof ResortFacilityRequestPageInqInVo
     */
    'aplcYmdEnd'?: string;
    /**
     * 입실일시작일
     * @type {string}
     * @memberof ResortFacilityRequestPageInqInVo
     */
    'vcfcCkinYmdStart'?: string;
    /**
     * 입실일종료일
     * @type {string}
     * @memberof ResortFacilityRequestPageInqInVo
     */
    'vcfcCkinYmdEnd'?: string;
    /**
     * 퇴실일시작일
     * @type {string}
     * @memberof ResortFacilityRequestPageInqInVo
     */
    'vcfcCcotYmdStart'?: string;
    /**
     * 퇴실일종료일
     * @type {string}
     * @memberof ResortFacilityRequestPageInqInVo
     */
    'vcfcCcotYmdEnd'?: string;
    /**
     * 사용자ID
     * @type {string}
     * @memberof ResortFacilityRequestPageInqInVo
     */
    'userId'?: string;
    /**
     * 사용자이름
     * @type {string}
     * @memberof ResortFacilityRequestPageInqInVo
     */
    'userNm'?: string;
    /**
     * 예약번호
     * @type {string}
     * @memberof ResortFacilityRequestPageInqInVo
     */
    'rsvtNo'?: string;
    /**
     * 휴양시설배정여부
     * @type {string}
     * @memberof ResortFacilityRequestPageInqInVo
     */
    'vcfcAlctYn'?: string;
    /**
     * 휴양시설배정호수
     * @type {string}
     * @memberof ResortFacilityRequestPageInqInVo
     */
    'vcfcAlctRnm'?: string;
}
/**
 * 
 * @export
 * @interface ResortFacilityScheduleOutVo
 */
export interface ResortFacilityScheduleOutVo {
    /**
     * 
     * @type {string}
     * @memberof ResortFacilityScheduleOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResortFacilityScheduleOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResortFacilityScheduleOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResortFacilityScheduleOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResortFacilityScheduleOutVo
     */
    'cncrName'?: string;
    /**
     * 휴양시설운영년
     * @type {string}
     * @memberof ResortFacilityScheduleOutVo
     */
    'vcfcOprtYy'?: string;
    /**
     * 시설코드
     * @type {string}
     * @memberof ResortFacilityScheduleOutVo
     */
    'trngFcltDcd'?: string;
    /**
     * 시설코드명
     * @type {string}
     * @memberof ResortFacilityScheduleOutVo
     */
    'fcltCdNm'?: string;
    /**
     * 시설장소유형코드
     * @type {string}
     * @memberof ResortFacilityScheduleOutVo
     */
    'fcltPsiDcd'?: string;
    /**
     * 시설장소유형코드명
     * @type {string}
     * @memberof ResortFacilityScheduleOutVo
     */
    'fcltPlacTcdNm'?: string;
    /**
     * 객실타입코드
     * @type {string}
     * @memberof ResortFacilityScheduleOutVo
     */
    'gsrmTcd'?: string;
    /**
     * 객실타입코드명
     * @type {string}
     * @memberof ResortFacilityScheduleOutVo
     */
    'gsrmTypeCdNm'?: string;
    /**
     * 회차
     * @type {number}
     * @memberof ResortFacilityScheduleOutVo
     */
    'tob'?: number;
    /**
     * 휴양시설입실년월일
     * @type {string}
     * @memberof ResortFacilityScheduleOutVo
     */
    'vcfcCkinYmd'?: string;
    /**
     * 시설코드
     * @type {string}
     * @memberof ResortFacilityScheduleOutVo
     */
    'vcfcCcotYmd'?: string;
    /**
     * 신청가능객실개수
     * @type {number}
     * @memberof ResortFacilityScheduleOutVo
     */
    'aplcAblGsrmNmb'?: number;
    /**
     * 사용 여부
     * @type {string}
     * @memberof ResortFacilityScheduleOutVo
     */
    'useYn'?: string;
}
/**
 * 
 * @export
 * @interface SklRoadmapBranchSearchInVo
 */
export interface SklRoadmapBranchSearchInVo {
    /**
     * 부점유형값
     * @type {string}
     * @memberof SklRoadmapBranchSearchInVo
     */
    'brncPtrnVl'?: string;
    /**
     * 소속본부값
     * @type {string}
     * @memberof SklRoadmapBranchSearchInVo
     */
    'blngHdqrDsncVl'?: string;
    /**
     * 지역본부값
     * @type {string}
     * @memberof SklRoadmapBranchSearchInVo
     */
    'arhdDsncVl'?: string;
    /**
     * 부점값
     * @type {string}
     * @memberof SklRoadmapBranchSearchInVo
     */
    'deptDsncVl'?: string;
    /**
     * 부점명
     * @type {string}
     * @memberof SklRoadmapBranchSearchInVo
     */
    'deptDsncNm'?: string;
}
/**
 * 
 * @export
 * @interface SklRoadmapBranchSearchOutVo
 */
export interface SklRoadmapBranchSearchOutVo {
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapBranchSearchOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapBranchSearchOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapBranchSearchOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapBranchSearchOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapBranchSearchOutVo
     */
    'cncrName'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapBranchSearchOutVo
     */
    'deptDsncVl'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapBranchSearchOutVo
     */
    'deptDsncNm'?: string;
}
/**
 * 
 * @export
 * @interface SklRoadmapBranchStatisticsUserInVo
 */
export interface SklRoadmapBranchStatisticsUserInVo {
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapBranchStatisticsUserInVo
     */
    'brncPtrnVl'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapBranchStatisticsUserInVo
     */
    'deptDsncVl'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapBranchStatisticsUserInVo
     */
    'baseYm'?: string;
}
/**
 * 
 * @export
 * @interface SklRoadmapBranchStatisticsUserOutVo
 */
export interface SklRoadmapBranchStatisticsUserOutVo {
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapBranchStatisticsUserOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapBranchStatisticsUserOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapBranchStatisticsUserOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapBranchStatisticsUserOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapBranchStatisticsUserOutVo
     */
    'cncrName'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapBranchStatisticsUserOutVo
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapBranchStatisticsUserOutVo
     */
    'userNm'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapBranchStatisticsUserOutVo
     */
    'rsptDsncNm'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapBranchStatisticsUserOutVo
     */
    'jbclNm'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapBranchStatisticsUserOutVo
     */
    'skllClsfVl'?: string;
    /**
     * 
     * @type {number}
     * @memberof SklRoadmapBranchStatisticsUserOutVo
     */
    'cpctLvlAcqtScr'?: number;
}
/**
 * 
 * @export
 * @interface SklRoadmapCategoryInVo
 */
export interface SklRoadmapCategoryInVo {
    /**
     * 
     * @type {number}
     * @memberof SklRoadmapCategoryInVo
     */
    'lvlNo'?: number;
}
/**
 * 
 * @export
 * @interface SklRoadmapCategoryOutVo
 */
export interface SklRoadmapCategoryOutVo {
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapCategoryOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapCategoryOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapCategoryOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapCategoryOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapCategoryOutVo
     */
    'cncrName'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapCategoryOutVo
     */
    'skllClsfVl'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapCategoryOutVo
     */
    'hgrnSkllClsfVl'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapCategoryOutVo
     */
    'skllClsfNm'?: string;
    /**
     * 
     * @type {number}
     * @memberof SklRoadmapCategoryOutVo
     */
    'lnpSqc'?: number;
    /**
     * 
     * @type {number}
     * @memberof SklRoadmapCategoryOutVo
     */
    'lvlNo'?: number;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapCategoryOutVo
     */
    'useYn'?: string;
    /**
     * 레벨점수
     * @type {number}
     * @memberof SklRoadmapCategoryOutVo
     */
    'cpctLvlAcqtScr'?: number;
}
/**
 * 
 * @export
 * @interface SklRoadmapCourseInVo
 */
export interface SklRoadmapCourseInVo {
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapCourseInVo
     */
    'skllCd'?: string;
    /**
     * 페이지당출력건수
     * @type {number}
     * @memberof SklRoadmapCourseInVo
     */
    'pageSize'?: number;
    /**
     * 페이지번호
     * @type {number}
     * @memberof SklRoadmapCourseInVo
     */
    'pageNo'?: number;
}
/**
 * 
 * @export
 * @interface SklRoadmapCourseOutVo
 */
export interface SklRoadmapCourseOutVo {
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapCourseOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapCourseOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapCourseOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapCourseOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapCourseOutVo
     */
    'cncrName'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapCourseOutVo
     */
    'dutyEdctCd'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapCourseOutVo
     */
    'dutyEdctNm'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapCourseOutVo
     */
    'mblImgUrlAdr'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapCourseOutVo
     */
    'pcImgUrlAdr'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapCourseOutVo
     */
    'edctMthdTcd'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapCourseOutVo
     */
    'edctMthdNm'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapCourseOutVo
     */
    'edctDsprNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapCourseOutVo
     */
    'likeYn'?: string;
    /**
     * 
     * @type {number}
     * @memberof SklRoadmapCourseOutVo
     */
    'dataSqn'?: number;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapCourseOutVo
     */
    'kwrVl'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapCourseOutVo
     */
    'edctDflvTcd'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapCourseOutVo
     */
    'edctDflvNm'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapCourseOutVo
     */
    'ctcrYn'?: string;
    /**
     * 
     * @type {number}
     * @memberof SklRoadmapCourseOutVo
     */
    'ctcrScr'?: number;
}
/**
 * 
 * @export
 * @interface SklRoadmapHistoryMonthlyInVo
 */
export interface SklRoadmapHistoryMonthlyInVo {
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapHistoryMonthlyInVo
     */
    'searchYear'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapHistoryMonthlyInVo
     */
    'skllClsfVl'?: string;
}
/**
 * 
 * @export
 * @interface SklRoadmapHistoryMonthlyOutVo
 */
export interface SklRoadmapHistoryMonthlyOutVo {
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapHistoryMonthlyOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapHistoryMonthlyOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapHistoryMonthlyOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapHistoryMonthlyOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapHistoryMonthlyOutVo
     */
    'cncrName'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapHistoryMonthlyOutVo
     */
    'qlfcTrngDcd'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapHistoryMonthlyOutVo
     */
    'historyMonth'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapHistoryMonthlyOutVo
     */
    'cpctLvlAcqtScr'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapHistoryMonthlyOutVo
     */
    'stsTitle'?: string;
}
/**
 * 
 * @export
 * @interface SklRoadmapItemOutVo
 */
export interface SklRoadmapItemOutVo {
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapItemOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapItemOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapItemOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapItemOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapItemOutVo
     */
    'cncrName'?: string;
    /**
     * 숙련코드
     * @type {string}
     * @memberof SklRoadmapItemOutVo
     */
    'skllCd'?: string;
    /**
     * 숙련분류값
     * @type {string}
     * @memberof SklRoadmapItemOutVo
     */
    'skllClsfVl'?: string;
    /**
     * 숙련분류명
     * @type {string}
     * @memberof SklRoadmapItemOutVo
     */
    'skllClsfNm'?: string;
    /**
     * 숙련분류경로명
     * @type {string}
     * @memberof SklRoadmapItemOutVo
     */
    'skllClsfPathNm'?: string;
    /**
     * 적용시작년월일
     * @type {string}
     * @memberof SklRoadmapItemOutVo
     */
    'apsrYmd'?: string;
    /**
     * 적용종료년월일
     * @type {string}
     * @memberof SklRoadmapItemOutVo
     */
    'fnapYmd'?: string;
    /**
     * 숙련명
     * @type {string}
     * @memberof SklRoadmapItemOutVo
     */
    'skllNm'?: string;
    /**
     * 정렬순서
     * @type {number}
     * @memberof SklRoadmapItemOutVo
     */
    'lnpSqc'?: number;
    /**
     * 역량단계코드
     * @type {string}
     * @memberof SklRoadmapItemOutVo
     */
    'cpctStgDcd'?: string;
    /**
     * 역량단계명
     * @type {string}
     * @memberof SklRoadmapItemOutVo
     */
    'cpctStgNm'?: string;
    /**
     * 기술지식구분코드
     * @type {string}
     * @memberof SklRoadmapItemOutVo
     */
    'tchnKnwlDcd'?: string;
    /**
     * 기술지식구분명
     * @type {string}
     * @memberof SklRoadmapItemOutVo
     */
    'tchnKnwlNm'?: string;
    /**
     * 사용여부
     * @type {string}
     * @memberof SklRoadmapItemOutVo
     */
    'useYn'?: string;
    /**
     * 나의 스킬점수
     * @type {number}
     * @memberof SklRoadmapItemOutVo
     */
    'cpctLvlAcqtScr'?: number;
}
/**
 * 
 * @export
 * @interface SklRoadmapLevelStandardOutVo
 */
export interface SklRoadmapLevelStandardOutVo {
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLevelStandardOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLevelStandardOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLevelStandardOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLevelStandardOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLevelStandardOutVo
     */
    'cncrName'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLevelStandardOutVo
     */
    'cpctStgDcd'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLevelStandardOutVo
     */
    'cpctStgNm'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLevelStandardOutVo
     */
    'apsrYmd'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLevelStandardOutVo
     */
    'fnapYmd'?: string;
    /**
     * 
     * @type {number}
     * @memberof SklRoadmapLevelStandardOutVo
     */
    'minBaseScr'?: number;
    /**
     * 
     * @type {number}
     * @memberof SklRoadmapLevelStandardOutVo
     */
    'maxBaseScr'?: number;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLevelStandardOutVo
     */
    'useYn'?: string;
}
/**
 * 
 * @export
 * @interface SklRoadmapLicenseGradeStandardOutVo
 */
export interface SklRoadmapLicenseGradeStandardOutVo {
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLicenseGradeStandardOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLicenseGradeStandardOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLicenseGradeStandardOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLicenseGradeStandardOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLicenseGradeStandardOutVo
     */
    'cncrName'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLicenseGradeStandardOutVo
     */
    'qlfcGrdId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLicenseGradeStandardOutVo
     */
    'qlcrGdcd'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLicenseGradeStandardOutVo
     */
    'apsrYmd'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLicenseGradeStandardOutVo
     */
    'fnapYmd'?: string;
    /**
     * 
     * @type {number}
     * @memberof SklRoadmapLicenseGradeStandardOutVo
     */
    'cpctScrgScr'?: number;
}
/**
 * 
 * @export
 * @interface SklRoadmapLicenseOutVo
 */
export interface SklRoadmapLicenseOutVo {
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLicenseOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLicenseOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLicenseOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLicenseOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLicenseOutVo
     */
    'cncrName'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLicenseOutVo
     */
    'baseYmd'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLicenseOutVo
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLicenseOutVo
     */
    'skllClsfVl'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLicenseOutVo
     */
    'rgsnSqn'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLicenseOutVo
     */
    'skllClsfNm'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLicenseOutVo
     */
    'userNm'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLicenseOutVo
     */
    'emplNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLicenseOutVo
     */
    'blngHdqrDsncVl'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLicenseOutVo
     */
    'blngHdqrDsncNm'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLicenseOutVo
     */
    'deptDsncVl'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLicenseOutVo
     */
    'deptDsncNm'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLicenseOutVo
     */
    'tmorVl'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLicenseOutVo
     */
    'tmorNm'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLicenseOutVo
     */
    'jbclCd'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLicenseOutVo
     */
    'dtplDcd'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLicenseOutVo
     */
    'qlcrDsncVl'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLicenseOutVo
     */
    'qlcrNm'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLicenseOutVo
     */
    'qlcrGdcd'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLicenseOutVo
     */
    'acqtYmd'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLicenseOutVo
     */
    'qlfcScr'?: string;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLicenseOutVo
     */
    'isplNm'?: string;
    /**
     * 
     * @type {number}
     * @memberof SklRoadmapLicenseOutVo
     */
    'cpctLvlAcqtScr'?: number;
    /**
     * 
     * @type {string}
     * @memberof SklRoadmapLicenseOutVo
     */
    'useYn'?: string;
}
/**
 * 
 * @export
 * @interface SklRoadmapOutVo
 */
export interface SklRoadmapOutVo {
    /**
     * 
     * @type {Array<SklRoadmapCategoryOutVo>}
     * @memberof SklRoadmapOutVo
     */
    'roadmapCategoryList'?: Array<SklRoadmapCategoryOutVo>;
    /**
     * 
     * @type {Array<SklRoadmapItemOutVo>}
     * @memberof SklRoadmapOutVo
     */
    'roadmapItemList'?: Array<SklRoadmapItemOutVo>;
}
/**
 * 
 * @export
 * @interface SocialLearningOutVo
 */
export interface SocialLearningOutVo {
    /**
     * 
     * @type {string}
     * @memberof SocialLearningOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof SocialLearningOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SocialLearningOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SocialLearningOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof SocialLearningOutVo
     */
    'cncrName'?: string;
    /**
     * 게시글 아이디
     * @type {number}
     * @memberof SocialLearningOutVo
     */
    'blbrNo'?: number;
    /**
     * 게시글 아이디
     * @type {number}
     * @memberof SocialLearningOutVo
     */
    'blbrPtngId'?: number;
    /**
     * 게시글 분류 아이디
     * @type {number}
     * @memberof SocialLearningOutVo
     */
    'blbrCtgyId'?: number;
    /**
     * 게시글 분류명
     * @type {string}
     * @memberof SocialLearningOutVo
     */
    'ctgyNm'?: string;
    /**
     * 게시글 명
     * @type {string}
     * @memberof SocialLearningOutVo
     */
    'bltApowTtlNm'?: string;
    /**
     * 게시글 내용
     * @type {string}
     * @memberof SocialLearningOutVo
     */
    'bltApowCon'?: string;
    /**
     * 사용자명
     * @type {string}
     * @memberof SocialLearningOutVo
     */
    'userNm'?: string;
    /**
     * 조회 수
     * @type {number}
     * @memberof SocialLearningOutVo
     */
    'inqCnt'?: number;
    /**
     * 댓글 수
     * @type {number}
     * @memberof SocialLearningOutVo
     */
    'commentCnt'?: number;
    /**
     * 좋아요 수
     * @type {number}
     * @memberof SocialLearningOutVo
     */
    'likeCnt'?: number;
    /**
     * 베스트 여부
     * @type {string}
     * @memberof SocialLearningOutVo
     */
    'bestYn'?: string;
}
/**
 * 
 * @export
 * @interface SoftCampCallbackInVo
 */
export interface SoftCampCallbackInVo {
    /**
     * 무해화 요청 작업에 대한 ID
     * @type {string}
     * @memberof SoftCampCallbackInVo
     */
    'jobID'?: string;
    /**
     * jobId에 대한 sqn
     * @type {number}
     * @memberof SoftCampCallbackInVo
     */
    'dataRgsnId'?: number;
    /**
     * 무해화 요청에 대한 결과
     * @type {number}
     * @memberof SoftCampCallbackInVo
     */
    'code'?: number;
    /**
     * code 대한 Description 메시지
     * @type {string}
     * @memberof SoftCampCallbackInVo
     */
    'msg'?: string;
    /**
     * 무해화 결과 코드
     * @type {string}
     * @memberof SoftCampCallbackInVo
     */
    'logReason'?: string;
    /**
     * 무해화 결과 코드 메세지
     * @type {string}
     * @memberof SoftCampCallbackInVo
     */
    'logReasonMsg'?: string;
}
/**
 * 
 * @export
 * @interface StudyRoomAttendanceQRInVo
 */
export interface StudyRoomAttendanceQRInVo {
    /**
     * 직무교육코드
     * @type {string}
     * @memberof StudyRoomAttendanceQRInVo
     */
    'dutyEdctCd'?: string;
    /**
     * 교육차수번호
     * @type {number}
     * @memberof StudyRoomAttendanceQRInVo
     */
    'edctDsprNo'?: number;
    /**
     * 교육차수챕터번호
     * @type {number}
     * @memberof StudyRoomAttendanceQRInVo
     */
    'edctDsprChpaNo'?: number;
    /**
     * 교육차수레슨번호
     * @type {number}
     * @memberof StudyRoomAttendanceQRInVo
     */
    'edctDsprLssoNo'?: number;
    /**
     * 사용자ID
     * @type {string}
     * @memberof StudyRoomAttendanceQRInVo
     */
    'userId'?: string;
    /**
     * 현재학습객체값
     * @type {number}
     * @memberof StudyRoomAttendanceQRInVo
     */
    'currentAcmlPictLen'?: number;
}
/**
 * 
 * @export
 * @interface StudyRoomContentsInVo
 */
export interface StudyRoomContentsInVo {
    /**
     * 직무교육코드
     * @type {string}
     * @memberof StudyRoomContentsInVo
     */
    'dutyEdctCd'?: string;
    /**
     * 차수번호
     * @type {number}
     * @memberof StudyRoomContentsInVo
     */
    'edctDsprNo'?: number;
}
/**
 * 
 * @export
 * @interface StudyRoomContentsOutVo
 */
export interface StudyRoomContentsOutVo {
    /**
     * 
     * @type {CourseDegreeOutVo}
     * @memberof StudyRoomContentsOutVo
     */
    'courseDegree'?: CourseDegreeOutVo;
    /**
     * 
     * @type {StudyRoomCourseDegreeInfoOutVo}
     * @memberof StudyRoomContentsOutVo
     */
    'courseDegreeInfo'?: StudyRoomCourseDegreeInfoOutVo;
    /**
     * 
     * @type {Array<CourseDegreeChapterOutVo>}
     * @memberof StudyRoomContentsOutVo
     */
    'courseDegreeChapter'?: Array<CourseDegreeChapterOutVo>;
}
/**
 * 
 * @export
 * @interface StudyRoomCourseDegreeCancelInVo
 */
export interface StudyRoomCourseDegreeCancelInVo {
    /**
     * 직무교육코드
     * @type {string}
     * @memberof StudyRoomCourseDegreeCancelInVo
     */
    'dutyEdctCd'?: string;
    /**
     * 변경전 교육차수번호
     * @type {number}
     * @memberof StudyRoomCourseDegreeCancelInVo
     */
    'edctDsprNo'?: number;
    /**
     * 변경 할 교육차수번호
     * @type {number}
     * @memberof StudyRoomCourseDegreeCancelInVo
     */
    'targetEdctDsprNo'?: number;
    /**
     * 수강변경취소구분코드값
     * @type {string}
     * @memberof StudyRoomCourseDegreeCancelInVo
     */
    'atlcMdcnDcd'?: StudyRoomCourseDegreeCancelInVoAtlcMdcnDcdEnum;
    /**
     * 수강변경취소내용
     * @type {string}
     * @memberof StudyRoomCourseDegreeCancelInVo
     */
    'atlcMdfcCnclCon'?: string;
}

export const StudyRoomCourseDegreeCancelInVoAtlcMdcnDcdEnum = {
    C: 'C',
    M: 'M'
} as const;

export type StudyRoomCourseDegreeCancelInVoAtlcMdcnDcdEnum = typeof StudyRoomCourseDegreeCancelInVoAtlcMdcnDcdEnum[keyof typeof StudyRoomCourseDegreeCancelInVoAtlcMdcnDcdEnum];

/**
 * 
 * @export
 * @interface StudyRoomCourseDegreeCancelListInVo
 */
export interface StudyRoomCourseDegreeCancelListInVo {
    /**
     * 직무교육코드
     * @type {string}
     * @memberof StudyRoomCourseDegreeCancelListInVo
     */
    'dutyEdctCd'?: string;
    /**
     * 교육차수번호
     * @type {number}
     * @memberof StudyRoomCourseDegreeCancelListInVo
     */
    'edctDsprNo'?: number;
}
/**
 * 
 * @export
 * @interface StudyRoomCourseDegreeCheckInVo
 */
export interface StudyRoomCourseDegreeCheckInVo {
    /**
     * 직무교육코드
     * @type {string}
     * @memberof StudyRoomCourseDegreeCheckInVo
     */
    'dutyEdctCd'?: string;
    /**
     * 교육차수번호
     * @type {number}
     * @memberof StudyRoomCourseDegreeCheckInVo
     */
    'edctDsprNo'?: number;
}
/**
 * 
 * @export
 * @interface StudyRoomCourseDegreeCheckOutVo
 */
export interface StudyRoomCourseDegreeCheckOutVo {
    /**
     * 사용자가 현재 수강이 가능한지 체크
     * @type {string}
     * @memberof StudyRoomCourseDegreeCheckOutVo
     */
    'courseDegreeCheck'?: string;
}
/**
 * 
 * @export
 * @interface StudyRoomCourseDegreeInfoOutVo
 */
export interface StudyRoomCourseDegreeInfoOutVo {
    /**
     * 직무교육코드
     * @type {string}
     * @memberof StudyRoomCourseDegreeInfoOutVo
     */
    'dutyEdctCd'?: string;
    /**
     * 교육차수번호
     * @type {number}
     * @memberof StudyRoomCourseDegreeInfoOutVo
     */
    'edctDsprNo'?: number;
    /**
     * 차수 직무교육명
     * @type {string}
     * @memberof StudyRoomCourseDegreeInfoOutVo
     */
    'dutyEdctNm'?: string;
    /**
     * 직무교육명
     * @type {string}
     * @memberof StudyRoomCourseDegreeInfoOutVo
     */
    'parentDutyEdctNm'?: string;
    /**
     * 학습시작일시
     * @type {string}
     * @memberof StudyRoomCourseDegreeInfoOutVo
     */
    'lrngSttgTs'?: string;
    /**
     * 학습종료일시
     * @type {string}
     * @memberof StudyRoomCourseDegreeInfoOutVo
     */
    'lrngFnshTs'?: string;
    /**
     * 전체 진도율
     * @type {number}
     * @memberof StudyRoomCourseDegreeInfoOutVo
     */
    'totalProgress'?: number;
    /**
     * 
     * @type {number}
     * @memberof StudyRoomCourseDegreeInfoOutVo
     */
    'vodCnt'?: number;
    /**
     * 
     * @type {number}
     * @memberof StudyRoomCourseDegreeInfoOutVo
     */
    'examCnt'?: number;
    /**
     * 
     * @type {number}
     * @memberof StudyRoomCourseDegreeInfoOutVo
     */
    'surveyCnt'?: number;
    /**
     * 
     * @type {number}
     * @memberof StudyRoomCourseDegreeInfoOutVo
     */
    'reportCnt'?: number;
    /**
     * 
     * @type {number}
     * @memberof StudyRoomCourseDegreeInfoOutVo
     */
    'groupCnt'?: number;
    /**
     * 
     * @type {number}
     * @memberof StudyRoomCourseDegreeInfoOutVo
     */
    'externalCnt'?: number;
    /**
     * 
     * @type {number}
     * @memberof StudyRoomCourseDegreeInfoOutVo
     */
    'liveCnt'?: number;
}
/**
 * 사용자가 응답한 시험지 정보
 * @export
 * @interface StudyRoomExamAnswerOutVo
 */
export interface StudyRoomExamAnswerOutVo {
    /**
     * 
     * @type {string}
     * @memberof StudyRoomExamAnswerOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudyRoomExamAnswerOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudyRoomExamAnswerOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudyRoomExamAnswerOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudyRoomExamAnswerOutVo
     */
    'cncrName'?: string;
    /**
     * 직무교육코드
     * @type {string}
     * @memberof StudyRoomExamAnswerOutVo
     */
    'dutyEdctCd'?: string;
    /**
     * 교육차수번호
     * @type {number}
     * @memberof StudyRoomExamAnswerOutVo
     */
    'edctDsprNo'?: number;
    /**
     * 교육차수레슨번호
     * @type {number}
     * @memberof StudyRoomExamAnswerOutVo
     */
    'edctDsprLssoNo'?: number;
    /**
     * 직무교육시험번호
     * @type {number}
     * @memberof StudyRoomExamAnswerOutVo
     */
    'dutyEdctExamNo'?: number;
    /**
     * 문항번호
     * @type {number}
     * @memberof StudyRoomExamAnswerOutVo
     */
    'qsitNo'?: number;
    /**
     * 원본문항번호
     * @type {number}
     * @memberof StudyRoomExamAnswerOutVo
     */
    'orcpQsitNo'?: number;
    /**
     * 답안내용
     * @type {string}
     * @memberof StudyRoomExamAnswerOutVo
     */
    'ansrCon'?: string;
}
/**
 * 
 * @export
 * @interface StudyRoomExamInVo
 */
export interface StudyRoomExamInVo {
    /**
     * 교육 과정코드
     * @type {string}
     * @memberof StudyRoomExamInVo
     */
    'dutyEdctCd'?: string;
    /**
     * 차수 번호
     * @type {number}
     * @memberof StudyRoomExamInVo
     */
    'edctDsprNo'?: number;
    /**
     * 수챕터번호
     * @type {number}
     * @memberof StudyRoomExamInVo
     */
    'edctDsprChpaNo'?: number;
    /**
     * 레슨번호
     * @type {number}
     * @memberof StudyRoomExamInVo
     */
    'edctDsprLssoNo'?: number;
    /**
     * 직무교육시험번호
     * @type {number}
     * @memberof StudyRoomExamInVo
     */
    'dutyEdctExamNo'?: number;
}
/**
 * 
 * @export
 * @interface StudyRoomExamItemOutVo
 */
export interface StudyRoomExamItemOutVo {
    /**
     * 직무교육코드
     * @type {string}
     * @memberof StudyRoomExamItemOutVo
     */
    'dutyEdctCd'?: string;
    /**
     * 교육차수번호
     * @type {number}
     * @memberof StudyRoomExamItemOutVo
     */
    'edctDsprNo'?: number;
    /**
     * 교육차수레슨번호
     * @type {number}
     * @memberof StudyRoomExamItemOutVo
     */
    'edctDsprLssoNo'?: number;
    /**
     * 직무교육시험번호
     * @type {number}
     * @memberof StudyRoomExamItemOutVo
     */
    'dutyEdctExamNo'?: number;
    /**
     * 사용자ID
     * @type {string}
     * @memberof StudyRoomExamItemOutVo
     */
    'userId'?: string;
    /**
     * 문항번호
     * @type {number}
     * @memberof StudyRoomExamItemOutVo
     */
    'qsitNo'?: number;
    /**
     * 원본문항보기
     * @type {number}
     * @memberof StudyRoomExamItemOutVo
     */
    'orcpLkngNo'?: number;
    /**
     * 보기번호
     * @type {number}
     * @memberof StudyRoomExamItemOutVo
     */
    'lkngNo'?: number;
    /**
     * 보기내용
     * @type {string}
     * @memberof StudyRoomExamItemOutVo
     */
    'lkngCon'?: string;
    /**
     * 
     * @type {ExamQuestionMultiMediaOutVo}
     * @memberof StudyRoomExamItemOutVo
     */
    'examQuestionMultiMedia'?: ExamQuestionMultiMediaOutVo;
}
/**
 * 문제 리스트
 * @export
 * @interface StudyRoomExamOutVo
 */
export interface StudyRoomExamOutVo {
    /**
     * 직무교육코드
     * @type {string}
     * @memberof StudyRoomExamOutVo
     */
    'dutyEdctCd'?: string;
    /**
     * 교육차수번호
     * @type {number}
     * @memberof StudyRoomExamOutVo
     */
    'edctDsprNo'?: number;
    /**
     * 교육차수레슨번호
     * @type {number}
     * @memberof StudyRoomExamOutVo
     */
    'edctDsprLssoNo'?: number;
    /**
     * 직무교육시험번호
     * @type {number}
     * @memberof StudyRoomExamOutVo
     */
    'dutyEdctExamNo'?: number;
    /**
     * 문항번호
     * @type {number}
     * @memberof StudyRoomExamOutVo
     */
    'qsitNo'?: number;
    /**
     * 원본문항번호
     * @type {number}
     * @memberof StudyRoomExamOutVo
     */
    'orcpQsitNo'?: number;
    /**
     * 문항제목명
     * @type {string}
     * @memberof StudyRoomExamOutVo
     */
    'qsitTtlNm'?: string;
    /**
     * 학습난이도코드
     * @type {string}
     * @memberof StudyRoomExamOutVo
     */
    'lrngDflvDcd'?: string;
    /**
     * 문항해설내용
     * @type {string}
     * @memberof StudyRoomExamOutVo
     */
    'qsitExltCon'?: string;
    /**
     * 보기여부
     * @type {string}
     * @memberof StudyRoomExamOutVo
     */
    'lkngYn'?: string;
    /**
     * 보기개수
     * @type {number}
     * @memberof StudyRoomExamOutVo
     */
    'lkngNmb'?: number;
    /**
     * 문제유형코드
     * @type {string}
     * @memberof StudyRoomExamOutVo
     */
    'qsitKcd'?: string;
    /**
     * 사용자ID
     * @type {string}
     * @memberof StudyRoomExamOutVo
     */
    'userId'?: string;
    /**
     * 서술형 정답
     * @type {string}
     * @memberof StudyRoomExamOutVo
     */
    'dcrnTypRganVl'?: string;
    /**
     * 
     * @type {Array<ExamQuestionMultiMediaOutVo>}
     * @memberof StudyRoomExamOutVo
     */
    'examQuestionMultiMedia'?: Array<ExamQuestionMultiMediaOutVo>;
    /**
     * 
     * @type {Array<StudyRoomExamItemOutVo>}
     * @memberof StudyRoomExamOutVo
     */
    'examItemList'?: Array<StudyRoomExamItemOutVo>;
}
/**
 * 
 * @export
 * @interface StudyRoomExamOutVoWrapper
 */
export interface StudyRoomExamOutVoWrapper {
    /**
     * 문제 리스트
     * @type {Array<StudyRoomExamOutVo>}
     * @memberof StudyRoomExamOutVoWrapper
     */
    'exam'?: Array<StudyRoomExamOutVo>;
    /**
     * 사용자가 응답한 시험지 정보
     * @type {Array<StudyRoomExamAnswerOutVo>}
     * @memberof StudyRoomExamOutVoWrapper
     */
    'answer'?: Array<StudyRoomExamAnswerOutVo>;
}
/**
 * 
 * @export
 * @interface StudyRoomExamSubmitInVo
 */
export interface StudyRoomExamSubmitInVo {
    /**
     * 교육 과정코드
     * @type {string}
     * @memberof StudyRoomExamSubmitInVo
     */
    'dutyEdctCd'?: string;
    /**
     * 차수 번호
     * @type {number}
     * @memberof StudyRoomExamSubmitInVo
     */
    'edctDsprNo'?: number;
    /**
     * 교육차수챕터번호
     * @type {number}
     * @memberof StudyRoomExamSubmitInVo
     */
    'edctDsprChpaNo'?: number;
    /**
     * 레슨번호
     * @type {number}
     * @memberof StudyRoomExamSubmitInVo
     */
    'edctDsprLssoNo'?: number;
    /**
     * 직무교육시험번호
     * @type {number}
     * @memberof StudyRoomExamSubmitInVo
     */
    'dutyEdctExamNo'?: number;
    /**
     * 문항번호
     * @type {number}
     * @memberof StudyRoomExamSubmitInVo
     */
    'qsitNo'?: number;
    /**
     * 원본문항번호
     * @type {number}
     * @memberof StudyRoomExamSubmitInVo
     */
    'orcpQsitNo'?: number;
    /**
     * 답안내용
     * @type {string}
     * @memberof StudyRoomExamSubmitInVo
     */
    'ansrCon'?: string;
}
/**
 * 
 * @export
 * @interface StudyRoomHeaderCountOutVo
 */
export interface StudyRoomHeaderCountOutVo {
    /**
     * 학습현황
     * @type {number}
     * @memberof StudyRoomHeaderCountOutVo
     */
    'studyIngCount'?: number;
    /**
     * 학습일정
     * @type {number}
     * @memberof StudyRoomHeaderCountOutVo
     */
    'studyScheduleCount'?: number;
    /**
     * 연수내역
     * @type {number}
     * @memberof StudyRoomHeaderCountOutVo
     */
    'studyHistoryCount'?: number;
    /**
     * 찜한거
     * @type {number}
     * @memberof StudyRoomHeaderCountOutVo
     */
    'studyLikeCount'?: number;
    /**
     * 수강후기
     * @type {number}
     * @memberof StudyRoomHeaderCountOutVo
     */
    'studyReviewCount'?: number;
}
/**
 * 
 * @export
 * @interface StudyRoomHistoryInVo
 */
export interface StudyRoomHistoryInVo {
    /**
     * 페이지당출력건수
     * @type {number}
     * @memberof StudyRoomHistoryInVo
     */
    'pageSize'?: number;
    /**
     * 페이지번호
     * @type {number}
     * @memberof StudyRoomHistoryInVo
     */
    'pageNo'?: number;
    /**
     * 수강시작일
     * @type {string}
     * @memberof StudyRoomHistoryInVo
     */
    'startDate'?: string;
    /**
     * 수강종료일
     * @type {string}
     * @memberof StudyRoomHistoryInVo
     */
    'endDate'?: string;
    /**
     * 직급
     * @type {string}
     * @memberof StudyRoomHistoryInVo
     */
    'jbclCd'?: string;
    /**
     * 교육방식
     * @type {string}
     * @memberof StudyRoomHistoryInVo
     */
    'edctMthdTcd'?: string;
    /**
     * 수료결과
     * @type {string}
     * @memberof StudyRoomHistoryInVo
     */
    'ctcrYn'?: string;
    /**
     * 연수명
     * @type {string}
     * @memberof StudyRoomHistoryInVo
     */
    'dutyEdctNm'?: string;
}
/**
 * 
 * @export
 * @interface StudyRoomHistoryOutVo
 */
export interface StudyRoomHistoryOutVo {
    /**
     * 
     * @type {string}
     * @memberof StudyRoomHistoryOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudyRoomHistoryOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudyRoomHistoryOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudyRoomHistoryOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudyRoomHistoryOutVo
     */
    'cncrName'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudyRoomHistoryOutVo
     */
    'dutyEdctCd'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudyRoomHistoryOutVo
     */
    'edctClsfVl'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudyRoomHistoryOutVo
     */
    'edctClsfVlPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudyRoomHistoryOutVo
     */
    'opnCtgyVl'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudyRoomHistoryOutVo
     */
    'edctMthdTcd'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudyRoomHistoryOutVo
     */
    'dutyEdctNm'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudyRoomHistoryOutVo
     */
    'evltYn'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudyRoomHistoryOutVo
     */
    'lrngSttgTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudyRoomHistoryOutVo
     */
    'lrngFnshTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudyRoomHistoryOutVo
     */
    'lrngAcknTim'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudyRoomHistoryOutVo
     */
    'ctcrYn'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudyRoomHistoryOutVo
     */
    'ctcrScr'?: string;
}
/**
 * 
 * @export
 * @interface StudyRoomLastLessonOutVo
 */
export interface StudyRoomLastLessonOutVo {
    /**
     * 
     * @type {string}
     * @memberof StudyRoomLastLessonOutVo
     */
    'lastLrngLssoNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudyRoomLastLessonOutVo
     */
    'lastVl'?: string;
}
/**
 * 
 * @export
 * @interface StudyRoomProgressInVo
 */
export interface StudyRoomProgressInVo {
    /**
     * 직무교육코드
     * @type {string}
     * @memberof StudyRoomProgressInVo
     */
    'dutyEdctCd'?: string;
    /**
     * 교육차수번호
     * @type {number}
     * @memberof StudyRoomProgressInVo
     */
    'edctDsprNo'?: number;
    /**
     * 교육차수챕터번호
     * @type {number}
     * @memberof StudyRoomProgressInVo
     */
    'edctDsprChpaNo'?: number;
    /**
     * 교육차수레슨번호
     * @type {number}
     * @memberof StudyRoomProgressInVo
     */
    'edctDsprLssoNo'?: number;
}
/**
 * 
 * @export
 * @interface StudyRoomReportDetailInVo
 */
export interface StudyRoomReportDetailInVo {
    /**
     * 교육 과정코드
     * @type {string}
     * @memberof StudyRoomReportDetailInVo
     */
    'dutyEdctCd'?: string;
    /**
     * 차수 번호
     * @type {number}
     * @memberof StudyRoomReportDetailInVo
     */
    'edctDsprNo'?: number;
    /**
     * 수챕터번호
     * @type {number}
     * @memberof StudyRoomReportDetailInVo
     */
    'edctDsprChpaNo'?: number;
    /**
     * 레슨번호
     * @type {number}
     * @memberof StudyRoomReportDetailInVo
     */
    'edctDsprLssoNo'?: number;
}
/**
 * 
 * @export
 * @interface StudyRoomReportDetailOutVo
 */
export interface StudyRoomReportDetailOutVo {
    /**
     * 
     * @type {string}
     * @memberof StudyRoomReportDetailOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudyRoomReportDetailOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudyRoomReportDetailOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudyRoomReportDetailOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudyRoomReportDetailOutVo
     */
    'cncrName'?: string;
    /**
     * 직무교육코드
     * @type {string}
     * @memberof StudyRoomReportDetailOutVo
     */
    'dutyEdctCd'?: string;
    /**
     * 차수번호
     * @type {number}
     * @memberof StudyRoomReportDetailOutVo
     */
    'edctDsprNo'?: number;
    /**
     * 교육차수챕터번호
     * @type {number}
     * @memberof StudyRoomReportDetailOutVo
     */
    'edctDsprChpaNo'?: number;
    /**
     * 교육차수레슨번호
     * @type {number}
     * @memberof StudyRoomReportDetailOutVo
     */
    'edctDsprLssoNo'?: number;
    /**
     * 과제명
     * @type {string}
     * @memberof StudyRoomReportDetailOutVo
     */
    'taskNm'?: string;
    /**
     * 과제내용
     * @type {string}
     * @memberof StudyRoomReportDetailOutVo
     */
    'taskCon'?: string;
    /**
     * 과제제출기간값
     * @type {string}
     * @memberof StudyRoomReportDetailOutVo
     */
    'taskTrmStupDcd'?: string;
    /**
     * 제출시작일시
     * @type {string}
     * @memberof StudyRoomReportDetailOutVo
     */
    'sbmsSttgTs'?: string;
    /**
     * 제출종료일시
     * @type {string}
     * @memberof StudyRoomReportDetailOutVo
     */
    'sbmsFnshTs'?: string;
    /**
     * 과제제출기간값
     * @type {string}
     * @memberof StudyRoomReportDetailOutVo
     */
    'addSbmsTrmVl'?: string;
    /**
     * 추가제출시작일시
     * @type {string}
     * @memberof StudyRoomReportDetailOutVo
     */
    'addtSbmsSttgTs'?: string;
    /**
     * 추가제출종료일시
     * @type {string}
     * @memberof StudyRoomReportDetailOutVo
     */
    'addtSbmsFnshTs'?: string;
    /**
     * 과제조건여부
     * @type {string}
     * @memberof StudyRoomReportDetailOutVo
     */
    'taskCndtYn'?: string;
    /**
     * 진행율
     * @type {number}
     * @memberof StudyRoomReportDetailOutVo
     */
    'pgrsRt'?: number;
    /**
     * 원본파일명
     * @type {string}
     * @memberof StudyRoomReportDetailOutVo
     */
    'orcpFileNm'?: string;
    /**
     * 저장파일명
     * @type {string}
     * @memberof StudyRoomReportDetailOutVo
     */
    'strgFileNm'?: string;
    /**
     * 파일URL주소
     * @type {string}
     * @memberof StudyRoomReportDetailOutVo
     */
    'fileUrlAdr'?: string;
    /**
     * 클라우드파일URL주소
     * @type {string}
     * @memberof StudyRoomReportDetailOutVo
     */
    'cldFileUrlAdr'?: string;
    /**
     * 파일확장자명
     * @type {string}
     * @memberof StudyRoomReportDetailOutVo
     */
    'fileEtnsNm'?: string;
    /**
     * 파일크기값
     * @type {number}
     * @memberof StudyRoomReportDetailOutVo
     */
    'flszVl'?: number;
    /**
     * 사용여부
     * @type {string}
     * @memberof StudyRoomReportDetailOutVo
     */
    'useYn'?: string;
}
/**
 * 
 * @export
 * @interface StudyRoomReportSubmitInVo
 */
export interface StudyRoomReportSubmitInVo {
    /**
     * 교육 과정코드
     * @type {string}
     * @memberof StudyRoomReportSubmitInVo
     */
    'dutyEdctCd'?: string;
    /**
     * 차수 번호
     * @type {number}
     * @memberof StudyRoomReportSubmitInVo
     */
    'edctDsprNo'?: number;
    /**
     * 수챕터번호
     * @type {number}
     * @memberof StudyRoomReportSubmitInVo
     */
    'edctDsprChpaNo'?: number;
    /**
     * 레슨번호
     * @type {number}
     * @memberof StudyRoomReportSubmitInVo
     */
    'edctDsprLssoNo'?: number;
    /**
     * 과제명
     * @type {string}
     * @memberof StudyRoomReportSubmitInVo
     */
    'taskNm'?: string;
    /**
     * 과제내용
     * @type {string}
     * @memberof StudyRoomReportSubmitInVo
     */
    'taskCon'?: string;
    /**
     * 현재학습객체값
     * @type {number}
     * @memberof StudyRoomReportSubmitInVo
     */
    'currentAcmlPictLen'?: number;
}
/**
 * 
 * @export
 * @interface StudyRoomResultInVo
 */
export interface StudyRoomResultInVo {
    /**
     * 직무교육코드
     * @type {string}
     * @memberof StudyRoomResultInVo
     */
    'dutyEdctCd'?: string;
    /**
     * 교육차수번호
     * @type {number}
     * @memberof StudyRoomResultInVo
     */
    'edctDsprNo'?: number;
    /**
     * 교육차수챕터번호
     * @type {number}
     * @memberof StudyRoomResultInVo
     */
    'edctDsprChpaNo'?: number;
    /**
     * 교육차수레슨번호
     * @type {number}
     * @memberof StudyRoomResultInVo
     */
    'edctDsprLssoNo'?: number;
}
/**
 * 
 * @export
 * @interface StudyRoomSurveyInVo
 */
export interface StudyRoomSurveyInVo {
    /**
     * 설문번호
     * @type {string}
     * @memberof StudyRoomSurveyInVo
     */
    'qstrNo'?: string;
}
/**
 * 
 * @export
 * @interface StudyRoomSurveyOutVo
 */
export interface StudyRoomSurveyOutVo {
    /**
     * 
     * @type {string}
     * @memberof StudyRoomSurveyOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudyRoomSurveyOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudyRoomSurveyOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudyRoomSurveyOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudyRoomSurveyOutVo
     */
    'cncrName'?: string;
    /**
     * 설문번호
     * @type {string}
     * @memberof StudyRoomSurveyOutVo
     */
    'qstrNo'?: string;
    /**
     * 설문유형코드값
     * @type {string}
     * @memberof StudyRoomSurveyOutVo
     */
    'qstrStupTcd'?: string;
    /**
     * 대상지정여부
     * @type {string}
     * @memberof StudyRoomSurveyOutVo
     */
    'tgtDsgtYn'?: string;
    /**
     * 설문명
     * @type {string}
     * @memberof StudyRoomSurveyOutVo
     */
    'qstrNm'?: string;
    /**
     * 설문내용
     * @type {string}
     * @memberof StudyRoomSurveyOutVo
     */
    'qstrCon'?: string;
    /**
     * 사용여부
     * @type {string}
     * @memberof StudyRoomSurveyOutVo
     */
    'useYn'?: string;
    /**
     * 
     * @type {Array<StudyRoomSurveyQuestionOutVo>}
     * @memberof StudyRoomSurveyOutVo
     */
    'surveyQuestion'?: Array<StudyRoomSurveyQuestionOutVo>;
}
/**
 * 
 * @export
 * @interface StudyRoomSurveyQuestionLkngOutVo
 */
export interface StudyRoomSurveyQuestionLkngOutVo {
    /**
     * 설문번호
     * @type {string}
     * @memberof StudyRoomSurveyQuestionLkngOutVo
     */
    'qstrNo'?: string;
    /**
     * 문항번호
     * @type {number}
     * @memberof StudyRoomSurveyQuestionLkngOutVo
     */
    'qsitNo'?: number;
    /**
     * 보기번호
     * @type {number}
     * @memberof StudyRoomSurveyQuestionLkngOutVo
     */
    'lkngNo'?: number;
    /**
     * 보기명
     * @type {string}
     * @memberof StudyRoomSurveyQuestionLkngOutVo
     */
    'lkngCon'?: string;
    /**
     * 사용여부
     * @type {string}
     * @memberof StudyRoomSurveyQuestionLkngOutVo
     */
    'useYn'?: string;
}
/**
 * 
 * @export
 * @interface StudyRoomSurveyQuestionOutVo
 */
export interface StudyRoomSurveyQuestionOutVo {
    /**
     * 설문번호
     * @type {string}
     * @memberof StudyRoomSurveyQuestionOutVo
     */
    'qstrNo'?: string;
    /**
     * 문항번호
     * @type {number}
     * @memberof StudyRoomSurveyQuestionOutVo
     */
    'qsitNo'?: number;
    /**
     * 원본문항번호
     * @type {number}
     * @memberof StudyRoomSurveyQuestionOutVo
     */
    'orcpQsitNo'?: number;
    /**
     * 문항명
     * @type {string}
     * @memberof StudyRoomSurveyQuestionOutVo
     */
    'qsitTtlNm'?: string;
    /**
     * 문항내용
     * @type {string}
     * @memberof StudyRoomSurveyQuestionOutVo
     */
    'qsitCon'?: string;
    /**
     * 보기개수
     * @type {number}
     * @memberof StudyRoomSurveyQuestionOutVo
     */
    'lkngNmb'?: number;
    /**
     * 척도번호
     * @type {number}
     * @memberof StudyRoomSurveyQuestionOutVo
     */
    'mesrNo'?: number;
    /**
     * 사용여부
     * @type {string}
     * @memberof StudyRoomSurveyQuestionOutVo
     */
    'useYn'?: string;
    /**
     * 문항유형코드
     * @type {string}
     * @memberof StudyRoomSurveyQuestionOutVo
     */
    'qsitKcd'?: string;
    /**
     * 
     * @type {Array<StudyRoomSurveyQuestionLkngOutVo>}
     * @memberof StudyRoomSurveyQuestionOutVo
     */
    'surveyQuestionLkng'?: Array<StudyRoomSurveyQuestionLkngOutVo>;
}
/**
 * 설문 제출 목록
 * @export
 * @interface StudyRoomSurveySubmitInVo
 */
export interface StudyRoomSurveySubmitInVo {
    /**
     * 교육 과정코드
     * @type {string}
     * @memberof StudyRoomSurveySubmitInVo
     */
    'dutyEdctCd'?: string;
    /**
     * 차수 번호
     * @type {number}
     * @memberof StudyRoomSurveySubmitInVo
     */
    'edctDsprNo'?: number;
    /**
     * 교육차수챕터번호
     * @type {number}
     * @memberof StudyRoomSurveySubmitInVo
     */
    'edctDsprChpaNo'?: number;
    /**
     * 교육차수레슨번호
     * @type {number}
     * @memberof StudyRoomSurveySubmitInVo
     */
    'edctDsprLssoNo'?: number;
    /**
     * 설문번호
     * @type {number}
     * @memberof StudyRoomSurveySubmitInVo
     */
    'qstrNo'?: number;
    /**
     * 문항번호
     * @type {number}
     * @memberof StudyRoomSurveySubmitInVo
     */
    'qsitNo'?: number;
    /**
     * 답변내용
     * @type {string}
     * @memberof StudyRoomSurveySubmitInVo
     */
    'ansrCon'?: string;
    /**
     * 사용여부
     * @type {string}
     * @memberof StudyRoomSurveySubmitInVo
     */
    'useYn'?: string;
    /**
     * 현재학습객체값
     * @type {number}
     * @memberof StudyRoomSurveySubmitInVo
     */
    'currentAcmlPictLen'?: number;
}
/**
 * 
 * @export
 * @interface StudyRoomSurveySubmitInVoList
 */
export interface StudyRoomSurveySubmitInVoList {
    /**
     * 설문 제출 목록
     * @type {Array<StudyRoomSurveySubmitInVo>}
     * @memberof StudyRoomSurveySubmitInVoList
     */
    'inVo'?: Array<StudyRoomSurveySubmitInVo>;
}
/**
 * 
 * @export
 * @interface TopSearchInVo
 */
export interface TopSearchInVo {
    /**
     * 페이지당출력건수
     * @type {number}
     * @memberof TopSearchInVo
     */
    'pageSize'?: number;
    /**
     * 페이지번호
     * @type {number}
     * @memberof TopSearchInVo
     */
    'pageNo'?: number;
    /**
     * 검색어
     * @type {string}
     * @memberof TopSearchInVo
     */
    'searchText'?: string;
}
/**
 * 
 * @export
 * @interface UserAppOutVo
 */
export interface UserAppOutVo {
    /**
     * motp화면토큰
     * @type {string}
     * @memberof UserAppOutVo
     */
    'token'?: string;
}
/**
 * 대상자
 * @export
 * @interface UserInVo
 */
export interface UserInVo {
    /**
     * 회사코드
     * @type {string}
     * @memberof UserInVo
     */
    'cmpnDcdVl'?: string;
    /**
     * 사용자ID
     * @type {string}
     * @memberof UserInVo
     */
    'userId'?: string;
    /**
     * 사용자비밀번호
     * @type {string}
     * @memberof UserInVo
     */
    'userPwd'?: string;
    /**
     * 사용자타입코드
     * @type {string}
     * @memberof UserInVo
     */
    'userPtrnVl'?: string;
    /**
     * 사용자명
     * @type {string}
     * @memberof UserInVo
     */
    'userNm'?: string;
    /**
     * 사원번호
     * @type {string}
     * @memberof UserInVo
     */
    'emplNo'?: string;
    /**
     * 본부코드값
     * @type {string}
     * @memberof UserInVo
     */
    'blngHdqrDsncVl'?: string;
    /**
     * 본부명
     * @type {string}
     * @memberof UserInVo
     */
    'blngHdqrDsncNm'?: string;
    /**
     * 지역본부코드값
     * @type {string}
     * @memberof UserInVo
     */
    'arhdDsncVl'?: string;
    /**
     * 지역본부명
     * @type {string}
     * @memberof UserInVo
     */
    'arhdDsncNm'?: string;
    /**
     * 부서코드값
     * @type {string}
     * @memberof UserInVo
     */
    'deptDsncVl'?: string;
    /**
     * 부서명
     * @type {string}
     * @memberof UserInVo
     */
    'deptDsncNm'?: string;
    /**
     * 소속부서년월일
     * @type {string}
     * @memberof UserInVo
     */
    'blngDeptOfodYmd'?: string;
    /**
     * 팀코드값
     * @type {string}
     * @memberof UserInVo
     */
    'tmorVl'?: string;
    /**
     * 팀명
     * @type {string}
     * @memberof UserInVo
     */
    'tmorNm'?: string;
    /**
     * 직급코드
     * @type {string}
     * @memberof UserInVo
     */
    'jbclCd'?: string;
    /**
     * 직급승급년월일
     * @type {string}
     * @memberof UserInVo
     */
    'jbclYmd'?: string;
    /**
     * 직위코드값
     * @type {string}
     * @memberof UserInVo
     */
    'jbttDsncVl'?: string;
    /**
     * 직위명
     * @type {string}
     * @memberof UserInVo
     */
    'jbttDsncNm'?: string;
    /**
     * 직위년월일
     * @type {string}
     * @memberof UserInVo
     */
    'jbttYmd'?: string;
    /**
     * 직위순서
     * @type {number}
     * @memberof UserInVo
     */
    'jbttSqc'?: number;
    /**
     * 명부순서
     * @type {number}
     * @memberof UserInVo
     */
    'rostSqc'?: number;
    /**
     * 직책코드값
     * @type {string}
     * @memberof UserInVo
     */
    'rsptDsncVl'?: string;
    /**
     * 직책명
     * @type {string}
     * @memberof UserInVo
     */
    'rsptDsncNm'?: string;
    /**
     * 보임코드
     * @type {string}
     * @memberof UserInVo
     */
    'mndtDsncVl'?: string;
    /**
     * 보임명
     * @type {string}
     * @memberof UserInVo
     */
    'mndtDsncNm'?: string;
    /**
     * 보임년월일
     * @type {string}
     * @memberof UserInVo
     */
    'mndtYmd'?: string;
    /**
     * 입행년월일
     * @type {string}
     * @memberof UserInVo
     */
    'etbnYmd'?: string;
    /**
     * 정원구분코드
     * @type {string}
     * @memberof UserInVo
     */
    'rgsfPtrnVl'?: string;
    /**
     * 정원구분명
     * @type {string}
     * @memberof UserInVo
     */
    'rgsfPtvlNm'?: string;
    /**
     * 입행코드값
     * @type {string}
     * @memberof UserInVo
     */
    'etbnDsncVl'?: string;
    /**
     * 약관동의여부
     * @type {string}
     * @memberof UserInVo
     */
    'spagYn'?: string;
    /**
     * 호봉코드값
     * @type {string}
     * @memberof UserInVo
     */
    'slclGrd'?: string;
    /**
     * 재직상태코드
     * @type {string}
     * @memberof UserInVo
     */
    'hlofSttsVl'?: string;
    /**
     * 부점구분코드값
     * @type {string}
     * @memberof UserInVo
     */
    'brncPtrnVl'?: string;
    /**
     * 생년월일
     * @type {string}
     * @memberof UserInVo
     */
    'birtYmd'?: string;
    /**
     * 실제생년월일
     * @type {string}
     * @memberof UserInVo
     */
    'trthBirtYmd'?: string;
    /**
     * 책임자시험합격년
     * @type {string}
     * @memberof UserInVo
     */
    'sprsExamSieYy'?: string;
    /**
     * CP업체코드
     * @type {string}
     * @memberof UserInVo
     */
    'edinId'?: string;
    /**
     * 연동년월일
     * @type {string}
     * @memberof UserInVo
     */
    'gearYmd'?: string;
    /**
     * 패스원드변경일시
     * @type {string}
     * @memberof UserInVo
     */
    'pswdMdfcTs'?: string;
    /**
     * 직책구분코드
     * @type {string}
     * @memberof UserInVo
     */
    'rsptDcd'?: string;
    /**
     * 서무여부
     * @type {string}
     * @memberof UserInVo
     */
    'gnafYn'?: string;
    /**
     * 사용자모바일단말기OS구분코드값
     * @type {string}
     * @memberof UserInVo
     */
    'userMblTrunOpssDsncVl'?: string;
    /**
     * 모바일토큰값
     * @type {string}
     * @memberof UserInVo
     */
    'mblTknVl'?: string;
    /**
     * 모바일푸쉬토큰값
     * @type {string}
     * @memberof UserInVo
     */
    'mblPushTknVl'?: string;
    /**
     * 모바일푸쉬토큰허용여부
     * @type {string}
     * @memberof UserInVo
     */
    'mblPushTknAlwnYn'?: string;
    /**
     * 사용자이메일주소
     * @type {string}
     * @memberof UserInVo
     */
    'userEad'?: string;
    /**
     * 사용자전화번호
     * @type {string}
     * @memberof UserInVo
     */
    'oohCnplCon'?: string;
    /**
     * 회사전화번호
     * @type {string}
     * @memberof UserInVo
     */
    'rsprCnplCon'?: string;
    /**
     * 이동전화번호
     * @type {string}
     * @memberof UserInVo
     */
    'cpn'?: string;
    /**
     * 사진파일명
     * @type {string}
     * @memberof UserInVo
     */
    'phtgFileNm'?: string;
    /**
     * 우편번호
     * @type {string}
     * @memberof UserInVo
     */
    'zpcdVl'?: string;
    /**
     * 사용자주소
     * @type {string}
     * @memberof UserInVo
     */
    'userAdr'?: string;
    /**
     * 사용자상세주소
     * @type {string}
     * @memberof UserInVo
     */
    'userDtlAdr'?: string;
    /**
     * 테스트계정여부
     * @type {string}
     * @memberof UserInVo
     */
    'testAcitYn'?: string;
    /**
     * 2차인증여부
     * @type {string}
     * @memberof UserInVo
     */
    'tms2CrtcYn'?: string;
    /**
     * 임시사용자여부
     * @type {string}
     * @memberof UserInVo
     */
    'tmprUserYn'?: string;
    /**
     * 사용자상태코드
     * @type {string}
     * @memberof UserInVo
     */
    'useYn'?: string;
}
/**
 * 
 * @export
 * @interface UserOutVo
 */
export interface UserOutVo {
    /**
     * 
     * @type {string}
     * @memberof UserOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserOutVo
     */
    'cncrName'?: string;
    /**
     * 회사코드
     * @type {string}
     * @memberof UserOutVo
     */
    'cmpnDcdVl'?: string;
    /**
     * 회사명
     * @type {string}
     * @memberof UserOutVo
     */
    'cmpnNm'?: string;
    /**
     * 사용자ID
     * @type {string}
     * @memberof UserOutVo
     */
    'userId'?: string;
    /**
     * 사용자비밀번호
     * @type {string}
     * @memberof UserOutVo
     */
    'userPwd'?: string;
    /**
     * 사용자타입코드
     * @type {string}
     * @memberof UserOutVo
     */
    'userPtrnVl'?: string;
    /**
     * 사용자타입명
     * @type {string}
     * @memberof UserOutVo
     */
    'userTypeNm'?: string;
    /**
     * 사용자명
     * @type {string}
     * @memberof UserOutVo
     */
    'userNm'?: string;
    /**
     * 사원번호
     * @type {string}
     * @memberof UserOutVo
     */
    'emplNo'?: string;
    /**
     * 본부코드값
     * @type {string}
     * @memberof UserOutVo
     */
    'blngHdqrDsncVl'?: string;
    /**
     * 본부명
     * @type {string}
     * @memberof UserOutVo
     */
    'blngHdqrDsncNm'?: string;
    /**
     * 지역본부코드값
     * @type {string}
     * @memberof UserOutVo
     */
    'arhdDsncVl'?: string;
    /**
     * 지역본부명
     * @type {string}
     * @memberof UserOutVo
     */
    'arhdDsncNm'?: string;
    /**
     * 부서코드값
     * @type {string}
     * @memberof UserOutVo
     */
    'deptDsncVl'?: string;
    /**
     * 부서명
     * @type {string}
     * @memberof UserOutVo
     */
    'deptDsncNm'?: string;
    /**
     * 소속부서년월일
     * @type {string}
     * @memberof UserOutVo
     */
    'blngDeptOfodYmd'?: string;
    /**
     * 팀코드값
     * @type {string}
     * @memberof UserOutVo
     */
    'tmorVl'?: string;
    /**
     * 팀명
     * @type {string}
     * @memberof UserOutVo
     */
    'tmorNm'?: string;
    /**
     * 직급코드
     * @type {string}
     * @memberof UserOutVo
     */
    'jbclCd'?: string;
    /**
     * 직급승급년월일
     * @type {string}
     * @memberof UserOutVo
     */
    'jbclYmd'?: string;
    /**
     * 직위코드값
     * @type {string}
     * @memberof UserOutVo
     */
    'jbttDsncVl'?: string;
    /**
     * 직위명
     * @type {string}
     * @memberof UserOutVo
     */
    'jbttDsncNm'?: string;
    /**
     * 직위년월일
     * @type {string}
     * @memberof UserOutVo
     */
    'jbttYmd'?: string;
    /**
     * 직위순서
     * @type {number}
     * @memberof UserOutVo
     */
    'jbttSqc'?: number;
    /**
     * 명부순서
     * @type {number}
     * @memberof UserOutVo
     */
    'rostSqc'?: number;
    /**
     * 직책코드값
     * @type {string}
     * @memberof UserOutVo
     */
    'rsptDsncVl'?: string;
    /**
     * 직책명
     * @type {string}
     * @memberof UserOutVo
     */
    'rsptDsncNm'?: string;
    /**
     * 보임코드
     * @type {string}
     * @memberof UserOutVo
     */
    'mndtDsncVl'?: string;
    /**
     * 보임명
     * @type {string}
     * @memberof UserOutVo
     */
    'mndtDsncNm'?: string;
    /**
     * 보임년월일
     * @type {string}
     * @memberof UserOutVo
     */
    'mndtYmd'?: string;
    /**
     * 입행년월일
     * @type {string}
     * @memberof UserOutVo
     */
    'etbnYmd'?: string;
    /**
     * 정원구분코드
     * @type {string}
     * @memberof UserOutVo
     */
    'rgsfPtrnVl'?: string;
    /**
     * 정원구분명
     * @type {string}
     * @memberof UserOutVo
     */
    'rgsfPtvlNm'?: string;
    /**
     * 입행코드값
     * @type {string}
     * @memberof UserOutVo
     */
    'etbnDsncVl'?: string;
    /**
     * 약관동의여부
     * @type {string}
     * @memberof UserOutVo
     */
    'spagYn'?: string;
    /**
     * 호봉코드값
     * @type {string}
     * @memberof UserOutVo
     */
    'slclGrd'?: string;
    /**
     * 재직상태코드
     * @type {string}
     * @memberof UserOutVo
     */
    'hlofSttsVl'?: string;
    /**
     * 재직상태명
     * @type {string}
     * @memberof UserOutVo
     */
    'hlofSnm'?: string;
    /**
     * 부점구분코드값
     * @type {string}
     * @memberof UserOutVo
     */
    'brncPtrnVl'?: string;
    /**
     * 생년월일
     * @type {string}
     * @memberof UserOutVo
     */
    'birtYmd'?: string;
    /**
     * 실제생년월일
     * @type {string}
     * @memberof UserOutVo
     */
    'trthBirtYmd'?: string;
    /**
     * 책임자시험합격년
     * @type {string}
     * @memberof UserOutVo
     */
    'sprsExamSieYy'?: string;
    /**
     * CP업체코드
     * @type {string}
     * @memberof UserOutVo
     */
    'edinId'?: string;
    /**
     * 연동년월일
     * @type {string}
     * @memberof UserOutVo
     */
    'gearYmd'?: string;
    /**
     * 패스원드변경일시
     * @type {string}
     * @memberof UserOutVo
     */
    'pswdMdfcTs'?: string;
    /**
     * 직책구분코드
     * @type {string}
     * @memberof UserOutVo
     */
    'rsptDcd'?: string;
    /**
     * 서무여부
     * @type {string}
     * @memberof UserOutVo
     */
    'gnafYn'?: string;
    /**
     * 사용자모바일단말기OS구분코드값
     * @type {string}
     * @memberof UserOutVo
     */
    'userMblTrunOpssDsncVl'?: string;
    /**
     * 모바일토큰값
     * @type {string}
     * @memberof UserOutVo
     */
    'mblTknVl'?: string;
    /**
     * 모바일푸쉬토큰값
     * @type {string}
     * @memberof UserOutVo
     */
    'mblPushTknVl'?: string;
    /**
     * 모바일푸쉬토큰허용여부
     * @type {string}
     * @memberof UserOutVo
     */
    'mblPushTknAlwnYn'?: string;
    /**
     * 사용자이메일주소
     * @type {string}
     * @memberof UserOutVo
     */
    'userEad'?: string;
    /**
     * 사용자전화번호
     * @type {string}
     * @memberof UserOutVo
     */
    'oohCnplCon'?: string;
    /**
     * 회사전화번호
     * @type {string}
     * @memberof UserOutVo
     */
    'rsprCnplCon'?: string;
    /**
     * 이동전화번호
     * @type {string}
     * @memberof UserOutVo
     */
    'cpn'?: string;
    /**
     * 사진파일명
     * @type {string}
     * @memberof UserOutVo
     */
    'phtgFileNm'?: string;
    /**
     * 우편번호
     * @type {string}
     * @memberof UserOutVo
     */
    'zpcdVl'?: string;
    /**
     * 사용자주소
     * @type {string}
     * @memberof UserOutVo
     */
    'userAdr'?: string;
    /**
     * 사용자상세주소
     * @type {string}
     * @memberof UserOutVo
     */
    'userDtlAdr'?: string;
    /**
     * 테스트계정여부
     * @type {string}
     * @memberof UserOutVo
     */
    'testAcitYn'?: string;
    /**
     * 2차인증여부
     * @type {string}
     * @memberof UserOutVo
     */
    'tms2CrtcYn'?: string;
    /**
     * 임시사용자여부
     * @type {string}
     * @memberof UserOutVo
     */
    'tmprUserYn'?: string;
    /**
     * 사용자상태코드
     * @type {string}
     * @memberof UserOutVo
     */
    'useYn'?: string;
    /**
     * JWT TOKEN
     * @type {string}
     * @memberof UserOutVo
     */
    'accessToken'?: string;
}
/**
 * 
 * @export
 * @interface UserPageInqInVo
 */
export interface UserPageInqInVo {
    /**
     * 페이지당출력건수
     * @type {number}
     * @memberof UserPageInqInVo
     */
    'pageSize'?: number;
    /**
     * 페이지번호
     * @type {number}
     * @memberof UserPageInqInVo
     */
    'pageNo'?: number;
    /**
     * 페이지그룹조회여부
     * @type {string}
     * @memberof UserPageInqInVo
     */
    'pageGrpInqYn'?: string;
    /**
     * 페이지그룹수
     * @type {number}
     * @memberof UserPageInqInVo
     */
    'pageGrpNbi'?: number;
    /**
     * 회사코드
     * @type {string}
     * @memberof UserPageInqInVo
     */
    'cmpnDcdVl'?: string;
    /**
     * 사용자유형코드
     * @type {string}
     * @memberof UserPageInqInVo
     */
    'userPtrnVl'?: string;
    /**
     * 재직상태코드
     * @type {string}
     * @memberof UserPageInqInVo
     */
    'hlofSttsVl'?: string;
    /**
     * 직급코드
     * @type {string}
     * @memberof UserPageInqInVo
     */
    'jbclCd'?: string;
    /**
     * 직책코드
     * @type {string}
     * @memberof UserPageInqInVo
     */
    'rsptDsncVl'?: string;
    /**
     * 임시사용자여부
     * @type {string}
     * @memberof UserPageInqInVo
     */
    'tmprUserYn'?: string;
    /**
     * 성명/회원ID
     * @type {string}
     * @memberof UserPageInqInVo
     */
    'userNameId'?: string;
    /**
     * 성명/사번
     * @type {string}
     * @memberof UserPageInqInVo
     */
    'keyword'?: string;
    /**
     * 소속명
     * @type {string}
     * @memberof UserPageInqInVo
     */
    'tmorNm'?: string;
    /**
     * 사용여부
     * @type {string}
     * @memberof UserPageInqInVo
     */
    'useYn'?: string;
}
/**
 * 
 * @export
 * @interface UserPswdCheckOutVo
 */
export interface UserPswdCheckOutVo {
    /**
     * 
     * @type {string}
     * @memberof UserPswdCheckOutVo
     */
    'cretTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserPswdCheckOutVo
     */
    'cncrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserPswdCheckOutVo
     */
    'hrdSysLastMdfrId'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserPswdCheckOutVo
     */
    'hrdSysLastMdfcTs'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserPswdCheckOutVo
     */
    'cncrName'?: string;
    /**
     * 암호화패스워드
     * @type {string}
     * @memberof UserPswdCheckOutVo
     */
    'encryptPswd'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserPswdCheckOutVo
     */
    'samePassword'?: boolean;
}
/**
 * 
 * @export
 * @interface UserPswdSearchInVo
 */
export interface UserPswdSearchInVo {
    /**
     * 발송타입
     * @type {string}
     * @memberof UserPswdSearchInVo
     */
    'sendType'?: string;
    /**
     * 회원유형
     * @type {string}
     * @memberof UserPswdSearchInVo
     */
    'userPtrnVl'?: string;
    /**
     * 사원번호
     * @type {string}
     * @memberof UserPswdSearchInVo
     */
    'emplNo'?: string;
    /**
     * 사용자이름
     * @type {string}
     * @memberof UserPswdSearchInVo
     */
    'userNm'?: string;
    /**
     * 생년월일
     * @type {string}
     * @memberof UserPswdSearchInVo
     */
    'birtYmd'?: string;
    /**
     * 휴대폰번호
     * @type {string}
     * @memberof UserPswdSearchInVo
     */
    'cpn'?: string;
    /**
     * 이메일주소
     * @type {string}
     * @memberof UserPswdSearchInVo
     */
    'userEad'?: string;
}
/**
 * 
 * @export
 * @interface UserUpdateInVo
 */
export interface UserUpdateInVo {
    /**
     * 사용자 바뀔 비밀번호
     * @type {string}
     * @memberof UserUpdateInVo
     */
    'userPwd'?: string;
    /**
     * 사용자이메일주소
     * @type {string}
     * @memberof UserUpdateInVo
     */
    'userEad'?: string;
    /**
     * 이동전화번호
     * @type {string}
     * @memberof UserUpdateInVo
     */
    'cpn'?: string;
    /**
     * 우편번호
     * @type {string}
     * @memberof UserUpdateInVo
     */
    'zpcdVl'?: string;
    /**
     * 사용자주소
     * @type {string}
     * @memberof UserUpdateInVo
     */
    'userAdr'?: string;
    /**
     * 사용자상세주소
     * @type {string}
     * @memberof UserUpdateInVo
     */
    'userDtlAdr'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 현재 수강중 인지 체크하는 API
         * @summary 현재 수강중 인지 체크
         * @param {StudyRoomCourseDegreeCheckInVo} studyRoomCourseDegreeCheckInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkCourseDegree: async (studyRoomCourseDegreeCheckInVo: StudyRoomCourseDegreeCheckInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyRoomCourseDegreeCheckInVo' is not null or undefined
            assertParamExists('checkCourseDegree', 'studyRoomCourseDegreeCheckInVo', studyRoomCourseDegreeCheckInVo)
            const localVarPath = `/v1/user/studyRoom/courseDegree/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(studyRoomCourseDegreeCheckInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * GET 샘플
         * @summary GET 샘플
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSample: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/health/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * GET 샘플
         * @summary GET 샘플
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSampleList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/health/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 헬스 체크
         * @summary 헬스 체크
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheck: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/health/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 나의 학습일정 리스트 api
         * @summary 부점 학습일정 리스트
         * @param {ArhdStudyCalendarListInVo} arhdStudyCalendarListInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqArhdStudyCalendarList: async (arhdStudyCalendarListInVo: ArhdStudyCalendarListInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'arhdStudyCalendarListInVo' is not null or undefined
            assertParamExists('inqArhdStudyCalendarList', 'arhdStudyCalendarListInVo', arhdStudyCalendarListInVo)
            const localVarPath = `/v1/study/calendar/arhd/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(arhdStudyCalendarListInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 강의 실 과제 상세 API
         * @summary 강의실 과제 상세
         * @param {StudyRoomReportDetailInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqAssignmentDetail: async (arg0: StudyRoomReportDetailInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'arg0' is not null or undefined
            assertParamExists('inqAssignmentDetail', 'arg0', arg0)
            const localVarPath = `/v1/user/studyRoom/report/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (arg0 !== undefined) {
                for (const [key, value] of Object.entries(arg0)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 강의실 과제 제출한거 가져오는 API
         * @summary 강의실 과제 제출 한거 가져 오기
         * @param {StudyRoomReportSubmitInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqAssignmentSubmit: async (arg0: StudyRoomReportSubmitInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'arg0' is not null or undefined
            assertParamExists('inqAssignmentSubmit', 'arg0', arg0)
            const localVarPath = `/v1/user/studyRoom/report/get/submit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (arg0 !== undefined) {
                for (const [key, value] of Object.entries(arg0)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 사용자 페이지 리스트 api
         * @summary 사용자 페이지 리스트
         * @param {AuthMemberUserPageInqInVo} authMemberUserPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqAuthMemberUserPage: async (authMemberUserPageInqInVo: AuthMemberUserPageInqInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authMemberUserPageInqInVo' is not null or undefined
            assertParamExists('inqAuthMemberUserPage', 'authMemberUserPageInqInVo', authMemberUserPageInqInVo)
            const localVarPath = `/v1/user/course/user/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authMemberUserPageInqInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 강의실 연수 목차 API
         * @summary 강의실 연수 목차
         * @param {StudyRoomContentsInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqChapterLesson: async (arg0: StudyRoomContentsInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'arg0' is not null or undefined
            assertParamExists('inqChapterLesson', 'arg0', arg0)
            const localVarPath = `/v1/user/studyRoom/chapter/lesson`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (arg0 !== undefined) {
                for (const [key, value] of Object.entries(arg0)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 공통 연수/차수 페이징 리스트 API
         * @summary 공통 연수/차수 페이징 리스트
         * @param {CommonCourseDegreePageInVo} commonCourseDegreePageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqCommonCourseDegreePage: async (commonCourseDegreePageInVo: CommonCourseDegreePageInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commonCourseDegreePageInVo' is not null or undefined
            assertParamExists('inqCommonCourseDegreePage', 'commonCourseDegreePageInVo', commonCourseDegreePageInVo)
            const localVarPath = `/v1/user/master/course/common/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(commonCourseDegreePageInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 강의실 수강신청 취소 및 변경 차수명 리스트 API
         * @summary 강의실 수강신청 취소 및 변경 차수명 리스트
         * @param {StudyRoomCourseDegreeCancelListInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqCourseDegreeCancelList: async (arg0: StudyRoomCourseDegreeCancelListInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'arg0' is not null or undefined
            assertParamExists('inqCourseDegreeCancelList', 'arg0', arg0)
            const localVarPath = `/v1/user/studyRoom/courseDegree/cancel/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (arg0 !== undefined) {
                for (const [key, value] of Object.entries(arg0)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 연수 이력 API
         * @summary 연수 이력
         * @param {CourseDegreeLessonHistoryInVo} courseDegreeLessonHistoryInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqCourseDegreeLessonHistory: async (courseDegreeLessonHistoryInVo: CourseDegreeLessonHistoryInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseDegreeLessonHistoryInVo' is not null or undefined
            assertParamExists('inqCourseDegreeLessonHistory', 'courseDegreeLessonHistoryInVo', courseDegreeLessonHistoryInVo)
            const localVarPath = `/v1/user/studyRoom/courseDegree/lessonHistory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(courseDegreeLessonHistoryInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 나의강의실 종료 연수 API
         * @summary 나의강의실 종료 연수
         * @param {MyPageInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqEndCourseDegree: async (arg0: MyPageInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'arg0' is not null or undefined
            assertParamExists('inqEndCourseDegree', 'arg0', arg0)
            const localVarPath = `/v1/user/studyRoom/courseDegree/end`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (arg0 !== undefined) {
                for (const [key, value] of Object.entries(arg0)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 강의실 시험지 생성 API
         * @summary 강의실 시험지 생성
         * @param {StudyRoomExamInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqExamEnter: async (arg0: StudyRoomExamInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'arg0' is not null or undefined
            assertParamExists('inqExamEnter', 'arg0', arg0)
            const localVarPath = `/v1/user/studyRoom/exam/enter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (arg0 !== undefined) {
                for (const [key, value] of Object.entries(arg0)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 강의실 연수 내역 API
         * @summary 강의실 연수 내역
         * @param {StudyRoomHistoryInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqHistoryCourseDegree: async (arg0: StudyRoomHistoryInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'arg0' is not null or undefined
            assertParamExists('inqHistoryCourseDegree', 'arg0', arg0)
            const localVarPath = `/v1/user/studyRoom/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (arg0 !== undefined) {
                for (const [key, value] of Object.entries(arg0)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 나의강의실 학습중 연수 API
         * @summary 나의강의실 학습중 연수
         * @param {MyPageInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIngCourseDegree: async (arg0: MyPageInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'arg0' is not null or undefined
            assertParamExists('inqIngCourseDegree', 'arg0', arg0)
            const localVarPath = `/v1/user/studyRoom/courseDegree/ing`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (arg0 !== undefined) {
                for (const [key, value] of Object.entries(arg0)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 강의실 차수 마지막 레슨 가져오기 API
         * @summary 강의실 차수 마지막 레슨 가져오기
         * @param {StudyRoomContentsInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqLastLesson: async (arg0: StudyRoomContentsInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'arg0' is not null or undefined
            assertParamExists('inqLastLesson', 'arg0', arg0)
            const localVarPath = `/v1/user/studyRoom/chapter/lastLesson`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (arg0 !== undefined) {
                for (const [key, value] of Object.entries(arg0)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 나의강의실 찜한 연수 API
         * @summary 나의강의실 찜한 연수
         * @param {MyPageInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqLikeCourseDegree: async (arg0: MyPageInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'arg0' is not null or undefined
            assertParamExists('inqLikeCourseDegree', 'arg0', arg0)
            const localVarPath = `/v1/user/studyRoom/courseDegree/like`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (arg0 !== undefined) {
                for (const [key, value] of Object.entries(arg0)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 상담 검색 연수 API
         * @summary 상담 검색 연수
         * @param {TopSearchInVo} topSearchInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqMasterCourse: async (topSearchInVo: TopSearchInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'topSearchInVo' is not null or undefined
            assertParamExists('inqMasterCourse', 'topSearchInVo', topSearchInVo)
            const localVarPath = `/v1/top/search/masterCourse`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(topSearchInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 마스터 과정 개설 카테고리 다건 조회
         * @summary 마스터 과정 개설 카테고리 다건 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqMasterCourseDisplayCategoryList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/master/course/display/category/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 나의강의실 나의 강의 API
         * @summary 나의강의실 나의 강의
         * @param {MyPageInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqMyLessonCourseDegree: async (arg0: MyPageInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'arg0' is not null or undefined
            assertParamExists('inqMyLessonCourseDegree', 'arg0', arg0)
            const localVarPath = `/v1/user/studyRoom/courseDegree/myLesson`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (arg0 !== undefined) {
                for (const [key, value] of Object.entries(arg0)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 나의강의실 상단 카운트 API
         * @summary 나의강의실 상단 카운트
         * @param {object} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqMyPageHeader: async (arg0: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'arg0' is not null or undefined
            assertParamExists('inqMyPageHeader', 'arg0', arg0)
            const localVarPath = `/v1/user/studyRoom/header/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (arg0 !== undefined) {
                for (const [key, value] of Object.entries(arg0)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 나의 대표 스킬 정보 조회
         * @summary 나의 대표 스킬 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqMySkill: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/studyRoom/mySkill/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 마이페이지 스킬 카테고리 통계
         * @summary 마이페이지 스킬 카테고리 통계
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqMySkillCategoryStatistics: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/studyRoom/mySkill/category/statistics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 마이페이지 스킬 카테고리 상세 통계
         * @summary 마이페이지 스킬 카테고리 상세 통계
         * @param {MySkillCategoryStatisticsDetailInVo} mySkillCategoryStatisticsDetailInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqMySkillCategoryStatisticsDetail: async (mySkillCategoryStatisticsDetailInVo: MySkillCategoryStatisticsDetailInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mySkillCategoryStatisticsDetailInVo' is not null or undefined
            assertParamExists('inqMySkillCategoryStatisticsDetail', 'mySkillCategoryStatisticsDetailInVo', mySkillCategoryStatisticsDetailInVo)
            const localVarPath = `/v1/user/studyRoom/mySkill/category/statistics/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mySkillCategoryStatisticsDetailInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 나의 학습일정 리스트 api
         * @summary 나의 학습일정 리스트
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqMyStudyCalendarList: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('inqMyStudyCalendarList', 'body', body)
            const localVarPath = `/v1/study/calendar/my/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ExamBlbrPageInqInVo} examBlbrPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqPbnsPage: async (examBlbrPageInqInVo: ExamBlbrPageInqInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'examBlbrPageInqInVo' is not null or undefined
            assertParamExists('inqPbnsPage', 'examBlbrPageInqInVo', examBlbrPageInqInVo)
            const localVarPath = `/v1/health/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(examBlbrPageInqInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ExamBlbrPageInqInVo} examBlbrPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqPbnsPage2: async (examBlbrPageInqInVo: ExamBlbrPageInqInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'examBlbrPageInqInVo' is not null or undefined
            assertParamExists('inqPbnsPage2', 'examBlbrPageInqInVo', examBlbrPageInqInVo)
            const localVarPath = `/v1/health/page2`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(examBlbrPageInqInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 이전 배송지 주소 불러오기 API
         * @summary 이전 배송지 주소 불러오기
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqPreviousAddress: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/course/previous/address`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 강의실 진도로그 API
         * @summary 강의실 진도로그
         * @param {StudyRoomProgressInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqProgressLog: async (arg0: StudyRoomProgressInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'arg0' is not null or undefined
            assertParamExists('inqProgressLog', 'arg0', arg0)
            const localVarPath = `/v1/user/studyRoom/vod/progress`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (arg0 !== undefined) {
                for (const [key, value] of Object.entries(arg0)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 상단 소셜러닝 검색 API
         * @summary 상단 소셜러닝 검색
         * @param {TopSearchInVo} topSearchInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqSocialLearning: async (topSearchInVo: TopSearchInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'topSearchInVo' is not null or undefined
            assertParamExists('inqSocialLearning', 'topSearchInVo', topSearchInVo)
            const localVarPath = `/v1/top/search/socialLearning`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(topSearchInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 강의실 설문 가져오기 API
         * @summary 강의실 설문 가져오기
         * @param {StudyRoomSurveyInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqSurvey: async (arg0: StudyRoomSurveyInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'arg0' is not null or undefined
            assertParamExists('inqSurvey', 'arg0', arg0)
            const localVarPath = `/v1/user/studyRoom/survey`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (arg0 !== undefined) {
                for (const [key, value] of Object.entries(arg0)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 나의강의실 신청/대기 연수 API
         * @summary 나의강의실 신청/대기 연수
         * @param {MyPageInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqWaitCourseDegree: async (arg0: MyPageInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'arg0' is not null or undefined
            assertParamExists('inqWaitCourseDegree', 'arg0', arg0)
            const localVarPath = `/v1/user/studyRoom/courseDegree/wait`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (arg0 !== undefined) {
                for (const [key, value] of Object.entries(arg0)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 강의실 수강신청 취소 및 변경 API
         * @summary 강의실 수강신청 취소 및 변경
         * @param {StudyRoomCourseDegreeCancelInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcCourseDegreeCancel: async (arg0: StudyRoomCourseDegreeCancelInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'arg0' is not null or undefined
            assertParamExists('mdfcCourseDegreeCancel', 'arg0', arg0)
            const localVarPath = `/v1/user/studyRoom/courseDegree/cancel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (arg0 !== undefined) {
                for (const [key, value] of Object.entries(arg0)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 강의 실 과제 제출 API
         * @summary 강의실 과제 제출
         * @param {StudyRoomReportSubmitInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnAssignmentSubmit: async (inVo: StudyRoomReportSubmitInVo, files?: Array<File>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inVo' is not null or undefined
            assertParamExists('rgsnAssignmentSubmit', 'inVo', inVo)
            const localVarPath = `/v1/user/studyRoom/report/submit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (inVo !== undefined) { 
                localVarFormParams.append('inVo', new Blob([JSON.stringify(inVo)], { type: "application/json", }));
            }
                if (files) {
                files.forEach((element) => {
                  localVarFormParams.append('files', element as any);
                })
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 강의실 집합연수 QR 출석 API
         * @summary 강의실 집합연수 QR 출석
         * @param {StudyRoomAttendanceQRInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnAttendanceQR: async (arg0: StudyRoomAttendanceQRInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'arg0' is not null or undefined
            assertParamExists('rgsnAttendanceQR', 'arg0', arg0)
            const localVarPath = `/v1/user/studyRoom/attendance/qr`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (arg0 !== undefined) {
                for (const [key, value] of Object.entries(arg0)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 과정 신청 API
         * @summary 과정 신청
         * @param {CourseApplicationInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnCourseApplication: async (inVo: CourseApplicationInVo, files?: Array<File>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inVo' is not null or undefined
            assertParamExists('rgsnCourseApplication', 'inVo', inVo)
            const localVarPath = `/v1/user/course/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (files) {
                files.forEach((element) => {
                  localVarFormParams.append('files', element as any);
                })
            }

    
            if (inVo !== undefined) { 
                localVarFormParams.append('inVo', new Blob([JSON.stringify(inVo)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 강의실 시험지 제출 API
         * @summary 강의실 시험지 제출
         * @param {Array<StudyRoomExamSubmitInVo>} studyRoomExamSubmitInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnExamSubmit: async (studyRoomExamSubmitInVo: Array<StudyRoomExamSubmitInVo>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyRoomExamSubmitInVo' is not null or undefined
            assertParamExists('rgsnExamSubmit', 'studyRoomExamSubmitInVo', studyRoomExamSubmitInVo)
            const localVarPath = `/v1/user/studyRoom/exam/submit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(studyRoomExamSubmitInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 사용자 연수 신청 상세 페이지 API
         * @summary 사용자 연수 상세 페이지
         * @param {MasterCourseDetailInVo} masterCourseDetailInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnMasterCourseDetail: async (masterCourseDetailInVo: MasterCourseDetailInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'masterCourseDetailInVo' is not null or undefined
            assertParamExists('rgsnMasterCourseDetail', 'masterCourseDetailInVo', masterCourseDetailInVo)
            const localVarPath = `/v1/user/master/course/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(masterCourseDetailInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 과정 찜하기 API
         * @summary 과정 찜하기
         * @param {MasterCourseFavoriteInVo} masterCourseFavoriteInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnMasterCourseFavorite: async (masterCourseFavoriteInVo: MasterCourseFavoriteInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'masterCourseFavoriteInVo' is not null or undefined
            assertParamExists('rgsnMasterCourseFavorite', 'masterCourseFavoriteInVo', masterCourseFavoriteInVo)
            const localVarPath = `/v1/user/master/course/favorite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(masterCourseFavoriteInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 키워드 리스트 가져오기 API
         * @summary 사용자 연수 신청 필터 키워드
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnMasterCourseFilterKeyword: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/master/course/filter/keyword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 사용자 연수 신청 리스트 페이지 API
         * @summary 사용자 연수 신청 리스트 페이지
         * @param {MasterCourseListInVo} masterCourseListInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnMasterCourseList: async (masterCourseListInVo: MasterCourseListInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'masterCourseListInVo' is not null or undefined
            assertParamExists('rgsnMasterCourseList', 'masterCourseListInVo', masterCourseListInVo)
            const localVarPath = `/v1/user/master/course/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(masterCourseListInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 나의 대표 스킬 정보 조회
         * @summary 나의 대표 스킬 정보 조회
         * @param {MySkillInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnMySkill: async (arg0: MySkillInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'arg0' is not null or undefined
            assertParamExists('rgsnMySkill', 'arg0', arg0)
            const localVarPath = `/v1/user/studyRoom/mySkill/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (arg0 !== undefined) {
                for (const [key, value] of Object.entries(arg0)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 강의실 설문 제출 API
         * @summary 강의실 설문 제출
         * @param {StudyRoomSurveySubmitInVoList} studyRoomSurveySubmitInVoList 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnSurveySubmit: async (studyRoomSurveySubmitInVoList: StudyRoomSurveySubmitInVoList, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyRoomSurveySubmitInVoList' is not null or undefined
            assertParamExists('rgsnSurveySubmit', 'studyRoomSurveySubmitInVoList', studyRoomSurveySubmitInVoList)
            const localVarPath = `/v1/user/studyRoom/survey/submit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(studyRoomSurveySubmitInVoList, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 강의실 컨텐츠 입장 API
         * @summary 강의실 컨텐츠 입장
         * @param {StudyRoomResultInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rsgnStudyRoomEnter: async (arg0: StudyRoomResultInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'arg0' is not null or undefined
            assertParamExists('rsgnStudyRoomEnter', 'arg0', arg0)
            const localVarPath = `/v1/user/studyRoom/content/enter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (arg0 !== undefined) {
                for (const [key, value] of Object.entries(arg0)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 현재 수강중 인지 체크하는 API
         * @summary 현재 수강중 인지 체크
         * @param {StudyRoomCourseDegreeCheckInVo} studyRoomCourseDegreeCheckInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkCourseDegree(studyRoomCourseDegreeCheckInVo: StudyRoomCourseDegreeCheckInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyRoomCourseDegreeCheckOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkCourseDegree(studyRoomCourseDegreeCheckInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.checkCourseDegree']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * GET 샘플
         * @summary GET 샘플
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSample(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthCheckOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSample(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getSample']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * GET 샘플
         * @summary GET 샘플
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSampleList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<HealthCheckOutVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSampleList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getSampleList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 헬스 체크
         * @summary 헬스 체크
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthCheck(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthCheck(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.healthCheck']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 나의 학습일정 리스트 api
         * @summary 부점 학습일정 리스트
         * @param {ArhdStudyCalendarListInVo} arhdStudyCalendarListInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqArhdStudyCalendarList(arhdStudyCalendarListInVo: ArhdStudyCalendarListInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ArhdStudyCalendarOutVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqArhdStudyCalendarList(arhdStudyCalendarListInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.inqArhdStudyCalendarList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 강의 실 과제 상세 API
         * @summary 강의실 과제 상세
         * @param {StudyRoomReportDetailInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqAssignmentDetail(arg0: StudyRoomReportDetailInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyRoomReportDetailOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqAssignmentDetail(arg0, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.inqAssignmentDetail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 강의실 과제 제출한거 가져오는 API
         * @summary 강의실 과제 제출 한거 가져 오기
         * @param {StudyRoomReportSubmitInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqAssignmentSubmit(arg0: StudyRoomReportSubmitInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ReportOutVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqAssignmentSubmit(arg0, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.inqAssignmentSubmit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 사용자 페이지 리스트 api
         * @summary 사용자 페이지 리스트
         * @param {AuthMemberUserPageInqInVo} authMemberUserPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqAuthMemberUserPage(authMemberUserPageInqInVo: AuthMemberUserPageInqInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageAuthMemberUserOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqAuthMemberUserPage(authMemberUserPageInqInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.inqAuthMemberUserPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 강의실 연수 목차 API
         * @summary 강의실 연수 목차
         * @param {StudyRoomContentsInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqChapterLesson(arg0: StudyRoomContentsInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyRoomContentsOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqChapterLesson(arg0, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.inqChapterLesson']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 공통 연수/차수 페이징 리스트 API
         * @summary 공통 연수/차수 페이징 리스트
         * @param {CommonCourseDegreePageInVo} commonCourseDegreePageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqCommonCourseDegreePage(commonCourseDegreePageInVo: CommonCourseDegreePageInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageCommonCourseDegreeOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqCommonCourseDegreePage(commonCourseDegreePageInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.inqCommonCourseDegreePage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 강의실 수강신청 취소 및 변경 차수명 리스트 API
         * @summary 강의실 수강신청 취소 및 변경 차수명 리스트
         * @param {StudyRoomCourseDegreeCancelListInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqCourseDegreeCancelList(arg0: StudyRoomCourseDegreeCancelListInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CourseDegreeOutVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqCourseDegreeCancelList(arg0, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.inqCourseDegreeCancelList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 연수 이력 API
         * @summary 연수 이력
         * @param {CourseDegreeLessonHistoryInVo} courseDegreeLessonHistoryInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqCourseDegreeLessonHistory(courseDegreeLessonHistoryInVo: CourseDegreeLessonHistoryInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageCourseDegreeLessonHistoryOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqCourseDegreeLessonHistory(courseDegreeLessonHistoryInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.inqCourseDegreeLessonHistory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 나의강의실 종료 연수 API
         * @summary 나의강의실 종료 연수
         * @param {MyPageInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqEndCourseDegree(arg0: MyPageInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageCourseDegreeMyPageOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqEndCourseDegree(arg0, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.inqEndCourseDegree']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 강의실 시험지 생성 API
         * @summary 강의실 시험지 생성
         * @param {StudyRoomExamInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqExamEnter(arg0: StudyRoomExamInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyRoomExamOutVoWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqExamEnter(arg0, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.inqExamEnter']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 강의실 연수 내역 API
         * @summary 강의실 연수 내역
         * @param {StudyRoomHistoryInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqHistoryCourseDegree(arg0: StudyRoomHistoryInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageStudyRoomHistoryOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqHistoryCourseDegree(arg0, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.inqHistoryCourseDegree']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 나의강의실 학습중 연수 API
         * @summary 나의강의실 학습중 연수
         * @param {MyPageInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqIngCourseDegree(arg0: MyPageInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageCourseDegreeMyPageOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqIngCourseDegree(arg0, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.inqIngCourseDegree']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 강의실 차수 마지막 레슨 가져오기 API
         * @summary 강의실 차수 마지막 레슨 가져오기
         * @param {StudyRoomContentsInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqLastLesson(arg0: StudyRoomContentsInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyRoomLastLessonOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqLastLesson(arg0, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.inqLastLesson']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 나의강의실 찜한 연수 API
         * @summary 나의강의실 찜한 연수
         * @param {MyPageInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqLikeCourseDegree(arg0: MyPageInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageCourseLikeMyPageOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqLikeCourseDegree(arg0, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.inqLikeCourseDegree']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 상담 검색 연수 API
         * @summary 상담 검색 연수
         * @param {TopSearchInVo} topSearchInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqMasterCourse(topSearchInVo: TopSearchInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageMasterCourseListOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqMasterCourse(topSearchInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.inqMasterCourse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 마스터 과정 개설 카테고리 다건 조회
         * @summary 마스터 과정 개설 카테고리 다건 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqMasterCourseDisplayCategoryList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MasterCourseDisplayCategoryOutVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqMasterCourseDisplayCategoryList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.inqMasterCourseDisplayCategoryList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 나의강의실 나의 강의 API
         * @summary 나의강의실 나의 강의
         * @param {MyPageInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqMyLessonCourseDegree(arg0: MyPageInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageCourseDegreeMyPageOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqMyLessonCourseDegree(arg0, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.inqMyLessonCourseDegree']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 나의강의실 상단 카운트 API
         * @summary 나의강의실 상단 카운트
         * @param {object} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqMyPageHeader(arg0: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyRoomHeaderCountOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqMyPageHeader(arg0, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.inqMyPageHeader']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 나의 대표 스킬 정보 조회
         * @summary 나의 대표 스킬 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqMySkill(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MySkillOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqMySkill(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.inqMySkill']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 마이페이지 스킬 카테고리 통계
         * @summary 마이페이지 스킬 카테고리 통계
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqMySkillCategoryStatistics(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MySkillCategoryStatisticsOutVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqMySkillCategoryStatistics(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.inqMySkillCategoryStatistics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 마이페이지 스킬 카테고리 상세 통계
         * @summary 마이페이지 스킬 카테고리 상세 통계
         * @param {MySkillCategoryStatisticsDetailInVo} mySkillCategoryStatisticsDetailInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqMySkillCategoryStatisticsDetail(mySkillCategoryStatisticsDetailInVo: MySkillCategoryStatisticsDetailInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MySkillCategoryStatisticsDetailOutVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqMySkillCategoryStatisticsDetail(mySkillCategoryStatisticsDetailInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.inqMySkillCategoryStatisticsDetail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 나의 학습일정 리스트 api
         * @summary 나의 학습일정 리스트
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqMyStudyCalendarList(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MyStudyCalendarOutVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqMyStudyCalendarList(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.inqMyStudyCalendarList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ExamBlbrPageInqInVo} examBlbrPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqPbnsPage(examBlbrPageInqInVo: ExamBlbrPageInqInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageExamBlbrOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqPbnsPage(examBlbrPageInqInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.inqPbnsPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ExamBlbrPageInqInVo} examBlbrPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqPbnsPage2(examBlbrPageInqInVo: ExamBlbrPageInqInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageExamBlbrOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqPbnsPage2(examBlbrPageInqInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.inqPbnsPage2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 이전 배송지 주소 불러오기 API
         * @summary 이전 배송지 주소 불러오기
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqPreviousAddress(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PreviousAddressOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqPreviousAddress(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.inqPreviousAddress']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 강의실 진도로그 API
         * @summary 강의실 진도로그
         * @param {StudyRoomProgressInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqProgressLog(arg0: StudyRoomProgressInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageStudyRoomProgressOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqProgressLog(arg0, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.inqProgressLog']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 상단 소셜러닝 검색 API
         * @summary 상단 소셜러닝 검색
         * @param {TopSearchInVo} topSearchInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqSocialLearning(topSearchInVo: TopSearchInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageSocialLearningOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqSocialLearning(topSearchInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.inqSocialLearning']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 강의실 설문 가져오기 API
         * @summary 강의실 설문 가져오기
         * @param {StudyRoomSurveyInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqSurvey(arg0: StudyRoomSurveyInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyRoomSurveyOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqSurvey(arg0, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.inqSurvey']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 나의강의실 신청/대기 연수 API
         * @summary 나의강의실 신청/대기 연수
         * @param {MyPageInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqWaitCourseDegree(arg0: MyPageInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageCourseDegreeMyPageOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqWaitCourseDegree(arg0, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.inqWaitCourseDegree']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 강의실 수강신청 취소 및 변경 API
         * @summary 강의실 수강신청 취소 및 변경
         * @param {StudyRoomCourseDegreeCancelInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mdfcCourseDegreeCancel(arg0: StudyRoomCourseDegreeCancelInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mdfcCourseDegreeCancel(arg0, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.mdfcCourseDegreeCancel']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 강의 실 과제 제출 API
         * @summary 강의실 과제 제출
         * @param {StudyRoomReportSubmitInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rgsnAssignmentSubmit(inVo: StudyRoomReportSubmitInVo, files?: Array<File>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rgsnAssignmentSubmit(inVo, files, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rgsnAssignmentSubmit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 강의실 집합연수 QR 출석 API
         * @summary 강의실 집합연수 QR 출석
         * @param {StudyRoomAttendanceQRInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rgsnAttendanceQR(arg0: StudyRoomAttendanceQRInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rgsnAttendanceQR(arg0, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rgsnAttendanceQR']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 과정 신청 API
         * @summary 과정 신청
         * @param {CourseApplicationInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rgsnCourseApplication(inVo: CourseApplicationInVo, files?: Array<File>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rgsnCourseApplication(inVo, files, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rgsnCourseApplication']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 강의실 시험지 제출 API
         * @summary 강의실 시험지 제출
         * @param {Array<StudyRoomExamSubmitInVo>} studyRoomExamSubmitInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rgsnExamSubmit(studyRoomExamSubmitInVo: Array<StudyRoomExamSubmitInVo>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rgsnExamSubmit(studyRoomExamSubmitInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rgsnExamSubmit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 사용자 연수 신청 상세 페이지 API
         * @summary 사용자 연수 상세 페이지
         * @param {MasterCourseDetailInVo} masterCourseDetailInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rgsnMasterCourseDetail(masterCourseDetailInVo: MasterCourseDetailInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MasterCourseListOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rgsnMasterCourseDetail(masterCourseDetailInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rgsnMasterCourseDetail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 과정 찜하기 API
         * @summary 과정 찜하기
         * @param {MasterCourseFavoriteInVo} masterCourseFavoriteInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rgsnMasterCourseFavorite(masterCourseFavoriteInVo: MasterCourseFavoriteInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rgsnMasterCourseFavorite(masterCourseFavoriteInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rgsnMasterCourseFavorite']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 키워드 리스트 가져오기 API
         * @summary 사용자 연수 신청 필터 키워드
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rgsnMasterCourseFilterKeyword(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rgsnMasterCourseFilterKeyword(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rgsnMasterCourseFilterKeyword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 사용자 연수 신청 리스트 페이지 API
         * @summary 사용자 연수 신청 리스트 페이지
         * @param {MasterCourseListInVo} masterCourseListInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rgsnMasterCourseList(masterCourseListInVo: MasterCourseListInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageMasterCourseListOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rgsnMasterCourseList(masterCourseListInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rgsnMasterCourseList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 나의 대표 스킬 정보 조회
         * @summary 나의 대표 스킬 정보 조회
         * @param {MySkillInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rgsnMySkill(arg0: MySkillInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rgsnMySkill(arg0, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rgsnMySkill']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 강의실 설문 제출 API
         * @summary 강의실 설문 제출
         * @param {StudyRoomSurveySubmitInVoList} studyRoomSurveySubmitInVoList 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rgsnSurveySubmit(studyRoomSurveySubmitInVoList: StudyRoomSurveySubmitInVoList, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rgsnSurveySubmit(studyRoomSurveySubmitInVoList, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rgsnSurveySubmit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 강의실 컨텐츠 입장 API
         * @summary 강의실 컨텐츠 입장
         * @param {StudyRoomResultInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rsgnStudyRoomEnter(arg0: StudyRoomResultInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rsgnStudyRoomEnter(arg0, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rsgnStudyRoomEnter']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 현재 수강중 인지 체크하는 API
         * @summary 현재 수강중 인지 체크
         * @param {StudyRoomCourseDegreeCheckInVo} studyRoomCourseDegreeCheckInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkCourseDegree(studyRoomCourseDegreeCheckInVo: StudyRoomCourseDegreeCheckInVo, options?: any): AxiosPromise<StudyRoomCourseDegreeCheckOutVo> {
            return localVarFp.checkCourseDegree(studyRoomCourseDegreeCheckInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * GET 샘플
         * @summary GET 샘플
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSample(options?: any): AxiosPromise<HealthCheckOutVo> {
            return localVarFp.getSample(options).then((request) => request(axios, basePath));
        },
        /**
         * GET 샘플
         * @summary GET 샘플
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSampleList(options?: any): AxiosPromise<Array<HealthCheckOutVo>> {
            return localVarFp.getSampleList(options).then((request) => request(axios, basePath));
        },
        /**
         * 헬스 체크
         * @summary 헬스 체크
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheck(options?: any): AxiosPromise<Array<string>> {
            return localVarFp.healthCheck(options).then((request) => request(axios, basePath));
        },
        /**
         * 나의 학습일정 리스트 api
         * @summary 부점 학습일정 리스트
         * @param {ArhdStudyCalendarListInVo} arhdStudyCalendarListInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqArhdStudyCalendarList(arhdStudyCalendarListInVo: ArhdStudyCalendarListInVo, options?: any): AxiosPromise<Array<ArhdStudyCalendarOutVo>> {
            return localVarFp.inqArhdStudyCalendarList(arhdStudyCalendarListInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 강의 실 과제 상세 API
         * @summary 강의실 과제 상세
         * @param {StudyRoomReportDetailInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqAssignmentDetail(arg0: StudyRoomReportDetailInVo, options?: any): AxiosPromise<StudyRoomReportDetailOutVo> {
            return localVarFp.inqAssignmentDetail(arg0, options).then((request) => request(axios, basePath));
        },
        /**
         * 강의실 과제 제출한거 가져오는 API
         * @summary 강의실 과제 제출 한거 가져 오기
         * @param {StudyRoomReportSubmitInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqAssignmentSubmit(arg0: StudyRoomReportSubmitInVo, options?: any): AxiosPromise<Array<ReportOutVo>> {
            return localVarFp.inqAssignmentSubmit(arg0, options).then((request) => request(axios, basePath));
        },
        /**
         * 사용자 페이지 리스트 api
         * @summary 사용자 페이지 리스트
         * @param {AuthMemberUserPageInqInVo} authMemberUserPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqAuthMemberUserPage(authMemberUserPageInqInVo: AuthMemberUserPageInqInVo, options?: any): AxiosPromise<PageAuthMemberUserOutVo> {
            return localVarFp.inqAuthMemberUserPage(authMemberUserPageInqInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 강의실 연수 목차 API
         * @summary 강의실 연수 목차
         * @param {StudyRoomContentsInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqChapterLesson(arg0: StudyRoomContentsInVo, options?: any): AxiosPromise<StudyRoomContentsOutVo> {
            return localVarFp.inqChapterLesson(arg0, options).then((request) => request(axios, basePath));
        },
        /**
         * 공통 연수/차수 페이징 리스트 API
         * @summary 공통 연수/차수 페이징 리스트
         * @param {CommonCourseDegreePageInVo} commonCourseDegreePageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqCommonCourseDegreePage(commonCourseDegreePageInVo: CommonCourseDegreePageInVo, options?: any): AxiosPromise<PageCommonCourseDegreeOutVo> {
            return localVarFp.inqCommonCourseDegreePage(commonCourseDegreePageInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 강의실 수강신청 취소 및 변경 차수명 리스트 API
         * @summary 강의실 수강신청 취소 및 변경 차수명 리스트
         * @param {StudyRoomCourseDegreeCancelListInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqCourseDegreeCancelList(arg0: StudyRoomCourseDegreeCancelListInVo, options?: any): AxiosPromise<Array<CourseDegreeOutVo>> {
            return localVarFp.inqCourseDegreeCancelList(arg0, options).then((request) => request(axios, basePath));
        },
        /**
         * 연수 이력 API
         * @summary 연수 이력
         * @param {CourseDegreeLessonHistoryInVo} courseDegreeLessonHistoryInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqCourseDegreeLessonHistory(courseDegreeLessonHistoryInVo: CourseDegreeLessonHistoryInVo, options?: any): AxiosPromise<PageCourseDegreeLessonHistoryOutVo> {
            return localVarFp.inqCourseDegreeLessonHistory(courseDegreeLessonHistoryInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 나의강의실 종료 연수 API
         * @summary 나의강의실 종료 연수
         * @param {MyPageInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqEndCourseDegree(arg0: MyPageInVo, options?: any): AxiosPromise<PageCourseDegreeMyPageOutVo> {
            return localVarFp.inqEndCourseDegree(arg0, options).then((request) => request(axios, basePath));
        },
        /**
         * 강의실 시험지 생성 API
         * @summary 강의실 시험지 생성
         * @param {StudyRoomExamInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqExamEnter(arg0: StudyRoomExamInVo, options?: any): AxiosPromise<StudyRoomExamOutVoWrapper> {
            return localVarFp.inqExamEnter(arg0, options).then((request) => request(axios, basePath));
        },
        /**
         * 강의실 연수 내역 API
         * @summary 강의실 연수 내역
         * @param {StudyRoomHistoryInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqHistoryCourseDegree(arg0: StudyRoomHistoryInVo, options?: any): AxiosPromise<PageStudyRoomHistoryOutVo> {
            return localVarFp.inqHistoryCourseDegree(arg0, options).then((request) => request(axios, basePath));
        },
        /**
         * 나의강의실 학습중 연수 API
         * @summary 나의강의실 학습중 연수
         * @param {MyPageInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIngCourseDegree(arg0: MyPageInVo, options?: any): AxiosPromise<PageCourseDegreeMyPageOutVo> {
            return localVarFp.inqIngCourseDegree(arg0, options).then((request) => request(axios, basePath));
        },
        /**
         * 강의실 차수 마지막 레슨 가져오기 API
         * @summary 강의실 차수 마지막 레슨 가져오기
         * @param {StudyRoomContentsInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqLastLesson(arg0: StudyRoomContentsInVo, options?: any): AxiosPromise<StudyRoomLastLessonOutVo> {
            return localVarFp.inqLastLesson(arg0, options).then((request) => request(axios, basePath));
        },
        /**
         * 나의강의실 찜한 연수 API
         * @summary 나의강의실 찜한 연수
         * @param {MyPageInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqLikeCourseDegree(arg0: MyPageInVo, options?: any): AxiosPromise<PageCourseLikeMyPageOutVo> {
            return localVarFp.inqLikeCourseDegree(arg0, options).then((request) => request(axios, basePath));
        },
        /**
         * 상담 검색 연수 API
         * @summary 상담 검색 연수
         * @param {TopSearchInVo} topSearchInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqMasterCourse(topSearchInVo: TopSearchInVo, options?: any): AxiosPromise<PageMasterCourseListOutVo> {
            return localVarFp.inqMasterCourse(topSearchInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 마스터 과정 개설 카테고리 다건 조회
         * @summary 마스터 과정 개설 카테고리 다건 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqMasterCourseDisplayCategoryList(options?: any): AxiosPromise<Array<MasterCourseDisplayCategoryOutVo>> {
            return localVarFp.inqMasterCourseDisplayCategoryList(options).then((request) => request(axios, basePath));
        },
        /**
         * 나의강의실 나의 강의 API
         * @summary 나의강의실 나의 강의
         * @param {MyPageInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqMyLessonCourseDegree(arg0: MyPageInVo, options?: any): AxiosPromise<PageCourseDegreeMyPageOutVo> {
            return localVarFp.inqMyLessonCourseDegree(arg0, options).then((request) => request(axios, basePath));
        },
        /**
         * 나의강의실 상단 카운트 API
         * @summary 나의강의실 상단 카운트
         * @param {object} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqMyPageHeader(arg0: object, options?: any): AxiosPromise<StudyRoomHeaderCountOutVo> {
            return localVarFp.inqMyPageHeader(arg0, options).then((request) => request(axios, basePath));
        },
        /**
         * 나의 대표 스킬 정보 조회
         * @summary 나의 대표 스킬 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqMySkill(options?: any): AxiosPromise<MySkillOutVo> {
            return localVarFp.inqMySkill(options).then((request) => request(axios, basePath));
        },
        /**
         * 마이페이지 스킬 카테고리 통계
         * @summary 마이페이지 스킬 카테고리 통계
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqMySkillCategoryStatistics(options?: any): AxiosPromise<Array<MySkillCategoryStatisticsOutVo>> {
            return localVarFp.inqMySkillCategoryStatistics(options).then((request) => request(axios, basePath));
        },
        /**
         * 마이페이지 스킬 카테고리 상세 통계
         * @summary 마이페이지 스킬 카테고리 상세 통계
         * @param {MySkillCategoryStatisticsDetailInVo} mySkillCategoryStatisticsDetailInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqMySkillCategoryStatisticsDetail(mySkillCategoryStatisticsDetailInVo: MySkillCategoryStatisticsDetailInVo, options?: any): AxiosPromise<Array<MySkillCategoryStatisticsDetailOutVo>> {
            return localVarFp.inqMySkillCategoryStatisticsDetail(mySkillCategoryStatisticsDetailInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 나의 학습일정 리스트 api
         * @summary 나의 학습일정 리스트
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqMyStudyCalendarList(body: object, options?: any): AxiosPromise<Array<MyStudyCalendarOutVo>> {
            return localVarFp.inqMyStudyCalendarList(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ExamBlbrPageInqInVo} examBlbrPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqPbnsPage(examBlbrPageInqInVo: ExamBlbrPageInqInVo, options?: any): AxiosPromise<PageExamBlbrOutVo> {
            return localVarFp.inqPbnsPage(examBlbrPageInqInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ExamBlbrPageInqInVo} examBlbrPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqPbnsPage2(examBlbrPageInqInVo: ExamBlbrPageInqInVo, options?: any): AxiosPromise<PageExamBlbrOutVo> {
            return localVarFp.inqPbnsPage2(examBlbrPageInqInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 이전 배송지 주소 불러오기 API
         * @summary 이전 배송지 주소 불러오기
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqPreviousAddress(options?: any): AxiosPromise<PreviousAddressOutVo> {
            return localVarFp.inqPreviousAddress(options).then((request) => request(axios, basePath));
        },
        /**
         * 강의실 진도로그 API
         * @summary 강의실 진도로그
         * @param {StudyRoomProgressInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqProgressLog(arg0: StudyRoomProgressInVo, options?: any): AxiosPromise<PageStudyRoomProgressOutVo> {
            return localVarFp.inqProgressLog(arg0, options).then((request) => request(axios, basePath));
        },
        /**
         * 상단 소셜러닝 검색 API
         * @summary 상단 소셜러닝 검색
         * @param {TopSearchInVo} topSearchInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqSocialLearning(topSearchInVo: TopSearchInVo, options?: any): AxiosPromise<PageSocialLearningOutVo> {
            return localVarFp.inqSocialLearning(topSearchInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 강의실 설문 가져오기 API
         * @summary 강의실 설문 가져오기
         * @param {StudyRoomSurveyInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqSurvey(arg0: StudyRoomSurveyInVo, options?: any): AxiosPromise<StudyRoomSurveyOutVo> {
            return localVarFp.inqSurvey(arg0, options).then((request) => request(axios, basePath));
        },
        /**
         * 나의강의실 신청/대기 연수 API
         * @summary 나의강의실 신청/대기 연수
         * @param {MyPageInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqWaitCourseDegree(arg0: MyPageInVo, options?: any): AxiosPromise<PageCourseDegreeMyPageOutVo> {
            return localVarFp.inqWaitCourseDegree(arg0, options).then((request) => request(axios, basePath));
        },
        /**
         * 강의실 수강신청 취소 및 변경 API
         * @summary 강의실 수강신청 취소 및 변경
         * @param {StudyRoomCourseDegreeCancelInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcCourseDegreeCancel(arg0: StudyRoomCourseDegreeCancelInVo, options?: any): AxiosPromise<void> {
            return localVarFp.mdfcCourseDegreeCancel(arg0, options).then((request) => request(axios, basePath));
        },
        /**
         * 강의 실 과제 제출 API
         * @summary 강의실 과제 제출
         * @param {StudyRoomReportSubmitInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnAssignmentSubmit(inVo: StudyRoomReportSubmitInVo, files?: Array<File>, options?: any): AxiosPromise<void> {
            return localVarFp.rgsnAssignmentSubmit(inVo, files, options).then((request) => request(axios, basePath));
        },
        /**
         * 강의실 집합연수 QR 출석 API
         * @summary 강의실 집합연수 QR 출석
         * @param {StudyRoomAttendanceQRInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnAttendanceQR(arg0: StudyRoomAttendanceQRInVo, options?: any): AxiosPromise<void> {
            return localVarFp.rgsnAttendanceQR(arg0, options).then((request) => request(axios, basePath));
        },
        /**
         * 과정 신청 API
         * @summary 과정 신청
         * @param {CourseApplicationInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnCourseApplication(inVo: CourseApplicationInVo, files?: Array<File>, options?: any): AxiosPromise<void> {
            return localVarFp.rgsnCourseApplication(inVo, files, options).then((request) => request(axios, basePath));
        },
        /**
         * 강의실 시험지 제출 API
         * @summary 강의실 시험지 제출
         * @param {Array<StudyRoomExamSubmitInVo>} studyRoomExamSubmitInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnExamSubmit(studyRoomExamSubmitInVo: Array<StudyRoomExamSubmitInVo>, options?: any): AxiosPromise<void> {
            return localVarFp.rgsnExamSubmit(studyRoomExamSubmitInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 사용자 연수 신청 상세 페이지 API
         * @summary 사용자 연수 상세 페이지
         * @param {MasterCourseDetailInVo} masterCourseDetailInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnMasterCourseDetail(masterCourseDetailInVo: MasterCourseDetailInVo, options?: any): AxiosPromise<MasterCourseListOutVo> {
            return localVarFp.rgsnMasterCourseDetail(masterCourseDetailInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 과정 찜하기 API
         * @summary 과정 찜하기
         * @param {MasterCourseFavoriteInVo} masterCourseFavoriteInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnMasterCourseFavorite(masterCourseFavoriteInVo: MasterCourseFavoriteInVo, options?: any): AxiosPromise<void> {
            return localVarFp.rgsnMasterCourseFavorite(masterCourseFavoriteInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 키워드 리스트 가져오기 API
         * @summary 사용자 연수 신청 필터 키워드
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnMasterCourseFilterKeyword(options?: any): AxiosPromise<Array<string>> {
            return localVarFp.rgsnMasterCourseFilterKeyword(options).then((request) => request(axios, basePath));
        },
        /**
         * 사용자 연수 신청 리스트 페이지 API
         * @summary 사용자 연수 신청 리스트 페이지
         * @param {MasterCourseListInVo} masterCourseListInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnMasterCourseList(masterCourseListInVo: MasterCourseListInVo, options?: any): AxiosPromise<PageMasterCourseListOutVo> {
            return localVarFp.rgsnMasterCourseList(masterCourseListInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 나의 대표 스킬 정보 조회
         * @summary 나의 대표 스킬 정보 조회
         * @param {MySkillInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnMySkill(arg0: MySkillInVo, options?: any): AxiosPromise<void> {
            return localVarFp.rgsnMySkill(arg0, options).then((request) => request(axios, basePath));
        },
        /**
         * 강의실 설문 제출 API
         * @summary 강의실 설문 제출
         * @param {StudyRoomSurveySubmitInVoList} studyRoomSurveySubmitInVoList 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnSurveySubmit(studyRoomSurveySubmitInVoList: StudyRoomSurveySubmitInVoList, options?: any): AxiosPromise<void> {
            return localVarFp.rgsnSurveySubmit(studyRoomSurveySubmitInVoList, options).then((request) => request(axios, basePath));
        },
        /**
         * 강의실 컨텐츠 입장 API
         * @summary 강의실 컨텐츠 입장
         * @param {StudyRoomResultInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rsgnStudyRoomEnter(arg0: StudyRoomResultInVo, options?: any): AxiosPromise<void> {
            return localVarFp.rsgnStudyRoomEnter(arg0, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 현재 수강중 인지 체크하는 API
     * @summary 현재 수강중 인지 체크
     * @param {StudyRoomCourseDegreeCheckInVo} studyRoomCourseDegreeCheckInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public checkCourseDegree(studyRoomCourseDegreeCheckInVo: StudyRoomCourseDegreeCheckInVo, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).checkCourseDegree(studyRoomCourseDegreeCheckInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * GET 샘플
     * @summary GET 샘플
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSample(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSample(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * GET 샘플
     * @summary GET 샘플
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSampleList(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSampleList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 헬스 체크
     * @summary 헬스 체크
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public healthCheck(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).healthCheck(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 나의 학습일정 리스트 api
     * @summary 부점 학습일정 리스트
     * @param {ArhdStudyCalendarListInVo} arhdStudyCalendarListInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public inqArhdStudyCalendarList(arhdStudyCalendarListInVo: ArhdStudyCalendarListInVo, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).inqArhdStudyCalendarList(arhdStudyCalendarListInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 강의 실 과제 상세 API
     * @summary 강의실 과제 상세
     * @param {StudyRoomReportDetailInVo} arg0 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public inqAssignmentDetail(arg0: StudyRoomReportDetailInVo, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).inqAssignmentDetail(arg0, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 강의실 과제 제출한거 가져오는 API
     * @summary 강의실 과제 제출 한거 가져 오기
     * @param {StudyRoomReportSubmitInVo} arg0 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public inqAssignmentSubmit(arg0: StudyRoomReportSubmitInVo, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).inqAssignmentSubmit(arg0, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 사용자 페이지 리스트 api
     * @summary 사용자 페이지 리스트
     * @param {AuthMemberUserPageInqInVo} authMemberUserPageInqInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public inqAuthMemberUserPage(authMemberUserPageInqInVo: AuthMemberUserPageInqInVo, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).inqAuthMemberUserPage(authMemberUserPageInqInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 강의실 연수 목차 API
     * @summary 강의실 연수 목차
     * @param {StudyRoomContentsInVo} arg0 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public inqChapterLesson(arg0: StudyRoomContentsInVo, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).inqChapterLesson(arg0, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 공통 연수/차수 페이징 리스트 API
     * @summary 공통 연수/차수 페이징 리스트
     * @param {CommonCourseDegreePageInVo} commonCourseDegreePageInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public inqCommonCourseDegreePage(commonCourseDegreePageInVo: CommonCourseDegreePageInVo, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).inqCommonCourseDegreePage(commonCourseDegreePageInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 강의실 수강신청 취소 및 변경 차수명 리스트 API
     * @summary 강의실 수강신청 취소 및 변경 차수명 리스트
     * @param {StudyRoomCourseDegreeCancelListInVo} arg0 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public inqCourseDegreeCancelList(arg0: StudyRoomCourseDegreeCancelListInVo, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).inqCourseDegreeCancelList(arg0, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 연수 이력 API
     * @summary 연수 이력
     * @param {CourseDegreeLessonHistoryInVo} courseDegreeLessonHistoryInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public inqCourseDegreeLessonHistory(courseDegreeLessonHistoryInVo: CourseDegreeLessonHistoryInVo, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).inqCourseDegreeLessonHistory(courseDegreeLessonHistoryInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 나의강의실 종료 연수 API
     * @summary 나의강의실 종료 연수
     * @param {MyPageInVo} arg0 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public inqEndCourseDegree(arg0: MyPageInVo, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).inqEndCourseDegree(arg0, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 강의실 시험지 생성 API
     * @summary 강의실 시험지 생성
     * @param {StudyRoomExamInVo} arg0 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public inqExamEnter(arg0: StudyRoomExamInVo, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).inqExamEnter(arg0, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 강의실 연수 내역 API
     * @summary 강의실 연수 내역
     * @param {StudyRoomHistoryInVo} arg0 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public inqHistoryCourseDegree(arg0: StudyRoomHistoryInVo, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).inqHistoryCourseDegree(arg0, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 나의강의실 학습중 연수 API
     * @summary 나의강의실 학습중 연수
     * @param {MyPageInVo} arg0 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public inqIngCourseDegree(arg0: MyPageInVo, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).inqIngCourseDegree(arg0, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 강의실 차수 마지막 레슨 가져오기 API
     * @summary 강의실 차수 마지막 레슨 가져오기
     * @param {StudyRoomContentsInVo} arg0 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public inqLastLesson(arg0: StudyRoomContentsInVo, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).inqLastLesson(arg0, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 나의강의실 찜한 연수 API
     * @summary 나의강의실 찜한 연수
     * @param {MyPageInVo} arg0 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public inqLikeCourseDegree(arg0: MyPageInVo, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).inqLikeCourseDegree(arg0, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 상담 검색 연수 API
     * @summary 상담 검색 연수
     * @param {TopSearchInVo} topSearchInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public inqMasterCourse(topSearchInVo: TopSearchInVo, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).inqMasterCourse(topSearchInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 마스터 과정 개설 카테고리 다건 조회
     * @summary 마스터 과정 개설 카테고리 다건 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public inqMasterCourseDisplayCategoryList(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).inqMasterCourseDisplayCategoryList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 나의강의실 나의 강의 API
     * @summary 나의강의실 나의 강의
     * @param {MyPageInVo} arg0 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public inqMyLessonCourseDegree(arg0: MyPageInVo, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).inqMyLessonCourseDegree(arg0, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 나의강의실 상단 카운트 API
     * @summary 나의강의실 상단 카운트
     * @param {object} arg0 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public inqMyPageHeader(arg0: object, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).inqMyPageHeader(arg0, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 나의 대표 스킬 정보 조회
     * @summary 나의 대표 스킬 정보 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public inqMySkill(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).inqMySkill(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 마이페이지 스킬 카테고리 통계
     * @summary 마이페이지 스킬 카테고리 통계
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public inqMySkillCategoryStatistics(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).inqMySkillCategoryStatistics(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 마이페이지 스킬 카테고리 상세 통계
     * @summary 마이페이지 스킬 카테고리 상세 통계
     * @param {MySkillCategoryStatisticsDetailInVo} mySkillCategoryStatisticsDetailInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public inqMySkillCategoryStatisticsDetail(mySkillCategoryStatisticsDetailInVo: MySkillCategoryStatisticsDetailInVo, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).inqMySkillCategoryStatisticsDetail(mySkillCategoryStatisticsDetailInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 나의 학습일정 리스트 api
     * @summary 나의 학습일정 리스트
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public inqMyStudyCalendarList(body: object, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).inqMyStudyCalendarList(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExamBlbrPageInqInVo} examBlbrPageInqInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public inqPbnsPage(examBlbrPageInqInVo: ExamBlbrPageInqInVo, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).inqPbnsPage(examBlbrPageInqInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExamBlbrPageInqInVo} examBlbrPageInqInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public inqPbnsPage2(examBlbrPageInqInVo: ExamBlbrPageInqInVo, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).inqPbnsPage2(examBlbrPageInqInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 이전 배송지 주소 불러오기 API
     * @summary 이전 배송지 주소 불러오기
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public inqPreviousAddress(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).inqPreviousAddress(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 강의실 진도로그 API
     * @summary 강의실 진도로그
     * @param {StudyRoomProgressInVo} arg0 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public inqProgressLog(arg0: StudyRoomProgressInVo, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).inqProgressLog(arg0, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 상단 소셜러닝 검색 API
     * @summary 상단 소셜러닝 검색
     * @param {TopSearchInVo} topSearchInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public inqSocialLearning(topSearchInVo: TopSearchInVo, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).inqSocialLearning(topSearchInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 강의실 설문 가져오기 API
     * @summary 강의실 설문 가져오기
     * @param {StudyRoomSurveyInVo} arg0 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public inqSurvey(arg0: StudyRoomSurveyInVo, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).inqSurvey(arg0, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 나의강의실 신청/대기 연수 API
     * @summary 나의강의실 신청/대기 연수
     * @param {MyPageInVo} arg0 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public inqWaitCourseDegree(arg0: MyPageInVo, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).inqWaitCourseDegree(arg0, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 강의실 수강신청 취소 및 변경 API
     * @summary 강의실 수강신청 취소 및 변경
     * @param {StudyRoomCourseDegreeCancelInVo} arg0 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public mdfcCourseDegreeCancel(arg0: StudyRoomCourseDegreeCancelInVo, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).mdfcCourseDegreeCancel(arg0, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 강의 실 과제 제출 API
     * @summary 강의실 과제 제출
     * @param {StudyRoomReportSubmitInVo} inVo 
     * @param {Array<File>} [files] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rgsnAssignmentSubmit(inVo: StudyRoomReportSubmitInVo, files?: Array<File>, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rgsnAssignmentSubmit(inVo, files, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 강의실 집합연수 QR 출석 API
     * @summary 강의실 집합연수 QR 출석
     * @param {StudyRoomAttendanceQRInVo} arg0 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rgsnAttendanceQR(arg0: StudyRoomAttendanceQRInVo, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rgsnAttendanceQR(arg0, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 과정 신청 API
     * @summary 과정 신청
     * @param {CourseApplicationInVo} inVo 
     * @param {Array<File>} [files] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rgsnCourseApplication(inVo: CourseApplicationInVo, files?: Array<File>, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rgsnCourseApplication(inVo, files, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 강의실 시험지 제출 API
     * @summary 강의실 시험지 제출
     * @param {Array<StudyRoomExamSubmitInVo>} studyRoomExamSubmitInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rgsnExamSubmit(studyRoomExamSubmitInVo: Array<StudyRoomExamSubmitInVo>, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rgsnExamSubmit(studyRoomExamSubmitInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 사용자 연수 신청 상세 페이지 API
     * @summary 사용자 연수 상세 페이지
     * @param {MasterCourseDetailInVo} masterCourseDetailInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rgsnMasterCourseDetail(masterCourseDetailInVo: MasterCourseDetailInVo, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rgsnMasterCourseDetail(masterCourseDetailInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 과정 찜하기 API
     * @summary 과정 찜하기
     * @param {MasterCourseFavoriteInVo} masterCourseFavoriteInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rgsnMasterCourseFavorite(masterCourseFavoriteInVo: MasterCourseFavoriteInVo, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rgsnMasterCourseFavorite(masterCourseFavoriteInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 키워드 리스트 가져오기 API
     * @summary 사용자 연수 신청 필터 키워드
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rgsnMasterCourseFilterKeyword(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rgsnMasterCourseFilterKeyword(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 사용자 연수 신청 리스트 페이지 API
     * @summary 사용자 연수 신청 리스트 페이지
     * @param {MasterCourseListInVo} masterCourseListInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rgsnMasterCourseList(masterCourseListInVo: MasterCourseListInVo, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rgsnMasterCourseList(masterCourseListInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 나의 대표 스킬 정보 조회
     * @summary 나의 대표 스킬 정보 조회
     * @param {MySkillInVo} arg0 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rgsnMySkill(arg0: MySkillInVo, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rgsnMySkill(arg0, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 강의실 설문 제출 API
     * @summary 강의실 설문 제출
     * @param {StudyRoomSurveySubmitInVoList} studyRoomSurveySubmitInVoList 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rgsnSurveySubmit(studyRoomSurveySubmitInVoList: StudyRoomSurveySubmitInVoList, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rgsnSurveySubmit(studyRoomSurveySubmitInVoList, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 강의실 컨텐츠 입장 API
     * @summary 강의실 컨텐츠 입장
     * @param {StudyRoomResultInVo} arg0 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rsgnStudyRoomEnter(arg0: StudyRoomResultInVo, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rsgnStudyRoomEnter(arg0, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AddressControllerApi - axios parameter creator
 * @export
 */
export const AddressControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 도로명 주소 가져 오기 api
         * @summary 도로명 주소 가져 오기
         * @param {AddressPageInVo} addressPageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqAddress: async (addressPageInVo: AddressPageInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addressPageInVo' is not null or undefined
            assertParamExists('inqAddress', 'addressPageInVo', addressPageInVo)
            const localVarPath = `/v1/address/road/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addressPageInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AddressControllerApi - functional programming interface
 * @export
 */
export const AddressControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AddressControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 도로명 주소 가져 오기 api
         * @summary 도로명 주소 가져 오기
         * @param {AddressPageInVo} addressPageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqAddress(addressPageInVo: AddressPageInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageAddressOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqAddress(addressPageInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AddressControllerApi.inqAddress']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AddressControllerApi - factory interface
 * @export
 */
export const AddressControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AddressControllerApiFp(configuration)
    return {
        /**
         * 도로명 주소 가져 오기 api
         * @summary 도로명 주소 가져 오기
         * @param {AddressPageInVo} addressPageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqAddress(addressPageInVo: AddressPageInVo, options?: any): AxiosPromise<PageAddressOutVo> {
            return localVarFp.inqAddress(addressPageInVo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AddressControllerApi - object-oriented interface
 * @export
 * @class AddressControllerApi
 * @extends {BaseAPI}
 */
export class AddressControllerApi extends BaseAPI {
    /**
     * 도로명 주소 가져 오기 api
     * @summary 도로명 주소 가져 오기
     * @param {AddressPageInVo} addressPageInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressControllerApi
     */
    public inqAddress(addressPageInVo: AddressPageInVo, options?: RawAxiosRequestConfig) {
        return AddressControllerApiFp(this.configuration).inqAddress(addressPageInVo, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ApiControllerApi - axios parameter creator
 * @export
 */
export const ApiControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ApiInVo} apiInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delApi: async (apiInVo: ApiInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiInVo' is not null or undefined
            assertParamExists('delApi', 'apiInVo', apiInVo)
            const localVarPath = `/api/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiInOutVo} apiInOutVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqApi: async (apiInOutVo: ApiInOutVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiInOutVo' is not null or undefined
            assertParamExists('inqApi', 'apiInOutVo', apiInOutVo)
            const localVarPath = `/api/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiInOutVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiInVo} apiInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqApiDtl: async (apiInVo: ApiInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiInVo' is not null or undefined
            assertParamExists('inqApiDtl', 'apiInVo', apiInVo)
            const localVarPath = `/api/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiInOutVo} apiInOutVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcApi: async (apiInOutVo: ApiInOutVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiInOutVo' is not null or undefined
            assertParamExists('mdfcApi', 'apiInOutVo', apiInOutVo)
            const localVarPath = `/api/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiInOutVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiInOutVo} apiInOutVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnApi: async (apiInOutVo: ApiInOutVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiInOutVo' is not null or undefined
            assertParamExists('rgsnApi', 'apiInOutVo', apiInOutVo)
            const localVarPath = `/api/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiInOutVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApiControllerApi - functional programming interface
 * @export
 */
export const ApiControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApiControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ApiInVo} apiInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delApi(apiInVo: ApiInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delApi(apiInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiControllerApi.delApi']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiInOutVo} apiInOutVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqApi(apiInOutVo: ApiInOutVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApiInOutVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqApi(apiInOutVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiControllerApi.inqApi']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiInVo} apiInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqApiDtl(apiInVo: ApiInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiInOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqApiDtl(apiInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiControllerApi.inqApiDtl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiInOutVo} apiInOutVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mdfcApi(apiInOutVo: ApiInOutVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiInOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mdfcApi(apiInOutVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiControllerApi.mdfcApi']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiInOutVo} apiInOutVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rgsnApi(apiInOutVo: ApiInOutVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rgsnApi(apiInOutVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiControllerApi.rgsnApi']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ApiControllerApi - factory interface
 * @export
 */
export const ApiControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApiControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {ApiInVo} apiInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delApi(apiInVo: ApiInVo, options?: any): AxiosPromise<number> {
            return localVarFp.delApi(apiInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiInOutVo} apiInOutVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqApi(apiInOutVo: ApiInOutVo, options?: any): AxiosPromise<Array<ApiInOutVo>> {
            return localVarFp.inqApi(apiInOutVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiInVo} apiInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqApiDtl(apiInVo: ApiInVo, options?: any): AxiosPromise<ApiInOutVo> {
            return localVarFp.inqApiDtl(apiInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiInOutVo} apiInOutVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcApi(apiInOutVo: ApiInOutVo, options?: any): AxiosPromise<ApiInOutVo> {
            return localVarFp.mdfcApi(apiInOutVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiInOutVo} apiInOutVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnApi(apiInOutVo: ApiInOutVo, options?: any): AxiosPromise<number> {
            return localVarFp.rgsnApi(apiInOutVo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApiControllerApi - object-oriented interface
 * @export
 * @class ApiControllerApi
 * @extends {BaseAPI}
 */
export class ApiControllerApi extends BaseAPI {
    /**
     * 
     * @param {ApiInVo} apiInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiControllerApi
     */
    public delApi(apiInVo: ApiInVo, options?: RawAxiosRequestConfig) {
        return ApiControllerApiFp(this.configuration).delApi(apiInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiInOutVo} apiInOutVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiControllerApi
     */
    public inqApi(apiInOutVo: ApiInOutVo, options?: RawAxiosRequestConfig) {
        return ApiControllerApiFp(this.configuration).inqApi(apiInOutVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiInVo} apiInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiControllerApi
     */
    public inqApiDtl(apiInVo: ApiInVo, options?: RawAxiosRequestConfig) {
        return ApiControllerApiFp(this.configuration).inqApiDtl(apiInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiInOutVo} apiInOutVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiControllerApi
     */
    public mdfcApi(apiInOutVo: ApiInOutVo, options?: RawAxiosRequestConfig) {
        return ApiControllerApiFp(this.configuration).mdfcApi(apiInOutVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiInOutVo} apiInOutVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiControllerApi
     */
    public rgsnApi(apiInOutVo: ApiInOutVo, options?: RawAxiosRequestConfig) {
        return ApiControllerApiFp(this.configuration).rgsnApi(apiInOutVo, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ApprovalControllerApi - axios parameter creator
 * @export
 */
export const ApprovalControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 신청상세 정보 조회 api
         * @summary 신청상세 정보 조회
         * @param {ApprovalDetaillnVo} approvalDetaillnVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqApprovalDtl: async (approvalDetaillnVo: ApprovalDetaillnVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'approvalDetaillnVo' is not null or undefined
            assertParamExists('inqApprovalDtl', 'approvalDetaillnVo', approvalDetaillnVo)
            const localVarPath = `/v1/approval/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(approvalDetaillnVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 결제선 리스트 api
         * @summary 결제선 리스트
         * @param {ApprovalLinlnVo} approvalLinlnVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqApprovalLineList: async (approvalLinlnVo: ApprovalLinlnVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'approvalLinlnVo' is not null or undefined
            assertParamExists('inqApprovalLineList', 'approvalLinlnVo', approvalLinlnVo)
            const localVarPath = `/v1/approval/line/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(approvalLinlnVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 나의 결재관리 결재 카운트 api
         * @summary 나의 결재관리 결재 카운트
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqApprovalMyCount: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/approval/my/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 나의 결제신청 리스트 api
         * @summary 나의 결제신청 리스트
         * @param {ApprovalMyPageInVo} approvalMyPageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqMyPageApproval: async (approvalMyPageInVo: ApprovalMyPageInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'approvalMyPageInVo' is not null or undefined
            assertParamExists('inqMyPageApproval', 'approvalMyPageInVo', approvalMyPageInVo)
            const localVarPath = `/v1/approval/my/request/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(approvalMyPageInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 결제 리스트 api
         * @summary 결제 리스트
         * @param {ApprovalPageInVo} approvalPageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqPageApproval: async (approvalPageInVo: ApprovalPageInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'approvalPageInVo' is not null or undefined
            assertParamExists('inqPageApproval', 'approvalPageInVo', approvalPageInVo)
            const localVarPath = `/v1/approval/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(approvalPageInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 결제 상태 변경 api
         * @summary 결제 상태 변경
         * @param {Array<ApprovalLinStateInVo>} approvalLinStateInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcApprovalLineStates: async (approvalLinStateInVo: Array<ApprovalLinStateInVo>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'approvalLinStateInVo' is not null or undefined
            assertParamExists('mdfcApprovalLineStates', 'approvalLinStateInVo', approvalLinStateInVo)
            const localVarPath = `/v1/approval/line/state/modify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(approvalLinStateInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 결제 정보 등록 api
         * @summary 결제 신청 등록
         * @param {ApprovalRequestInVo} approvalRequestInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnApprovalRequest: async (approvalRequestInVo: ApprovalRequestInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'approvalRequestInVo' is not null or undefined
            assertParamExists('rgsnApprovalRequest', 'approvalRequestInVo', approvalRequestInVo)
            const localVarPath = `/v1/approval/request/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(approvalRequestInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApprovalControllerApi - functional programming interface
 * @export
 */
export const ApprovalControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApprovalControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 신청상세 정보 조회 api
         * @summary 신청상세 정보 조회
         * @param {ApprovalDetaillnVo} approvalDetaillnVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqApprovalDtl(approvalDetaillnVo: ApprovalDetaillnVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApprovalDetailOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqApprovalDtl(approvalDetaillnVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApprovalControllerApi.inqApprovalDtl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 결제선 리스트 api
         * @summary 결제선 리스트
         * @param {ApprovalLinlnVo} approvalLinlnVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqApprovalLineList(approvalLinlnVo: ApprovalLinlnVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApprovalLinOutVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqApprovalLineList(approvalLinlnVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApprovalControllerApi.inqApprovalLineList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 나의 결재관리 결재 카운트 api
         * @summary 나의 결재관리 결재 카운트
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqApprovalMyCount(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApprovalMyCountOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqApprovalMyCount(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApprovalControllerApi.inqApprovalMyCount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 나의 결제신청 리스트 api
         * @summary 나의 결제신청 리스트
         * @param {ApprovalMyPageInVo} approvalMyPageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqMyPageApproval(approvalMyPageInVo: ApprovalMyPageInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageApprovalMyOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqMyPageApproval(approvalMyPageInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApprovalControllerApi.inqMyPageApproval']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 결제 리스트 api
         * @summary 결제 리스트
         * @param {ApprovalPageInVo} approvalPageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqPageApproval(approvalPageInVo: ApprovalPageInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageApprovalOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqPageApproval(approvalPageInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApprovalControllerApi.inqPageApproval']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 결제 상태 변경 api
         * @summary 결제 상태 변경
         * @param {Array<ApprovalLinStateInVo>} approvalLinStateInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mdfcApprovalLineStates(approvalLinStateInVo: Array<ApprovalLinStateInVo>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mdfcApprovalLineStates(approvalLinStateInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApprovalControllerApi.mdfcApprovalLineStates']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 결제 정보 등록 api
         * @summary 결제 신청 등록
         * @param {ApprovalRequestInVo} approvalRequestInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rgsnApprovalRequest(approvalRequestInVo: ApprovalRequestInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rgsnApprovalRequest(approvalRequestInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApprovalControllerApi.rgsnApprovalRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ApprovalControllerApi - factory interface
 * @export
 */
export const ApprovalControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApprovalControllerApiFp(configuration)
    return {
        /**
         * 신청상세 정보 조회 api
         * @summary 신청상세 정보 조회
         * @param {ApprovalDetaillnVo} approvalDetaillnVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqApprovalDtl(approvalDetaillnVo: ApprovalDetaillnVo, options?: any): AxiosPromise<ApprovalDetailOutVo> {
            return localVarFp.inqApprovalDtl(approvalDetaillnVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 결제선 리스트 api
         * @summary 결제선 리스트
         * @param {ApprovalLinlnVo} approvalLinlnVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqApprovalLineList(approvalLinlnVo: ApprovalLinlnVo, options?: any): AxiosPromise<Array<ApprovalLinOutVo>> {
            return localVarFp.inqApprovalLineList(approvalLinlnVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 나의 결재관리 결재 카운트 api
         * @summary 나의 결재관리 결재 카운트
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqApprovalMyCount(options?: any): AxiosPromise<ApprovalMyCountOutVo> {
            return localVarFp.inqApprovalMyCount(options).then((request) => request(axios, basePath));
        },
        /**
         * 나의 결제신청 리스트 api
         * @summary 나의 결제신청 리스트
         * @param {ApprovalMyPageInVo} approvalMyPageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqMyPageApproval(approvalMyPageInVo: ApprovalMyPageInVo, options?: any): AxiosPromise<PageApprovalMyOutVo> {
            return localVarFp.inqMyPageApproval(approvalMyPageInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 결제 리스트 api
         * @summary 결제 리스트
         * @param {ApprovalPageInVo} approvalPageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqPageApproval(approvalPageInVo: ApprovalPageInVo, options?: any): AxiosPromise<PageApprovalOutVo> {
            return localVarFp.inqPageApproval(approvalPageInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 결제 상태 변경 api
         * @summary 결제 상태 변경
         * @param {Array<ApprovalLinStateInVo>} approvalLinStateInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcApprovalLineStates(approvalLinStateInVo: Array<ApprovalLinStateInVo>, options?: any): AxiosPromise<void> {
            return localVarFp.mdfcApprovalLineStates(approvalLinStateInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 결제 정보 등록 api
         * @summary 결제 신청 등록
         * @param {ApprovalRequestInVo} approvalRequestInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnApprovalRequest(approvalRequestInVo: ApprovalRequestInVo, options?: any): AxiosPromise<void> {
            return localVarFp.rgsnApprovalRequest(approvalRequestInVo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApprovalControllerApi - object-oriented interface
 * @export
 * @class ApprovalControllerApi
 * @extends {BaseAPI}
 */
export class ApprovalControllerApi extends BaseAPI {
    /**
     * 신청상세 정보 조회 api
     * @summary 신청상세 정보 조회
     * @param {ApprovalDetaillnVo} approvalDetaillnVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApprovalControllerApi
     */
    public inqApprovalDtl(approvalDetaillnVo: ApprovalDetaillnVo, options?: RawAxiosRequestConfig) {
        return ApprovalControllerApiFp(this.configuration).inqApprovalDtl(approvalDetaillnVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 결제선 리스트 api
     * @summary 결제선 리스트
     * @param {ApprovalLinlnVo} approvalLinlnVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApprovalControllerApi
     */
    public inqApprovalLineList(approvalLinlnVo: ApprovalLinlnVo, options?: RawAxiosRequestConfig) {
        return ApprovalControllerApiFp(this.configuration).inqApprovalLineList(approvalLinlnVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 나의 결재관리 결재 카운트 api
     * @summary 나의 결재관리 결재 카운트
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApprovalControllerApi
     */
    public inqApprovalMyCount(options?: RawAxiosRequestConfig) {
        return ApprovalControllerApiFp(this.configuration).inqApprovalMyCount(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 나의 결제신청 리스트 api
     * @summary 나의 결제신청 리스트
     * @param {ApprovalMyPageInVo} approvalMyPageInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApprovalControllerApi
     */
    public inqMyPageApproval(approvalMyPageInVo: ApprovalMyPageInVo, options?: RawAxiosRequestConfig) {
        return ApprovalControllerApiFp(this.configuration).inqMyPageApproval(approvalMyPageInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 결제 리스트 api
     * @summary 결제 리스트
     * @param {ApprovalPageInVo} approvalPageInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApprovalControllerApi
     */
    public inqPageApproval(approvalPageInVo: ApprovalPageInVo, options?: RawAxiosRequestConfig) {
        return ApprovalControllerApiFp(this.configuration).inqPageApproval(approvalPageInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 결제 상태 변경 api
     * @summary 결제 상태 변경
     * @param {Array<ApprovalLinStateInVo>} approvalLinStateInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApprovalControllerApi
     */
    public mdfcApprovalLineStates(approvalLinStateInVo: Array<ApprovalLinStateInVo>, options?: RawAxiosRequestConfig) {
        return ApprovalControllerApiFp(this.configuration).mdfcApprovalLineStates(approvalLinStateInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 결제 정보 등록 api
     * @summary 결제 신청 등록
     * @param {ApprovalRequestInVo} approvalRequestInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApprovalControllerApi
     */
    public rgsnApprovalRequest(approvalRequestInVo: ApprovalRequestInVo, options?: RawAxiosRequestConfig) {
        return ApprovalControllerApiFp(this.configuration).rgsnApprovalRequest(approvalRequestInVo, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BoardCategoryControllerApi - axios parameter creator
 * @export
 */
export const BoardCategoryControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 게시판 분류 리스트 api
         * @summary 게시판 분류 리스트
         * @param {BoardCategoryListInVo} boardCategoryListInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqBoardCategoryList: async (boardCategoryListInVo: BoardCategoryListInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'boardCategoryListInVo' is not null or undefined
            assertParamExists('inqBoardCategoryList', 'boardCategoryListInVo', boardCategoryListInVo)
            const localVarPath = `/v1/board/category/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(boardCategoryListInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BoardCategoryControllerApi - functional programming interface
 * @export
 */
export const BoardCategoryControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BoardCategoryControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 게시판 분류 리스트 api
         * @summary 게시판 분류 리스트
         * @param {BoardCategoryListInVo} boardCategoryListInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqBoardCategoryList(boardCategoryListInVo: BoardCategoryListInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BoardCategoryOutVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqBoardCategoryList(boardCategoryListInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoardCategoryControllerApi.inqBoardCategoryList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BoardCategoryControllerApi - factory interface
 * @export
 */
export const BoardCategoryControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BoardCategoryControllerApiFp(configuration)
    return {
        /**
         * 게시판 분류 리스트 api
         * @summary 게시판 분류 리스트
         * @param {BoardCategoryListInVo} boardCategoryListInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqBoardCategoryList(boardCategoryListInVo: BoardCategoryListInVo, options?: any): AxiosPromise<Array<BoardCategoryOutVo>> {
            return localVarFp.inqBoardCategoryList(boardCategoryListInVo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BoardCategoryControllerApi - object-oriented interface
 * @export
 * @class BoardCategoryControllerApi
 * @extends {BaseAPI}
 */
export class BoardCategoryControllerApi extends BaseAPI {
    /**
     * 게시판 분류 리스트 api
     * @summary 게시판 분류 리스트
     * @param {BoardCategoryListInVo} boardCategoryListInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardCategoryControllerApi
     */
    public inqBoardCategoryList(boardCategoryListInVo: BoardCategoryListInVo, options?: RawAxiosRequestConfig) {
        return BoardCategoryControllerApiFp(this.configuration).inqBoardCategoryList(boardCategoryListInVo, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BoardContentsCommentControllerApi - axios parameter creator
 * @export
 */
export const BoardContentsCommentControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * [댓글 정보 삭제 api
         * @summary 댓글 정보 삭제
         * @param {BoardContentsCommentInVo} boardContentsCommentInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delBoardContentsComment: async (boardContentsCommentInVo: BoardContentsCommentInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'boardContentsCommentInVo' is not null or undefined
            assertParamExists('delBoardContentsComment', 'boardContentsCommentInVo', boardContentsCommentInVo)
            const localVarPath = `/v1/board/contents/comment/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(boardContentsCommentInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [댓글 정보 여러건 삭제 api
         * @summary 댓글 정보 여러건 삭제
         * @param {Array<BoardContentsCommentInVo>} boardContentsCommentInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delBoardContentsCommentMulti: async (boardContentsCommentInVo: Array<BoardContentsCommentInVo>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'boardContentsCommentInVo' is not null or undefined
            assertParamExists('delBoardContentsCommentMulti', 'boardContentsCommentInVo', boardContentsCommentInVo)
            const localVarPath = `/v1/board/contents/comment/delete/multi`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(boardContentsCommentInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 게시판 게시글 댓글 리스트 api
         * @summary 게시판 게시글 댓글 리스트
         * @param {BoardContentsCommentInVo} boardContentsCommentInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqBoardContentsCommentList: async (boardContentsCommentInVo: BoardContentsCommentInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'boardContentsCommentInVo' is not null or undefined
            assertParamExists('inqBoardContentsCommentList', 'boardContentsCommentInVo', boardContentsCommentInVo)
            const localVarPath = `/v1/board/contents/comment/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(boardContentsCommentInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 게시판 게시글 댓글 페이지 리스트 api
         * @summary 게시판 게시글 댓글 페이징 리스트
         * @param {BoardContentsCommentPageInqInVo} boardContentsCommentPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqBoardContentsCommentPage: async (boardContentsCommentPageInqInVo: BoardContentsCommentPageInqInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'boardContentsCommentPageInqInVo' is not null or undefined
            assertParamExists('inqBoardContentsCommentPage', 'boardContentsCommentPageInqInVo', boardContentsCommentPageInqInVo)
            const localVarPath = `/v1/board/contents/comment/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(boardContentsCommentPageInqInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 게시판 게시글 댓글 랭킹 리스트 api
         * @summary 게시판 게시글 댓글 랭킹 리스트
         * @param {BoardContentsCommentRankInVo} boardContentsCommentRankInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqBoardContentsCommentRankList: async (boardContentsCommentRankInVo: BoardContentsCommentRankInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'boardContentsCommentRankInVo' is not null or undefined
            assertParamExists('inqBoardContentsCommentRankList', 'boardContentsCommentRankInVo', boardContentsCommentRankInVo)
            const localVarPath = `/v1/board/contents/comment/rank/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(boardContentsCommentRankInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [댓글 정보 수정 api
         * @summary 댓글 정보 수정
         * @param {BoardContentsCommentInVo} boardContentsCommentInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcBoardContentsComment: async (boardContentsCommentInVo: BoardContentsCommentInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'boardContentsCommentInVo' is not null or undefined
            assertParamExists('mdfcBoardContentsComment', 'boardContentsCommentInVo', boardContentsCommentInVo)
            const localVarPath = `/v1/board/contents/comment/modify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(boardContentsCommentInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 게시판 게시글 댓글 정보 등록 api
         * @summary 게시판 게시글 댓글 정보 등록
         * @param {BoardContentsCommentInVo} boardContentsCommentInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnBoardContentsComment: async (boardContentsCommentInVo: BoardContentsCommentInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'boardContentsCommentInVo' is not null or undefined
            assertParamExists('rgsnBoardContentsComment', 'boardContentsCommentInVo', boardContentsCommentInVo)
            const localVarPath = `/v1/board/contents/comment/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(boardContentsCommentInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BoardContentsCommentControllerApi - functional programming interface
 * @export
 */
export const BoardContentsCommentControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BoardContentsCommentControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * [댓글 정보 삭제 api
         * @summary 댓글 정보 삭제
         * @param {BoardContentsCommentInVo} boardContentsCommentInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delBoardContentsComment(boardContentsCommentInVo: BoardContentsCommentInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delBoardContentsComment(boardContentsCommentInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoardContentsCommentControllerApi.delBoardContentsComment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * [댓글 정보 여러건 삭제 api
         * @summary 댓글 정보 여러건 삭제
         * @param {Array<BoardContentsCommentInVo>} boardContentsCommentInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delBoardContentsCommentMulti(boardContentsCommentInVo: Array<BoardContentsCommentInVo>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delBoardContentsCommentMulti(boardContentsCommentInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoardContentsCommentControllerApi.delBoardContentsCommentMulti']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 게시판 게시글 댓글 리스트 api
         * @summary 게시판 게시글 댓글 리스트
         * @param {BoardContentsCommentInVo} boardContentsCommentInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqBoardContentsCommentList(boardContentsCommentInVo: BoardContentsCommentInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BoardContentsCommentOutVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqBoardContentsCommentList(boardContentsCommentInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoardContentsCommentControllerApi.inqBoardContentsCommentList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 게시판 게시글 댓글 페이지 리스트 api
         * @summary 게시판 게시글 댓글 페이징 리스트
         * @param {BoardContentsCommentPageInqInVo} boardContentsCommentPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqBoardContentsCommentPage(boardContentsCommentPageInqInVo: BoardContentsCommentPageInqInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageBoardContentsCommentOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqBoardContentsCommentPage(boardContentsCommentPageInqInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoardContentsCommentControllerApi.inqBoardContentsCommentPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 게시판 게시글 댓글 랭킹 리스트 api
         * @summary 게시판 게시글 댓글 랭킹 리스트
         * @param {BoardContentsCommentRankInVo} boardContentsCommentRankInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqBoardContentsCommentRankList(boardContentsCommentRankInVo: BoardContentsCommentRankInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BoardContentsCommentRankOutVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqBoardContentsCommentRankList(boardContentsCommentRankInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoardContentsCommentControllerApi.inqBoardContentsCommentRankList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * [댓글 정보 수정 api
         * @summary 댓글 정보 수정
         * @param {BoardContentsCommentInVo} boardContentsCommentInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mdfcBoardContentsComment(boardContentsCommentInVo: BoardContentsCommentInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mdfcBoardContentsComment(boardContentsCommentInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoardContentsCommentControllerApi.mdfcBoardContentsComment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 게시판 게시글 댓글 정보 등록 api
         * @summary 게시판 게시글 댓글 정보 등록
         * @param {BoardContentsCommentInVo} boardContentsCommentInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rgsnBoardContentsComment(boardContentsCommentInVo: BoardContentsCommentInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rgsnBoardContentsComment(boardContentsCommentInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoardContentsCommentControllerApi.rgsnBoardContentsComment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BoardContentsCommentControllerApi - factory interface
 * @export
 */
export const BoardContentsCommentControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BoardContentsCommentControllerApiFp(configuration)
    return {
        /**
         * [댓글 정보 삭제 api
         * @summary 댓글 정보 삭제
         * @param {BoardContentsCommentInVo} boardContentsCommentInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delBoardContentsComment(boardContentsCommentInVo: BoardContentsCommentInVo, options?: any): AxiosPromise<void> {
            return localVarFp.delBoardContentsComment(boardContentsCommentInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * [댓글 정보 여러건 삭제 api
         * @summary 댓글 정보 여러건 삭제
         * @param {Array<BoardContentsCommentInVo>} boardContentsCommentInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delBoardContentsCommentMulti(boardContentsCommentInVo: Array<BoardContentsCommentInVo>, options?: any): AxiosPromise<void> {
            return localVarFp.delBoardContentsCommentMulti(boardContentsCommentInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 게시판 게시글 댓글 리스트 api
         * @summary 게시판 게시글 댓글 리스트
         * @param {BoardContentsCommentInVo} boardContentsCommentInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqBoardContentsCommentList(boardContentsCommentInVo: BoardContentsCommentInVo, options?: any): AxiosPromise<Array<BoardContentsCommentOutVo>> {
            return localVarFp.inqBoardContentsCommentList(boardContentsCommentInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 게시판 게시글 댓글 페이지 리스트 api
         * @summary 게시판 게시글 댓글 페이징 리스트
         * @param {BoardContentsCommentPageInqInVo} boardContentsCommentPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqBoardContentsCommentPage(boardContentsCommentPageInqInVo: BoardContentsCommentPageInqInVo, options?: any): AxiosPromise<PageBoardContentsCommentOutVo> {
            return localVarFp.inqBoardContentsCommentPage(boardContentsCommentPageInqInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 게시판 게시글 댓글 랭킹 리스트 api
         * @summary 게시판 게시글 댓글 랭킹 리스트
         * @param {BoardContentsCommentRankInVo} boardContentsCommentRankInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqBoardContentsCommentRankList(boardContentsCommentRankInVo: BoardContentsCommentRankInVo, options?: any): AxiosPromise<Array<BoardContentsCommentRankOutVo>> {
            return localVarFp.inqBoardContentsCommentRankList(boardContentsCommentRankInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * [댓글 정보 수정 api
         * @summary 댓글 정보 수정
         * @param {BoardContentsCommentInVo} boardContentsCommentInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcBoardContentsComment(boardContentsCommentInVo: BoardContentsCommentInVo, options?: any): AxiosPromise<void> {
            return localVarFp.mdfcBoardContentsComment(boardContentsCommentInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 게시판 게시글 댓글 정보 등록 api
         * @summary 게시판 게시글 댓글 정보 등록
         * @param {BoardContentsCommentInVo} boardContentsCommentInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnBoardContentsComment(boardContentsCommentInVo: BoardContentsCommentInVo, options?: any): AxiosPromise<void> {
            return localVarFp.rgsnBoardContentsComment(boardContentsCommentInVo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BoardContentsCommentControllerApi - object-oriented interface
 * @export
 * @class BoardContentsCommentControllerApi
 * @extends {BaseAPI}
 */
export class BoardContentsCommentControllerApi extends BaseAPI {
    /**
     * [댓글 정보 삭제 api
     * @summary 댓글 정보 삭제
     * @param {BoardContentsCommentInVo} boardContentsCommentInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardContentsCommentControllerApi
     */
    public delBoardContentsComment(boardContentsCommentInVo: BoardContentsCommentInVo, options?: RawAxiosRequestConfig) {
        return BoardContentsCommentControllerApiFp(this.configuration).delBoardContentsComment(boardContentsCommentInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * [댓글 정보 여러건 삭제 api
     * @summary 댓글 정보 여러건 삭제
     * @param {Array<BoardContentsCommentInVo>} boardContentsCommentInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardContentsCommentControllerApi
     */
    public delBoardContentsCommentMulti(boardContentsCommentInVo: Array<BoardContentsCommentInVo>, options?: RawAxiosRequestConfig) {
        return BoardContentsCommentControllerApiFp(this.configuration).delBoardContentsCommentMulti(boardContentsCommentInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 게시판 게시글 댓글 리스트 api
     * @summary 게시판 게시글 댓글 리스트
     * @param {BoardContentsCommentInVo} boardContentsCommentInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardContentsCommentControllerApi
     */
    public inqBoardContentsCommentList(boardContentsCommentInVo: BoardContentsCommentInVo, options?: RawAxiosRequestConfig) {
        return BoardContentsCommentControllerApiFp(this.configuration).inqBoardContentsCommentList(boardContentsCommentInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 게시판 게시글 댓글 페이지 리스트 api
     * @summary 게시판 게시글 댓글 페이징 리스트
     * @param {BoardContentsCommentPageInqInVo} boardContentsCommentPageInqInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardContentsCommentControllerApi
     */
    public inqBoardContentsCommentPage(boardContentsCommentPageInqInVo: BoardContentsCommentPageInqInVo, options?: RawAxiosRequestConfig) {
        return BoardContentsCommentControllerApiFp(this.configuration).inqBoardContentsCommentPage(boardContentsCommentPageInqInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 게시판 게시글 댓글 랭킹 리스트 api
     * @summary 게시판 게시글 댓글 랭킹 리스트
     * @param {BoardContentsCommentRankInVo} boardContentsCommentRankInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardContentsCommentControllerApi
     */
    public inqBoardContentsCommentRankList(boardContentsCommentRankInVo: BoardContentsCommentRankInVo, options?: RawAxiosRequestConfig) {
        return BoardContentsCommentControllerApiFp(this.configuration).inqBoardContentsCommentRankList(boardContentsCommentRankInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * [댓글 정보 수정 api
     * @summary 댓글 정보 수정
     * @param {BoardContentsCommentInVo} boardContentsCommentInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardContentsCommentControllerApi
     */
    public mdfcBoardContentsComment(boardContentsCommentInVo: BoardContentsCommentInVo, options?: RawAxiosRequestConfig) {
        return BoardContentsCommentControllerApiFp(this.configuration).mdfcBoardContentsComment(boardContentsCommentInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 게시판 게시글 댓글 정보 등록 api
     * @summary 게시판 게시글 댓글 정보 등록
     * @param {BoardContentsCommentInVo} boardContentsCommentInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardContentsCommentControllerApi
     */
    public rgsnBoardContentsComment(boardContentsCommentInVo: BoardContentsCommentInVo, options?: RawAxiosRequestConfig) {
        return BoardContentsCommentControllerApiFp(this.configuration).rgsnBoardContentsComment(boardContentsCommentInVo, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BoardContentsControllerApi - axios parameter creator
 * @export
 */
export const BoardContentsControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * [게시판 게시글 단일 삭제 api
         * @summary 게시판 게시글 단일 삭제
         * @param {BoardContentsInVo} boardContentsInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delBoardContents: async (boardContentsInVo: BoardContentsInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'boardContentsInVo' is not null or undefined
            assertParamExists('delBoardContents', 'boardContentsInVo', boardContentsInVo)
            const localVarPath = `/v1/board/contents/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(boardContentsInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [게시판 게시글 멀티 삭제 api
         * @summary 게시판 게시글 멀티 삭제
         * @param {Array<BoardContentsDeleteInVo>} boardContentsDeleteInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delBoardContentsMulti: async (boardContentsDeleteInVo: Array<BoardContentsDeleteInVo>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'boardContentsDeleteInVo' is not null or undefined
            assertParamExists('delBoardContentsMulti', 'boardContentsDeleteInVo', boardContentsDeleteInVo)
            const localVarPath = `/v1/board/contents/delete/multi`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(boardContentsDeleteInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 게시판 게시글 페이지 리스트 api
         * @summary 게시판 게시글 페이징 리스트
         * @param {BoardContentsPageInqInVo} boardContentsPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqBoardContentsBestPage: async (boardContentsPageInqInVo: BoardContentsPageInqInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'boardContentsPageInqInVo' is not null or undefined
            assertParamExists('inqBoardContentsBestPage', 'boardContentsPageInqInVo', boardContentsPageInqInVo)
            const localVarPath = `/v1/board/contents/best/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(boardContentsPageInqInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 게시글 상세 정보 조회 api
         * @summary 게시글 상세 정보 조회
         * @param {BoardContentsInVo} boardContentsInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqBoardContentsDtl: async (boardContentsInVo: BoardContentsInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'boardContentsInVo' is not null or undefined
            assertParamExists('inqBoardContentsDtl', 'boardContentsInVo', boardContentsInVo)
            const localVarPath = `/v1/board/contents/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(boardContentsInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 게시판 게시글 페이지 리스트 api
         * @summary 게시판 게시글 페이징 리스트
         * @param {BoardContentsPageInqInVo} boardContentsPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqBoardContentsPage: async (boardContentsPageInqInVo: BoardContentsPageInqInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'boardContentsPageInqInVo' is not null or undefined
            assertParamExists('inqBoardContentsPage', 'boardContentsPageInqInVo', boardContentsPageInqInVo)
            const localVarPath = `/v1/board/contents/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(boardContentsPageInqInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 첫 게시글 여부 조회 api
         * @summary 첫 게시글 여부 조회
         * @param {BoardContentsInVo} boardContentsInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isFirstWrite: async (boardContentsInVo: BoardContentsInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'boardContentsInVo' is not null or undefined
            assertParamExists('isFirstWrite', 'boardContentsInVo', boardContentsInVo)
            const localVarPath = `/v1/board/contents/isFirstWrite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(boardContentsInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [게시판 게시글 정보 수정 api
         * @summary 게시판 게시글 정보 수정
         * @param {BoardContentsInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcBoardContents: async (inVo: BoardContentsInVo, files?: Array<File>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inVo' is not null or undefined
            assertParamExists('mdfcBoardContents', 'inVo', inVo)
            const localVarPath = `/v1/board/contents/modify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (files) {
                files.forEach((element) => {
                  localVarFormParams.append('files', element as any);
                })
            }

    
            if (inVo !== undefined) { 
                localVarFormParams.append('inVo', new Blob([JSON.stringify(inVo)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 게시판 게시글 정보 등록 api
         * @summary 게시판 게시글 정보 등록
         * @param {BoardContentsInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnBoardContents: async (inVo: BoardContentsInVo, files?: Array<File>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inVo' is not null or undefined
            assertParamExists('rgsnBoardContents', 'inVo', inVo)
            const localVarPath = `/v1/board/contents/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (files) {
                files.forEach((element) => {
                  localVarFormParams.append('files', element as any);
                })
            }

    
            if (inVo !== undefined) { 
                localVarFormParams.append('inVo', new Blob([JSON.stringify(inVo)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 게시글 좋아요 등록/삭제 api
         * @summary 게시글 좋아요 등록/삭제
         * @param {BoardContentsLikeInVo} boardContentsLikeInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveBoardContentsLike: async (boardContentsLikeInVo: BoardContentsLikeInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'boardContentsLikeInVo' is not null or undefined
            assertParamExists('saveBoardContentsLike', 'boardContentsLikeInVo', boardContentsLikeInVo)
            const localVarPath = `/v1/board/contents/like`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(boardContentsLikeInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BoardContentsControllerApi - functional programming interface
 * @export
 */
export const BoardContentsControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BoardContentsControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * [게시판 게시글 단일 삭제 api
         * @summary 게시판 게시글 단일 삭제
         * @param {BoardContentsInVo} boardContentsInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delBoardContents(boardContentsInVo: BoardContentsInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delBoardContents(boardContentsInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoardContentsControllerApi.delBoardContents']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * [게시판 게시글 멀티 삭제 api
         * @summary 게시판 게시글 멀티 삭제
         * @param {Array<BoardContentsDeleteInVo>} boardContentsDeleteInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delBoardContentsMulti(boardContentsDeleteInVo: Array<BoardContentsDeleteInVo>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delBoardContentsMulti(boardContentsDeleteInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoardContentsControllerApi.delBoardContentsMulti']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 게시판 게시글 페이지 리스트 api
         * @summary 게시판 게시글 페이징 리스트
         * @param {BoardContentsPageInqInVo} boardContentsPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqBoardContentsBestPage(boardContentsPageInqInVo: BoardContentsPageInqInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageBoardContentsOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqBoardContentsBestPage(boardContentsPageInqInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoardContentsControllerApi.inqBoardContentsBestPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 게시글 상세 정보 조회 api
         * @summary 게시글 상세 정보 조회
         * @param {BoardContentsInVo} boardContentsInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqBoardContentsDtl(boardContentsInVo: BoardContentsInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BoardContentsOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqBoardContentsDtl(boardContentsInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoardContentsControllerApi.inqBoardContentsDtl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 게시판 게시글 페이지 리스트 api
         * @summary 게시판 게시글 페이징 리스트
         * @param {BoardContentsPageInqInVo} boardContentsPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqBoardContentsPage(boardContentsPageInqInVo: BoardContentsPageInqInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageBoardContentsOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqBoardContentsPage(boardContentsPageInqInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoardContentsControllerApi.inqBoardContentsPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 첫 게시글 여부 조회 api
         * @summary 첫 게시글 여부 조회
         * @param {BoardContentsInVo} boardContentsInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async isFirstWrite(boardContentsInVo: BoardContentsInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.isFirstWrite(boardContentsInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoardContentsControllerApi.isFirstWrite']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * [게시판 게시글 정보 수정 api
         * @summary 게시판 게시글 정보 수정
         * @param {BoardContentsInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mdfcBoardContents(inVo: BoardContentsInVo, files?: Array<File>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mdfcBoardContents(inVo, files, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoardContentsControllerApi.mdfcBoardContents']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 게시판 게시글 정보 등록 api
         * @summary 게시판 게시글 정보 등록
         * @param {BoardContentsInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rgsnBoardContents(inVo: BoardContentsInVo, files?: Array<File>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rgsnBoardContents(inVo, files, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoardContentsControllerApi.rgsnBoardContents']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 게시글 좋아요 등록/삭제 api
         * @summary 게시글 좋아요 등록/삭제
         * @param {BoardContentsLikeInVo} boardContentsLikeInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveBoardContentsLike(boardContentsLikeInVo: BoardContentsLikeInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveBoardContentsLike(boardContentsLikeInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoardContentsControllerApi.saveBoardContentsLike']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BoardContentsControllerApi - factory interface
 * @export
 */
export const BoardContentsControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BoardContentsControllerApiFp(configuration)
    return {
        /**
         * [게시판 게시글 단일 삭제 api
         * @summary 게시판 게시글 단일 삭제
         * @param {BoardContentsInVo} boardContentsInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delBoardContents(boardContentsInVo: BoardContentsInVo, options?: any): AxiosPromise<void> {
            return localVarFp.delBoardContents(boardContentsInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * [게시판 게시글 멀티 삭제 api
         * @summary 게시판 게시글 멀티 삭제
         * @param {Array<BoardContentsDeleteInVo>} boardContentsDeleteInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delBoardContentsMulti(boardContentsDeleteInVo: Array<BoardContentsDeleteInVo>, options?: any): AxiosPromise<void> {
            return localVarFp.delBoardContentsMulti(boardContentsDeleteInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 게시판 게시글 페이지 리스트 api
         * @summary 게시판 게시글 페이징 리스트
         * @param {BoardContentsPageInqInVo} boardContentsPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqBoardContentsBestPage(boardContentsPageInqInVo: BoardContentsPageInqInVo, options?: any): AxiosPromise<PageBoardContentsOutVo> {
            return localVarFp.inqBoardContentsBestPage(boardContentsPageInqInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 게시글 상세 정보 조회 api
         * @summary 게시글 상세 정보 조회
         * @param {BoardContentsInVo} boardContentsInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqBoardContentsDtl(boardContentsInVo: BoardContentsInVo, options?: any): AxiosPromise<BoardContentsOutVo> {
            return localVarFp.inqBoardContentsDtl(boardContentsInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 게시판 게시글 페이지 리스트 api
         * @summary 게시판 게시글 페이징 리스트
         * @param {BoardContentsPageInqInVo} boardContentsPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqBoardContentsPage(boardContentsPageInqInVo: BoardContentsPageInqInVo, options?: any): AxiosPromise<PageBoardContentsOutVo> {
            return localVarFp.inqBoardContentsPage(boardContentsPageInqInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 첫 게시글 여부 조회 api
         * @summary 첫 게시글 여부 조회
         * @param {BoardContentsInVo} boardContentsInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isFirstWrite(boardContentsInVo: BoardContentsInVo, options?: any): AxiosPromise<boolean> {
            return localVarFp.isFirstWrite(boardContentsInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * [게시판 게시글 정보 수정 api
         * @summary 게시판 게시글 정보 수정
         * @param {BoardContentsInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcBoardContents(inVo: BoardContentsInVo, files?: Array<File>, options?: any): AxiosPromise<void> {
            return localVarFp.mdfcBoardContents(inVo, files, options).then((request) => request(axios, basePath));
        },
        /**
         * 게시판 게시글 정보 등록 api
         * @summary 게시판 게시글 정보 등록
         * @param {BoardContentsInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnBoardContents(inVo: BoardContentsInVo, files?: Array<File>, options?: any): AxiosPromise<void> {
            return localVarFp.rgsnBoardContents(inVo, files, options).then((request) => request(axios, basePath));
        },
        /**
         * 게시글 좋아요 등록/삭제 api
         * @summary 게시글 좋아요 등록/삭제
         * @param {BoardContentsLikeInVo} boardContentsLikeInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveBoardContentsLike(boardContentsLikeInVo: BoardContentsLikeInVo, options?: any): AxiosPromise<void> {
            return localVarFp.saveBoardContentsLike(boardContentsLikeInVo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BoardContentsControllerApi - object-oriented interface
 * @export
 * @class BoardContentsControllerApi
 * @extends {BaseAPI}
 */
export class BoardContentsControllerApi extends BaseAPI {
    /**
     * [게시판 게시글 단일 삭제 api
     * @summary 게시판 게시글 단일 삭제
     * @param {BoardContentsInVo} boardContentsInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardContentsControllerApi
     */
    public delBoardContents(boardContentsInVo: BoardContentsInVo, options?: RawAxiosRequestConfig) {
        return BoardContentsControllerApiFp(this.configuration).delBoardContents(boardContentsInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * [게시판 게시글 멀티 삭제 api
     * @summary 게시판 게시글 멀티 삭제
     * @param {Array<BoardContentsDeleteInVo>} boardContentsDeleteInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardContentsControllerApi
     */
    public delBoardContentsMulti(boardContentsDeleteInVo: Array<BoardContentsDeleteInVo>, options?: RawAxiosRequestConfig) {
        return BoardContentsControllerApiFp(this.configuration).delBoardContentsMulti(boardContentsDeleteInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 게시판 게시글 페이지 리스트 api
     * @summary 게시판 게시글 페이징 리스트
     * @param {BoardContentsPageInqInVo} boardContentsPageInqInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardContentsControllerApi
     */
    public inqBoardContentsBestPage(boardContentsPageInqInVo: BoardContentsPageInqInVo, options?: RawAxiosRequestConfig) {
        return BoardContentsControllerApiFp(this.configuration).inqBoardContentsBestPage(boardContentsPageInqInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 게시글 상세 정보 조회 api
     * @summary 게시글 상세 정보 조회
     * @param {BoardContentsInVo} boardContentsInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardContentsControllerApi
     */
    public inqBoardContentsDtl(boardContentsInVo: BoardContentsInVo, options?: RawAxiosRequestConfig) {
        return BoardContentsControllerApiFp(this.configuration).inqBoardContentsDtl(boardContentsInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 게시판 게시글 페이지 리스트 api
     * @summary 게시판 게시글 페이징 리스트
     * @param {BoardContentsPageInqInVo} boardContentsPageInqInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardContentsControllerApi
     */
    public inqBoardContentsPage(boardContentsPageInqInVo: BoardContentsPageInqInVo, options?: RawAxiosRequestConfig) {
        return BoardContentsControllerApiFp(this.configuration).inqBoardContentsPage(boardContentsPageInqInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 첫 게시글 여부 조회 api
     * @summary 첫 게시글 여부 조회
     * @param {BoardContentsInVo} boardContentsInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardContentsControllerApi
     */
    public isFirstWrite(boardContentsInVo: BoardContentsInVo, options?: RawAxiosRequestConfig) {
        return BoardContentsControllerApiFp(this.configuration).isFirstWrite(boardContentsInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * [게시판 게시글 정보 수정 api
     * @summary 게시판 게시글 정보 수정
     * @param {BoardContentsInVo} inVo 
     * @param {Array<File>} [files] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardContentsControllerApi
     */
    public mdfcBoardContents(inVo: BoardContentsInVo, files?: Array<File>, options?: RawAxiosRequestConfig) {
        return BoardContentsControllerApiFp(this.configuration).mdfcBoardContents(inVo, files, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 게시판 게시글 정보 등록 api
     * @summary 게시판 게시글 정보 등록
     * @param {BoardContentsInVo} inVo 
     * @param {Array<File>} [files] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardContentsControllerApi
     */
    public rgsnBoardContents(inVo: BoardContentsInVo, files?: Array<File>, options?: RawAxiosRequestConfig) {
        return BoardContentsControllerApiFp(this.configuration).rgsnBoardContents(inVo, files, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 게시글 좋아요 등록/삭제 api
     * @summary 게시글 좋아요 등록/삭제
     * @param {BoardContentsLikeInVo} boardContentsLikeInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardContentsControllerApi
     */
    public saveBoardContentsLike(boardContentsLikeInVo: BoardContentsLikeInVo, options?: RawAxiosRequestConfig) {
        return BoardContentsControllerApiFp(this.configuration).saveBoardContentsLike(boardContentsLikeInVo, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BoardControllerApi - axios parameter creator
 * @export
 */
export const BoardControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 게시판 상세 정보 조회 api
         * @summary 게시판 상세 정보 조회
         * @param {BoardInVo} boardInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqBoardDtl: async (boardInVo: BoardInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'boardInVo' is not null or undefined
            assertParamExists('inqBoardDtl', 'boardInVo', boardInVo)
            const localVarPath = `/v1/board/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(boardInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 게시판 리스트 api
         * @summary 게시판 리스트
         * @param {BoardListInqInVo} boardListInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqBoardList: async (boardListInqInVo: BoardListInqInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'boardListInqInVo' is not null or undefined
            assertParamExists('inqBoardList', 'boardListInqInVo', boardListInqInVo)
            const localVarPath = `/v1/board/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(boardListInqInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 게시판 페이지 리스트 api
         * @summary 게시판 페이징 리스트
         * @param {BoardPageInqInVo} boardPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqBoardPage: async (boardPageInqInVo: BoardPageInqInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'boardPageInqInVo' is not null or undefined
            assertParamExists('inqBoardPage', 'boardPageInqInVo', boardPageInqInVo)
            const localVarPath = `/v1/board/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(boardPageInqInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BoardControllerApi - functional programming interface
 * @export
 */
export const BoardControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BoardControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 게시판 상세 정보 조회 api
         * @summary 게시판 상세 정보 조회
         * @param {BoardInVo} boardInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqBoardDtl(boardInVo: BoardInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BoardOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqBoardDtl(boardInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoardControllerApi.inqBoardDtl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 게시판 리스트 api
         * @summary 게시판 리스트
         * @param {BoardListInqInVo} boardListInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqBoardList(boardListInqInVo: BoardListInqInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BoardOutVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqBoardList(boardListInqInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoardControllerApi.inqBoardList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 게시판 페이지 리스트 api
         * @summary 게시판 페이징 리스트
         * @param {BoardPageInqInVo} boardPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqBoardPage(boardPageInqInVo: BoardPageInqInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageBoardOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqBoardPage(boardPageInqInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoardControllerApi.inqBoardPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BoardControllerApi - factory interface
 * @export
 */
export const BoardControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BoardControllerApiFp(configuration)
    return {
        /**
         * 게시판 상세 정보 조회 api
         * @summary 게시판 상세 정보 조회
         * @param {BoardInVo} boardInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqBoardDtl(boardInVo: BoardInVo, options?: any): AxiosPromise<BoardOutVo> {
            return localVarFp.inqBoardDtl(boardInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 게시판 리스트 api
         * @summary 게시판 리스트
         * @param {BoardListInqInVo} boardListInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqBoardList(boardListInqInVo: BoardListInqInVo, options?: any): AxiosPromise<Array<BoardOutVo>> {
            return localVarFp.inqBoardList(boardListInqInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 게시판 페이지 리스트 api
         * @summary 게시판 페이징 리스트
         * @param {BoardPageInqInVo} boardPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqBoardPage(boardPageInqInVo: BoardPageInqInVo, options?: any): AxiosPromise<PageBoardOutVo> {
            return localVarFp.inqBoardPage(boardPageInqInVo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BoardControllerApi - object-oriented interface
 * @export
 * @class BoardControllerApi
 * @extends {BaseAPI}
 */
export class BoardControllerApi extends BaseAPI {
    /**
     * 게시판 상세 정보 조회 api
     * @summary 게시판 상세 정보 조회
     * @param {BoardInVo} boardInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardControllerApi
     */
    public inqBoardDtl(boardInVo: BoardInVo, options?: RawAxiosRequestConfig) {
        return BoardControllerApiFp(this.configuration).inqBoardDtl(boardInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 게시판 리스트 api
     * @summary 게시판 리스트
     * @param {BoardListInqInVo} boardListInqInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardControllerApi
     */
    public inqBoardList(boardListInqInVo: BoardListInqInVo, options?: RawAxiosRequestConfig) {
        return BoardControllerApiFp(this.configuration).inqBoardList(boardListInqInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 게시판 페이지 리스트 api
     * @summary 게시판 페이징 리스트
     * @param {BoardPageInqInVo} boardPageInqInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardControllerApi
     */
    public inqBoardPage(boardPageInqInVo: BoardPageInqInVo, options?: RawAxiosRequestConfig) {
        return BoardControllerApiFp(this.configuration).inqBoardPage(boardPageInqInVo, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CommonAttachFileControllerApi - axios parameter creator
 * @export
 */
export const CommonAttachFileControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * [일반 공통 첨부파일 멀티 삭제 api
         * @summary 일반 공통 첨부파일 멀티 삭제
         * @param {Array<CommonAttachFileDeleteInVo>} commonAttachFileDeleteInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delCommonAttachFileMulti: async (commonAttachFileDeleteInVo: Array<CommonAttachFileDeleteInVo>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commonAttachFileDeleteInVo' is not null or undefined
            assertParamExists('delCommonAttachFileMulti', 'commonAttachFileDeleteInVo', commonAttachFileDeleteInVo)
            const localVarPath = `/v1/commonCode/attach/file/delete/multi`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(commonAttachFileDeleteInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 일반 공통 첨부파일 리스트 api
         * @summary 일반 공통 첨부파일 리스트
         * @param {CommonAttachFileListInVo} commonAttachFileListInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqCommonAttachFileList: async (commonAttachFileListInVo: CommonAttachFileListInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commonAttachFileListInVo' is not null or undefined
            assertParamExists('inqCommonAttachFileList', 'commonAttachFileListInVo', commonAttachFileListInVo)
            const localVarPath = `/v1/commonCode/attach/file/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(commonAttachFileListInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 일반 공통 첨부파일 등록 api
         * @summary 일반 공통 첨부파일 등록
         * @param {CommonAttachFilehInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnCommonAttachFile: async (inVo: CommonAttachFilehInVo, files?: Array<File>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inVo' is not null or undefined
            assertParamExists('rgsnCommonAttachFile', 'inVo', inVo)
            const localVarPath = `/v1/commonCode/attach/file/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (files) {
                files.forEach((element) => {
                  localVarFormParams.append('files', element as any);
                })
            }

    
            if (inVo !== undefined) { 
                localVarFormParams.append('inVo', new Blob([JSON.stringify(inVo)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommonAttachFileControllerApi - functional programming interface
 * @export
 */
export const CommonAttachFileControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CommonAttachFileControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * [일반 공통 첨부파일 멀티 삭제 api
         * @summary 일반 공통 첨부파일 멀티 삭제
         * @param {Array<CommonAttachFileDeleteInVo>} commonAttachFileDeleteInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delCommonAttachFileMulti(commonAttachFileDeleteInVo: Array<CommonAttachFileDeleteInVo>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delCommonAttachFileMulti(commonAttachFileDeleteInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommonAttachFileControllerApi.delCommonAttachFileMulti']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 일반 공통 첨부파일 리스트 api
         * @summary 일반 공통 첨부파일 리스트
         * @param {CommonAttachFileListInVo} commonAttachFileListInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqCommonAttachFileList(commonAttachFileListInVo: CommonAttachFileListInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CommonAttachFileOutVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqCommonAttachFileList(commonAttachFileListInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommonAttachFileControllerApi.inqCommonAttachFileList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 일반 공통 첨부파일 등록 api
         * @summary 일반 공통 첨부파일 등록
         * @param {CommonAttachFilehInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rgsnCommonAttachFile(inVo: CommonAttachFilehInVo, files?: Array<File>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rgsnCommonAttachFile(inVo, files, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommonAttachFileControllerApi.rgsnCommonAttachFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CommonAttachFileControllerApi - factory interface
 * @export
 */
export const CommonAttachFileControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CommonAttachFileControllerApiFp(configuration)
    return {
        /**
         * [일반 공통 첨부파일 멀티 삭제 api
         * @summary 일반 공통 첨부파일 멀티 삭제
         * @param {Array<CommonAttachFileDeleteInVo>} commonAttachFileDeleteInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delCommonAttachFileMulti(commonAttachFileDeleteInVo: Array<CommonAttachFileDeleteInVo>, options?: any): AxiosPromise<void> {
            return localVarFp.delCommonAttachFileMulti(commonAttachFileDeleteInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 일반 공통 첨부파일 리스트 api
         * @summary 일반 공통 첨부파일 리스트
         * @param {CommonAttachFileListInVo} commonAttachFileListInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqCommonAttachFileList(commonAttachFileListInVo: CommonAttachFileListInVo, options?: any): AxiosPromise<Array<CommonAttachFileOutVo>> {
            return localVarFp.inqCommonAttachFileList(commonAttachFileListInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 일반 공통 첨부파일 등록 api
         * @summary 일반 공통 첨부파일 등록
         * @param {CommonAttachFilehInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnCommonAttachFile(inVo: CommonAttachFilehInVo, files?: Array<File>, options?: any): AxiosPromise<void> {
            return localVarFp.rgsnCommonAttachFile(inVo, files, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CommonAttachFileControllerApi - object-oriented interface
 * @export
 * @class CommonAttachFileControllerApi
 * @extends {BaseAPI}
 */
export class CommonAttachFileControllerApi extends BaseAPI {
    /**
     * [일반 공통 첨부파일 멀티 삭제 api
     * @summary 일반 공통 첨부파일 멀티 삭제
     * @param {Array<CommonAttachFileDeleteInVo>} commonAttachFileDeleteInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonAttachFileControllerApi
     */
    public delCommonAttachFileMulti(commonAttachFileDeleteInVo: Array<CommonAttachFileDeleteInVo>, options?: RawAxiosRequestConfig) {
        return CommonAttachFileControllerApiFp(this.configuration).delCommonAttachFileMulti(commonAttachFileDeleteInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 일반 공통 첨부파일 리스트 api
     * @summary 일반 공통 첨부파일 리스트
     * @param {CommonAttachFileListInVo} commonAttachFileListInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonAttachFileControllerApi
     */
    public inqCommonAttachFileList(commonAttachFileListInVo: CommonAttachFileListInVo, options?: RawAxiosRequestConfig) {
        return CommonAttachFileControllerApiFp(this.configuration).inqCommonAttachFileList(commonAttachFileListInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 일반 공통 첨부파일 등록 api
     * @summary 일반 공통 첨부파일 등록
     * @param {CommonAttachFilehInVo} inVo 
     * @param {Array<File>} [files] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonAttachFileControllerApi
     */
    public rgsnCommonAttachFile(inVo: CommonAttachFilehInVo, files?: Array<File>, options?: RawAxiosRequestConfig) {
        return CommonAttachFileControllerApiFp(this.configuration).rgsnCommonAttachFile(inVo, files, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CommonCodeControllerApi - axios parameter creator
 * @export
 */
export const CommonCodeControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 공통코드 삭제
         * @summary 공통코드 삭제
         * @param {CommonCodeInVo} commonCodeInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delCommonCode: async (commonCodeInVo: CommonCodeInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commonCodeInVo' is not null or undefined
            assertParamExists('delCommonCode', 'commonCodeInVo', commonCodeInVo)
            const localVarPath = `/v1/commonCode/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(commonCodeInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 공통코드 리스트 api
         * @summary 공통코드 리스트
         * @param {CommonCodeListInqInVo} commonCodeListInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqCommonCodeList: async (commonCodeListInqInVo: CommonCodeListInqInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commonCodeListInqInVo' is not null or undefined
            assertParamExists('inqCommonCodeList', 'commonCodeListInqInVo', commonCodeListInqInVo)
            const localVarPath = `/v1/commonCode/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(commonCodeListInqInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 공통코드 전체 리스트 api
         * @summary 공통코드 전체 리스트
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqCommonCodeListAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/commonCode/list/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 공통코드 수정
         * @summary 공통코드 수정
         * @param {CommonCodeInVo} commonCodeInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcCommonCode: async (commonCodeInVo: CommonCodeInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commonCodeInVo' is not null or undefined
            assertParamExists('mdfcCommonCode', 'commonCodeInVo', commonCodeInVo)
            const localVarPath = `/v1/commonCode/modify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(commonCodeInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [공통코드 등록 api
         * @summary 공통코드 등록
         * @param {CommonCodeInVo} commonCodeInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnCommonCode: async (commonCodeInVo: CommonCodeInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commonCodeInVo' is not null or undefined
            assertParamExists('rgsnCommonCode', 'commonCodeInVo', commonCodeInVo)
            const localVarPath = `/v1/commonCode/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(commonCodeInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommonCodeControllerApi - functional programming interface
 * @export
 */
export const CommonCodeControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CommonCodeControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 공통코드 삭제
         * @summary 공통코드 삭제
         * @param {CommonCodeInVo} commonCodeInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delCommonCode(commonCodeInVo: CommonCodeInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delCommonCode(commonCodeInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommonCodeControllerApi.delCommonCode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 공통코드 리스트 api
         * @summary 공통코드 리스트
         * @param {CommonCodeListInqInVo} commonCodeListInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqCommonCodeList(commonCodeListInqInVo: CommonCodeListInqInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CommonCodeOutVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqCommonCodeList(commonCodeListInqInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommonCodeControllerApi.inqCommonCodeList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 공통코드 전체 리스트 api
         * @summary 공통코드 전체 리스트
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqCommonCodeListAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CommonCodeAllOutVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqCommonCodeListAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommonCodeControllerApi.inqCommonCodeListAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 공통코드 수정
         * @summary 공통코드 수정
         * @param {CommonCodeInVo} commonCodeInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mdfcCommonCode(commonCodeInVo: CommonCodeInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mdfcCommonCode(commonCodeInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommonCodeControllerApi.mdfcCommonCode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * [공통코드 등록 api
         * @summary 공통코드 등록
         * @param {CommonCodeInVo} commonCodeInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rgsnCommonCode(commonCodeInVo: CommonCodeInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rgsnCommonCode(commonCodeInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommonCodeControllerApi.rgsnCommonCode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CommonCodeControllerApi - factory interface
 * @export
 */
export const CommonCodeControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CommonCodeControllerApiFp(configuration)
    return {
        /**
         * 공통코드 삭제
         * @summary 공통코드 삭제
         * @param {CommonCodeInVo} commonCodeInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delCommonCode(commonCodeInVo: CommonCodeInVo, options?: any): AxiosPromise<void> {
            return localVarFp.delCommonCode(commonCodeInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 공통코드 리스트 api
         * @summary 공통코드 리스트
         * @param {CommonCodeListInqInVo} commonCodeListInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqCommonCodeList(commonCodeListInqInVo: CommonCodeListInqInVo, options?: any): AxiosPromise<Array<CommonCodeOutVo>> {
            return localVarFp.inqCommonCodeList(commonCodeListInqInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 공통코드 전체 리스트 api
         * @summary 공통코드 전체 리스트
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqCommonCodeListAll(options?: any): AxiosPromise<Array<CommonCodeAllOutVo>> {
            return localVarFp.inqCommonCodeListAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 공통코드 수정
         * @summary 공통코드 수정
         * @param {CommonCodeInVo} commonCodeInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcCommonCode(commonCodeInVo: CommonCodeInVo, options?: any): AxiosPromise<void> {
            return localVarFp.mdfcCommonCode(commonCodeInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * [공통코드 등록 api
         * @summary 공통코드 등록
         * @param {CommonCodeInVo} commonCodeInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnCommonCode(commonCodeInVo: CommonCodeInVo, options?: any): AxiosPromise<void> {
            return localVarFp.rgsnCommonCode(commonCodeInVo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CommonCodeControllerApi - object-oriented interface
 * @export
 * @class CommonCodeControllerApi
 * @extends {BaseAPI}
 */
export class CommonCodeControllerApi extends BaseAPI {
    /**
     * 공통코드 삭제
     * @summary 공통코드 삭제
     * @param {CommonCodeInVo} commonCodeInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonCodeControllerApi
     */
    public delCommonCode(commonCodeInVo: CommonCodeInVo, options?: RawAxiosRequestConfig) {
        return CommonCodeControllerApiFp(this.configuration).delCommonCode(commonCodeInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 공통코드 리스트 api
     * @summary 공통코드 리스트
     * @param {CommonCodeListInqInVo} commonCodeListInqInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonCodeControllerApi
     */
    public inqCommonCodeList(commonCodeListInqInVo: CommonCodeListInqInVo, options?: RawAxiosRequestConfig) {
        return CommonCodeControllerApiFp(this.configuration).inqCommonCodeList(commonCodeListInqInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 공통코드 전체 리스트 api
     * @summary 공통코드 전체 리스트
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonCodeControllerApi
     */
    public inqCommonCodeListAll(options?: RawAxiosRequestConfig) {
        return CommonCodeControllerApiFp(this.configuration).inqCommonCodeListAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 공통코드 수정
     * @summary 공통코드 수정
     * @param {CommonCodeInVo} commonCodeInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonCodeControllerApi
     */
    public mdfcCommonCode(commonCodeInVo: CommonCodeInVo, options?: RawAxiosRequestConfig) {
        return CommonCodeControllerApiFp(this.configuration).mdfcCommonCode(commonCodeInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * [공통코드 등록 api
     * @summary 공통코드 등록
     * @param {CommonCodeInVo} commonCodeInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonCodeControllerApi
     */
    public rgsnCommonCode(commonCodeInVo: CommonCodeInVo, options?: RawAxiosRequestConfig) {
        return CommonCodeControllerApiFp(this.configuration).rgsnCommonCode(commonCodeInVo, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CommonSurveyQuestionControllerApi - axios parameter creator
 * @export
 */
export const CommonSurveyQuestionControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 문항 삭제 api
         * @summary 문항 삭제
         * @param {Array<CommonSurveyQuestionInVo>} commonSurveyQuestionInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delCommonSurveyQuestion: async (commonSurveyQuestionInVo: Array<CommonSurveyQuestionInVo>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commonSurveyQuestionInVo' is not null or undefined
            assertParamExists('delCommonSurveyQuestion', 'commonSurveyQuestionInVo', commonSurveyQuestionInVo)
            const localVarPath = `/v1/common-survey-question/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(commonSurveyQuestionInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 설문 미리보기 리스트 api
         * @summary 설문 미리보기 리스트
         * @param {CommonSurveyQuestionInVo} commonSurveyQuestionInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqCommonSurveyQuestionAnswer: async (commonSurveyQuestionInVo: CommonSurveyQuestionInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commonSurveyQuestionInVo' is not null or undefined
            assertParamExists('inqCommonSurveyQuestionAnswer', 'commonSurveyQuestionInVo', commonSurveyQuestionInVo)
            const localVarPath = `/v1/common-survey-question/answer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(commonSurveyQuestionInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 문항 상세 정보 조회 api
         * @summary 문항 상세 정보 조회
         * @param {CommonSurveyQuestionInVo} commonSurveyQuestionInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqCommonSurveyQuestionDtl: async (commonSurveyQuestionInVo: CommonSurveyQuestionInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commonSurveyQuestionInVo' is not null or undefined
            assertParamExists('inqCommonSurveyQuestionDtl', 'commonSurveyQuestionInVo', commonSurveyQuestionInVo)
            const localVarPath = `/v1/common-survey-question/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(commonSurveyQuestionInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 문항 페이지 리스트 api
         * @summary 문항 페이징 리스트
         * @param {CommonSurveyQuestionPageInqInVo} commonSurveyQuestionPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqCommonSurveyQuestionPage: async (commonSurveyQuestionPageInqInVo: CommonSurveyQuestionPageInqInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commonSurveyQuestionPageInqInVo' is not null or undefined
            assertParamExists('inqCommonSurveyQuestionPage', 'commonSurveyQuestionPageInqInVo', commonSurveyQuestionPageInqInVo)
            const localVarPath = `/v1/common-survey-question/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(commonSurveyQuestionPageInqInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 설문 미리보기 리스트 api
         * @summary 설문 미리보기 리스트
         * @param {CommonSurveyQuestionInVo} commonSurveyQuestionInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqCommonSurveyQuestionPreview: async (commonSurveyQuestionInVo: CommonSurveyQuestionInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commonSurveyQuestionInVo' is not null or undefined
            assertParamExists('inqCommonSurveyQuestionPreview', 'commonSurveyQuestionInVo', commonSurveyQuestionInVo)
            const localVarPath = `/v1/common-survey-question/preview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(commonSurveyQuestionInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 공통 문항 등록 api
         * @summary 공통 문항 등록
         * @param {CommonSurveyQuestionInVo} commonSurveyQuestionInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnCommonSurveyQuestion: async (commonSurveyQuestionInVo: CommonSurveyQuestionInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commonSurveyQuestionInVo' is not null or undefined
            assertParamExists('rgsnCommonSurveyQuestion', 'commonSurveyQuestionInVo', commonSurveyQuestionInVo)
            const localVarPath = `/v1/common-survey-question/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(commonSurveyQuestionInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 설문 제출 API
         * @summary 설문 제출
         * @param {CommonSurveySubmitInVoList} commonSurveySubmitInVoList 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnCommonSurveySubmit: async (commonSurveySubmitInVoList: CommonSurveySubmitInVoList, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commonSurveySubmitInVoList' is not null or undefined
            assertParamExists('rgsnCommonSurveySubmit', 'commonSurveySubmitInVoList', commonSurveySubmitInVoList)
            const localVarPath = `/v1/common-survey-question/submit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(commonSurveySubmitInVoList, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommonSurveyQuestionControllerApi - functional programming interface
 * @export
 */
export const CommonSurveyQuestionControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CommonSurveyQuestionControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 문항 삭제 api
         * @summary 문항 삭제
         * @param {Array<CommonSurveyQuestionInVo>} commonSurveyQuestionInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delCommonSurveyQuestion(commonSurveyQuestionInVo: Array<CommonSurveyQuestionInVo>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delCommonSurveyQuestion(commonSurveyQuestionInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommonSurveyQuestionControllerApi.delCommonSurveyQuestion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 설문 미리보기 리스트 api
         * @summary 설문 미리보기 리스트
         * @param {CommonSurveyQuestionInVo} commonSurveyQuestionInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqCommonSurveyQuestionAnswer(commonSurveyQuestionInVo: CommonSurveyQuestionInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CommonSurveyQuestionDetailOutVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqCommonSurveyQuestionAnswer(commonSurveyQuestionInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommonSurveyQuestionControllerApi.inqCommonSurveyQuestionAnswer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 문항 상세 정보 조회 api
         * @summary 문항 상세 정보 조회
         * @param {CommonSurveyQuestionInVo} commonSurveyQuestionInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqCommonSurveyQuestionDtl(commonSurveyQuestionInVo: CommonSurveyQuestionInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonSurveyQuestionOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqCommonSurveyQuestionDtl(commonSurveyQuestionInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommonSurveyQuestionControllerApi.inqCommonSurveyQuestionDtl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 문항 페이지 리스트 api
         * @summary 문항 페이징 리스트
         * @param {CommonSurveyQuestionPageInqInVo} commonSurveyQuestionPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqCommonSurveyQuestionPage(commonSurveyQuestionPageInqInVo: CommonSurveyQuestionPageInqInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageCommonSurveyQuestionOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqCommonSurveyQuestionPage(commonSurveyQuestionPageInqInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommonSurveyQuestionControllerApi.inqCommonSurveyQuestionPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 설문 미리보기 리스트 api
         * @summary 설문 미리보기 리스트
         * @param {CommonSurveyQuestionInVo} commonSurveyQuestionInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqCommonSurveyQuestionPreview(commonSurveyQuestionInVo: CommonSurveyQuestionInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CommonSurveyQuestionDetailOutVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqCommonSurveyQuestionPreview(commonSurveyQuestionInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommonSurveyQuestionControllerApi.inqCommonSurveyQuestionPreview']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 공통 문항 등록 api
         * @summary 공통 문항 등록
         * @param {CommonSurveyQuestionInVo} commonSurveyQuestionInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rgsnCommonSurveyQuestion(commonSurveyQuestionInVo: CommonSurveyQuestionInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonSurveyQuestionOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rgsnCommonSurveyQuestion(commonSurveyQuestionInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommonSurveyQuestionControllerApi.rgsnCommonSurveyQuestion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 설문 제출 API
         * @summary 설문 제출
         * @param {CommonSurveySubmitInVoList} commonSurveySubmitInVoList 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rgsnCommonSurveySubmit(commonSurveySubmitInVoList: CommonSurveySubmitInVoList, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rgsnCommonSurveySubmit(commonSurveySubmitInVoList, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommonSurveyQuestionControllerApi.rgsnCommonSurveySubmit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CommonSurveyQuestionControllerApi - factory interface
 * @export
 */
export const CommonSurveyQuestionControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CommonSurveyQuestionControllerApiFp(configuration)
    return {
        /**
         * 문항 삭제 api
         * @summary 문항 삭제
         * @param {Array<CommonSurveyQuestionInVo>} commonSurveyQuestionInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delCommonSurveyQuestion(commonSurveyQuestionInVo: Array<CommonSurveyQuestionInVo>, options?: any): AxiosPromise<void> {
            return localVarFp.delCommonSurveyQuestion(commonSurveyQuestionInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 설문 미리보기 리스트 api
         * @summary 설문 미리보기 리스트
         * @param {CommonSurveyQuestionInVo} commonSurveyQuestionInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqCommonSurveyQuestionAnswer(commonSurveyQuestionInVo: CommonSurveyQuestionInVo, options?: any): AxiosPromise<Array<CommonSurveyQuestionDetailOutVo>> {
            return localVarFp.inqCommonSurveyQuestionAnswer(commonSurveyQuestionInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 문항 상세 정보 조회 api
         * @summary 문항 상세 정보 조회
         * @param {CommonSurveyQuestionInVo} commonSurveyQuestionInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqCommonSurveyQuestionDtl(commonSurveyQuestionInVo: CommonSurveyQuestionInVo, options?: any): AxiosPromise<CommonSurveyQuestionOutVo> {
            return localVarFp.inqCommonSurveyQuestionDtl(commonSurveyQuestionInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 문항 페이지 리스트 api
         * @summary 문항 페이징 리스트
         * @param {CommonSurveyQuestionPageInqInVo} commonSurveyQuestionPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqCommonSurveyQuestionPage(commonSurveyQuestionPageInqInVo: CommonSurveyQuestionPageInqInVo, options?: any): AxiosPromise<PageCommonSurveyQuestionOutVo> {
            return localVarFp.inqCommonSurveyQuestionPage(commonSurveyQuestionPageInqInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 설문 미리보기 리스트 api
         * @summary 설문 미리보기 리스트
         * @param {CommonSurveyQuestionInVo} commonSurveyQuestionInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqCommonSurveyQuestionPreview(commonSurveyQuestionInVo: CommonSurveyQuestionInVo, options?: any): AxiosPromise<Array<CommonSurveyQuestionDetailOutVo>> {
            return localVarFp.inqCommonSurveyQuestionPreview(commonSurveyQuestionInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 공통 문항 등록 api
         * @summary 공통 문항 등록
         * @param {CommonSurveyQuestionInVo} commonSurveyQuestionInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnCommonSurveyQuestion(commonSurveyQuestionInVo: CommonSurveyQuestionInVo, options?: any): AxiosPromise<CommonSurveyQuestionOutVo> {
            return localVarFp.rgsnCommonSurveyQuestion(commonSurveyQuestionInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 설문 제출 API
         * @summary 설문 제출
         * @param {CommonSurveySubmitInVoList} commonSurveySubmitInVoList 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnCommonSurveySubmit(commonSurveySubmitInVoList: CommonSurveySubmitInVoList, options?: any): AxiosPromise<void> {
            return localVarFp.rgsnCommonSurveySubmit(commonSurveySubmitInVoList, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CommonSurveyQuestionControllerApi - object-oriented interface
 * @export
 * @class CommonSurveyQuestionControllerApi
 * @extends {BaseAPI}
 */
export class CommonSurveyQuestionControllerApi extends BaseAPI {
    /**
     * 문항 삭제 api
     * @summary 문항 삭제
     * @param {Array<CommonSurveyQuestionInVo>} commonSurveyQuestionInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonSurveyQuestionControllerApi
     */
    public delCommonSurveyQuestion(commonSurveyQuestionInVo: Array<CommonSurveyQuestionInVo>, options?: RawAxiosRequestConfig) {
        return CommonSurveyQuestionControllerApiFp(this.configuration).delCommonSurveyQuestion(commonSurveyQuestionInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 설문 미리보기 리스트 api
     * @summary 설문 미리보기 리스트
     * @param {CommonSurveyQuestionInVo} commonSurveyQuestionInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonSurveyQuestionControllerApi
     */
    public inqCommonSurveyQuestionAnswer(commonSurveyQuestionInVo: CommonSurveyQuestionInVo, options?: RawAxiosRequestConfig) {
        return CommonSurveyQuestionControllerApiFp(this.configuration).inqCommonSurveyQuestionAnswer(commonSurveyQuestionInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 문항 상세 정보 조회 api
     * @summary 문항 상세 정보 조회
     * @param {CommonSurveyQuestionInVo} commonSurveyQuestionInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonSurveyQuestionControllerApi
     */
    public inqCommonSurveyQuestionDtl(commonSurveyQuestionInVo: CommonSurveyQuestionInVo, options?: RawAxiosRequestConfig) {
        return CommonSurveyQuestionControllerApiFp(this.configuration).inqCommonSurveyQuestionDtl(commonSurveyQuestionInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 문항 페이지 리스트 api
     * @summary 문항 페이징 리스트
     * @param {CommonSurveyQuestionPageInqInVo} commonSurveyQuestionPageInqInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonSurveyQuestionControllerApi
     */
    public inqCommonSurveyQuestionPage(commonSurveyQuestionPageInqInVo: CommonSurveyQuestionPageInqInVo, options?: RawAxiosRequestConfig) {
        return CommonSurveyQuestionControllerApiFp(this.configuration).inqCommonSurveyQuestionPage(commonSurveyQuestionPageInqInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 설문 미리보기 리스트 api
     * @summary 설문 미리보기 리스트
     * @param {CommonSurveyQuestionInVo} commonSurveyQuestionInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonSurveyQuestionControllerApi
     */
    public inqCommonSurveyQuestionPreview(commonSurveyQuestionInVo: CommonSurveyQuestionInVo, options?: RawAxiosRequestConfig) {
        return CommonSurveyQuestionControllerApiFp(this.configuration).inqCommonSurveyQuestionPreview(commonSurveyQuestionInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 공통 문항 등록 api
     * @summary 공통 문항 등록
     * @param {CommonSurveyQuestionInVo} commonSurveyQuestionInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonSurveyQuestionControllerApi
     */
    public rgsnCommonSurveyQuestion(commonSurveyQuestionInVo: CommonSurveyQuestionInVo, options?: RawAxiosRequestConfig) {
        return CommonSurveyQuestionControllerApiFp(this.configuration).rgsnCommonSurveyQuestion(commonSurveyQuestionInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 설문 제출 API
     * @summary 설문 제출
     * @param {CommonSurveySubmitInVoList} commonSurveySubmitInVoList 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonSurveyQuestionControllerApi
     */
    public rgsnCommonSurveySubmit(commonSurveySubmitInVoList: CommonSurveySubmitInVoList, options?: RawAxiosRequestConfig) {
        return CommonSurveyQuestionControllerApiFp(this.configuration).rgsnCommonSurveySubmit(commonSurveySubmitInVoList, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CourseDegreeLessonProgressControllerApi - axios parameter creator
 * @export
 */
export const CourseDegreeLessonProgressControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 영상 진도 등록 api
         * @summary 영상 진도 등록
         * @param {CourseDegreeLessonProgressInVo} courseDegreeLessonProgressInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnCourseDegreeLessonVodProgress: async (courseDegreeLessonProgressInVo: CourseDegreeLessonProgressInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseDegreeLessonProgressInVo' is not null or undefined
            assertParamExists('rgsnCourseDegreeLessonVodProgress', 'courseDegreeLessonProgressInVo', courseDegreeLessonProgressInVo)
            const localVarPath = `/v1/admin/course/degree/lesson/progress/vod/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(courseDegreeLessonProgressInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CourseDegreeLessonProgressControllerApi - functional programming interface
 * @export
 */
export const CourseDegreeLessonProgressControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CourseDegreeLessonProgressControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 영상 진도 등록 api
         * @summary 영상 진도 등록
         * @param {CourseDegreeLessonProgressInVo} courseDegreeLessonProgressInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rgsnCourseDegreeLessonVodProgress(courseDegreeLessonProgressInVo: CourseDegreeLessonProgressInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rgsnCourseDegreeLessonVodProgress(courseDegreeLessonProgressInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseDegreeLessonProgressControllerApi.rgsnCourseDegreeLessonVodProgress']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CourseDegreeLessonProgressControllerApi - factory interface
 * @export
 */
export const CourseDegreeLessonProgressControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CourseDegreeLessonProgressControllerApiFp(configuration)
    return {
        /**
         * 영상 진도 등록 api
         * @summary 영상 진도 등록
         * @param {CourseDegreeLessonProgressInVo} courseDegreeLessonProgressInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnCourseDegreeLessonVodProgress(courseDegreeLessonProgressInVo: CourseDegreeLessonProgressInVo, options?: any): AxiosPromise<void> {
            return localVarFp.rgsnCourseDegreeLessonVodProgress(courseDegreeLessonProgressInVo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CourseDegreeLessonProgressControllerApi - object-oriented interface
 * @export
 * @class CourseDegreeLessonProgressControllerApi
 * @extends {BaseAPI}
 */
export class CourseDegreeLessonProgressControllerApi extends BaseAPI {
    /**
     * 영상 진도 등록 api
     * @summary 영상 진도 등록
     * @param {CourseDegreeLessonProgressInVo} courseDegreeLessonProgressInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseDegreeLessonProgressControllerApi
     */
    public rgsnCourseDegreeLessonVodProgress(courseDegreeLessonProgressInVo: CourseDegreeLessonProgressInVo, options?: RawAxiosRequestConfig) {
        return CourseDegreeLessonProgressControllerApiFp(this.configuration).rgsnCourseDegreeLessonVodProgress(courseDegreeLessonProgressInVo, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CourseDegreeLessonSummaryControllerApi - axios parameter creator
 * @export
 */
export const CourseDegreeLessonSummaryControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 차수의 기타 학습 목차 썸머리 수정 api
         * @summary 차수의 기타 학습 목차 썸머리 수정
         * @param {CourseDegreeLessonSummaryInVo} courseDegreeLessonSummaryInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcCourseDegreeLessonEtcSummary: async (courseDegreeLessonSummaryInVo: CourseDegreeLessonSummaryInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseDegreeLessonSummaryInVo' is not null or undefined
            assertParamExists('mdfcCourseDegreeLessonEtcSummary', 'courseDegreeLessonSummaryInVo', courseDegreeLessonSummaryInVo)
            const localVarPath = `/v1/user/course/degree/lesson/summary/etc/progress`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(courseDegreeLessonSummaryInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 이어보기를 위한 마지막 학습 구간 저장
         * @summary 이어보기를 위한 마지막 학습 구간 저장
         * @param {CourseDegreeLessonSummaryInVo} courseDegreeLessonSummaryInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcCourseDegreeLessonLastInfo: async (courseDegreeLessonSummaryInVo: CourseDegreeLessonSummaryInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseDegreeLessonSummaryInVo' is not null or undefined
            assertParamExists('mdfcCourseDegreeLessonLastInfo', 'courseDegreeLessonSummaryInVo', courseDegreeLessonSummaryInVo)
            const localVarPath = `/v1/user/course/degree/lesson/summary/last/progress`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(courseDegreeLessonSummaryInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 차수의 영상 목차 썸머리 수정 api
         * @summary 차수의 영상 목차 썸머리 수정
         * @param {CourseDegreeLessonSummaryInVo} courseDegreeLessonSummaryInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcCourseDegreeLessonVodSummary: async (courseDegreeLessonSummaryInVo: CourseDegreeLessonSummaryInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseDegreeLessonSummaryInVo' is not null or undefined
            assertParamExists('mdfcCourseDegreeLessonVodSummary', 'courseDegreeLessonSummaryInVo', courseDegreeLessonSummaryInVo)
            const localVarPath = `/v1/user/course/degree/lesson/summary/vod/progress`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(courseDegreeLessonSummaryInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 레슨 학습 이력 초기화
         * @summary 레슨 학습 이력 초기화
         * @param {CourseDegreeLessonSummaryInitInVo} courseDegreeLessonSummaryInitInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcInitProgress: async (courseDegreeLessonSummaryInitInVo: CourseDegreeLessonSummaryInitInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseDegreeLessonSummaryInitInVo' is not null or undefined
            assertParamExists('mdfcInitProgress', 'courseDegreeLessonSummaryInitInVo', courseDegreeLessonSummaryInitInVo)
            const localVarPath = `/v1/user/course/degree/lesson/summary/init/progress`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(courseDegreeLessonSummaryInitInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 차수의 목차 썸머리 등록 api
         * @summary 차수의 목차 썸머리 등록
         * @param {CourseDegreeLessonSummaryInVo} courseDegreeLessonSummaryInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnCourseDegreeLessonSummary: async (courseDegreeLessonSummaryInVo: CourseDegreeLessonSummaryInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseDegreeLessonSummaryInVo' is not null or undefined
            assertParamExists('rgsnCourseDegreeLessonSummary', 'courseDegreeLessonSummaryInVo', courseDegreeLessonSummaryInVo)
            const localVarPath = `/v1/user/course/degree/lesson/summary/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(courseDegreeLessonSummaryInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CourseDegreeLessonSummaryControllerApi - functional programming interface
 * @export
 */
export const CourseDegreeLessonSummaryControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CourseDegreeLessonSummaryControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 차수의 기타 학습 목차 썸머리 수정 api
         * @summary 차수의 기타 학습 목차 썸머리 수정
         * @param {CourseDegreeLessonSummaryInVo} courseDegreeLessonSummaryInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mdfcCourseDegreeLessonEtcSummary(courseDegreeLessonSummaryInVo: CourseDegreeLessonSummaryInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseDegreeLessonSummaryInVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mdfcCourseDegreeLessonEtcSummary(courseDegreeLessonSummaryInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseDegreeLessonSummaryControllerApi.mdfcCourseDegreeLessonEtcSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 이어보기를 위한 마지막 학습 구간 저장
         * @summary 이어보기를 위한 마지막 학습 구간 저장
         * @param {CourseDegreeLessonSummaryInVo} courseDegreeLessonSummaryInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mdfcCourseDegreeLessonLastInfo(courseDegreeLessonSummaryInVo: CourseDegreeLessonSummaryInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mdfcCourseDegreeLessonLastInfo(courseDegreeLessonSummaryInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseDegreeLessonSummaryControllerApi.mdfcCourseDegreeLessonLastInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 차수의 영상 목차 썸머리 수정 api
         * @summary 차수의 영상 목차 썸머리 수정
         * @param {CourseDegreeLessonSummaryInVo} courseDegreeLessonSummaryInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mdfcCourseDegreeLessonVodSummary(courseDegreeLessonSummaryInVo: CourseDegreeLessonSummaryInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseDegreeLessonSummaryInVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mdfcCourseDegreeLessonVodSummary(courseDegreeLessonSummaryInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseDegreeLessonSummaryControllerApi.mdfcCourseDegreeLessonVodSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 레슨 학습 이력 초기화
         * @summary 레슨 학습 이력 초기화
         * @param {CourseDegreeLessonSummaryInitInVo} courseDegreeLessonSummaryInitInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mdfcInitProgress(courseDegreeLessonSummaryInitInVo: CourseDegreeLessonSummaryInitInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mdfcInitProgress(courseDegreeLessonSummaryInitInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseDegreeLessonSummaryControllerApi.mdfcInitProgress']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 차수의 목차 썸머리 등록 api
         * @summary 차수의 목차 썸머리 등록
         * @param {CourseDegreeLessonSummaryInVo} courseDegreeLessonSummaryInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rgsnCourseDegreeLessonSummary(courseDegreeLessonSummaryInVo: CourseDegreeLessonSummaryInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rgsnCourseDegreeLessonSummary(courseDegreeLessonSummaryInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseDegreeLessonSummaryControllerApi.rgsnCourseDegreeLessonSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CourseDegreeLessonSummaryControllerApi - factory interface
 * @export
 */
export const CourseDegreeLessonSummaryControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CourseDegreeLessonSummaryControllerApiFp(configuration)
    return {
        /**
         * 차수의 기타 학습 목차 썸머리 수정 api
         * @summary 차수의 기타 학습 목차 썸머리 수정
         * @param {CourseDegreeLessonSummaryInVo} courseDegreeLessonSummaryInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcCourseDegreeLessonEtcSummary(courseDegreeLessonSummaryInVo: CourseDegreeLessonSummaryInVo, options?: any): AxiosPromise<CourseDegreeLessonSummaryInVo> {
            return localVarFp.mdfcCourseDegreeLessonEtcSummary(courseDegreeLessonSummaryInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 이어보기를 위한 마지막 학습 구간 저장
         * @summary 이어보기를 위한 마지막 학습 구간 저장
         * @param {CourseDegreeLessonSummaryInVo} courseDegreeLessonSummaryInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcCourseDegreeLessonLastInfo(courseDegreeLessonSummaryInVo: CourseDegreeLessonSummaryInVo, options?: any): AxiosPromise<void> {
            return localVarFp.mdfcCourseDegreeLessonLastInfo(courseDegreeLessonSummaryInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 차수의 영상 목차 썸머리 수정 api
         * @summary 차수의 영상 목차 썸머리 수정
         * @param {CourseDegreeLessonSummaryInVo} courseDegreeLessonSummaryInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcCourseDegreeLessonVodSummary(courseDegreeLessonSummaryInVo: CourseDegreeLessonSummaryInVo, options?: any): AxiosPromise<CourseDegreeLessonSummaryInVo> {
            return localVarFp.mdfcCourseDegreeLessonVodSummary(courseDegreeLessonSummaryInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 레슨 학습 이력 초기화
         * @summary 레슨 학습 이력 초기화
         * @param {CourseDegreeLessonSummaryInitInVo} courseDegreeLessonSummaryInitInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcInitProgress(courseDegreeLessonSummaryInitInVo: CourseDegreeLessonSummaryInitInVo, options?: any): AxiosPromise<void> {
            return localVarFp.mdfcInitProgress(courseDegreeLessonSummaryInitInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 차수의 목차 썸머리 등록 api
         * @summary 차수의 목차 썸머리 등록
         * @param {CourseDegreeLessonSummaryInVo} courseDegreeLessonSummaryInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnCourseDegreeLessonSummary(courseDegreeLessonSummaryInVo: CourseDegreeLessonSummaryInVo, options?: any): AxiosPromise<void> {
            return localVarFp.rgsnCourseDegreeLessonSummary(courseDegreeLessonSummaryInVo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CourseDegreeLessonSummaryControllerApi - object-oriented interface
 * @export
 * @class CourseDegreeLessonSummaryControllerApi
 * @extends {BaseAPI}
 */
export class CourseDegreeLessonSummaryControllerApi extends BaseAPI {
    /**
     * 차수의 기타 학습 목차 썸머리 수정 api
     * @summary 차수의 기타 학습 목차 썸머리 수정
     * @param {CourseDegreeLessonSummaryInVo} courseDegreeLessonSummaryInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseDegreeLessonSummaryControllerApi
     */
    public mdfcCourseDegreeLessonEtcSummary(courseDegreeLessonSummaryInVo: CourseDegreeLessonSummaryInVo, options?: RawAxiosRequestConfig) {
        return CourseDegreeLessonSummaryControllerApiFp(this.configuration).mdfcCourseDegreeLessonEtcSummary(courseDegreeLessonSummaryInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 이어보기를 위한 마지막 학습 구간 저장
     * @summary 이어보기를 위한 마지막 학습 구간 저장
     * @param {CourseDegreeLessonSummaryInVo} courseDegreeLessonSummaryInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseDegreeLessonSummaryControllerApi
     */
    public mdfcCourseDegreeLessonLastInfo(courseDegreeLessonSummaryInVo: CourseDegreeLessonSummaryInVo, options?: RawAxiosRequestConfig) {
        return CourseDegreeLessonSummaryControllerApiFp(this.configuration).mdfcCourseDegreeLessonLastInfo(courseDegreeLessonSummaryInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 차수의 영상 목차 썸머리 수정 api
     * @summary 차수의 영상 목차 썸머리 수정
     * @param {CourseDegreeLessonSummaryInVo} courseDegreeLessonSummaryInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseDegreeLessonSummaryControllerApi
     */
    public mdfcCourseDegreeLessonVodSummary(courseDegreeLessonSummaryInVo: CourseDegreeLessonSummaryInVo, options?: RawAxiosRequestConfig) {
        return CourseDegreeLessonSummaryControllerApiFp(this.configuration).mdfcCourseDegreeLessonVodSummary(courseDegreeLessonSummaryInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 레슨 학습 이력 초기화
     * @summary 레슨 학습 이력 초기화
     * @param {CourseDegreeLessonSummaryInitInVo} courseDegreeLessonSummaryInitInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseDegreeLessonSummaryControllerApi
     */
    public mdfcInitProgress(courseDegreeLessonSummaryInitInVo: CourseDegreeLessonSummaryInitInVo, options?: RawAxiosRequestConfig) {
        return CourseDegreeLessonSummaryControllerApiFp(this.configuration).mdfcInitProgress(courseDegreeLessonSummaryInitInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 차수의 목차 썸머리 등록 api
     * @summary 차수의 목차 썸머리 등록
     * @param {CourseDegreeLessonSummaryInVo} courseDegreeLessonSummaryInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseDegreeLessonSummaryControllerApi
     */
    public rgsnCourseDegreeLessonSummary(courseDegreeLessonSummaryInVo: CourseDegreeLessonSummaryInVo, options?: RawAxiosRequestConfig) {
        return CourseDegreeLessonSummaryControllerApiFp(this.configuration).rgsnCourseDegreeLessonSummary(courseDegreeLessonSummaryInVo, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CourseInterestControllerApi - axios parameter creator
 * @export
 */
export const CourseInterestControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 과정 찜한 정보 삭제 api
         * @summary 과정 찜한 정보 삭제
         * @param {CourseInterestInVo} courseInterestInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delCourseInterest: async (courseInterestInVo: CourseInterestInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseInterestInVo' is not null or undefined
            assertParamExists('delCourseInterest', 'courseInterestInVo', courseInterestInVo)
            const localVarPath = `/v1/course/interest/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(courseInterestInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 과정 찜한 정보 페이징 리스트 api
         * @summary 과정 찜한 정보 페이징 리스트
         * @param {CourseInterestPageInqInVo} courseInterestPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqCourseInterestPage: async (courseInterestPageInqInVo: CourseInterestPageInqInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseInterestPageInqInVo' is not null or undefined
            assertParamExists('inqCourseInterestPage', 'courseInterestPageInqInVo', courseInterestPageInqInVo)
            const localVarPath = `/v1/course/interest/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(courseInterestPageInqInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 과정 찜한 정보 등록 api
         * @summary 과정 찜한 정보 등록
         * @param {CourseInterestInVo} courseInterestInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnCourseInterest: async (courseInterestInVo: CourseInterestInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseInterestInVo' is not null or undefined
            assertParamExists('rgsnCourseInterest', 'courseInterestInVo', courseInterestInVo)
            const localVarPath = `/v1/course/interest/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(courseInterestInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CourseInterestControllerApi - functional programming interface
 * @export
 */
export const CourseInterestControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CourseInterestControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 과정 찜한 정보 삭제 api
         * @summary 과정 찜한 정보 삭제
         * @param {CourseInterestInVo} courseInterestInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delCourseInterest(courseInterestInVo: CourseInterestInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delCourseInterest(courseInterestInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseInterestControllerApi.delCourseInterest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 과정 찜한 정보 페이징 리스트 api
         * @summary 과정 찜한 정보 페이징 리스트
         * @param {CourseInterestPageInqInVo} courseInterestPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqCourseInterestPage(courseInterestPageInqInVo: CourseInterestPageInqInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageCourseInterestOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqCourseInterestPage(courseInterestPageInqInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseInterestControllerApi.inqCourseInterestPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 과정 찜한 정보 등록 api
         * @summary 과정 찜한 정보 등록
         * @param {CourseInterestInVo} courseInterestInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rgsnCourseInterest(courseInterestInVo: CourseInterestInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rgsnCourseInterest(courseInterestInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseInterestControllerApi.rgsnCourseInterest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CourseInterestControllerApi - factory interface
 * @export
 */
export const CourseInterestControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CourseInterestControllerApiFp(configuration)
    return {
        /**
         * 과정 찜한 정보 삭제 api
         * @summary 과정 찜한 정보 삭제
         * @param {CourseInterestInVo} courseInterestInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delCourseInterest(courseInterestInVo: CourseInterestInVo, options?: any): AxiosPromise<void> {
            return localVarFp.delCourseInterest(courseInterestInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 과정 찜한 정보 페이징 리스트 api
         * @summary 과정 찜한 정보 페이징 리스트
         * @param {CourseInterestPageInqInVo} courseInterestPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqCourseInterestPage(courseInterestPageInqInVo: CourseInterestPageInqInVo, options?: any): AxiosPromise<PageCourseInterestOutVo> {
            return localVarFp.inqCourseInterestPage(courseInterestPageInqInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 과정 찜한 정보 등록 api
         * @summary 과정 찜한 정보 등록
         * @param {CourseInterestInVo} courseInterestInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnCourseInterest(courseInterestInVo: CourseInterestInVo, options?: any): AxiosPromise<void> {
            return localVarFp.rgsnCourseInterest(courseInterestInVo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CourseInterestControllerApi - object-oriented interface
 * @export
 * @class CourseInterestControllerApi
 * @extends {BaseAPI}
 */
export class CourseInterestControllerApi extends BaseAPI {
    /**
     * 과정 찜한 정보 삭제 api
     * @summary 과정 찜한 정보 삭제
     * @param {CourseInterestInVo} courseInterestInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseInterestControllerApi
     */
    public delCourseInterest(courseInterestInVo: CourseInterestInVo, options?: RawAxiosRequestConfig) {
        return CourseInterestControllerApiFp(this.configuration).delCourseInterest(courseInterestInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 과정 찜한 정보 페이징 리스트 api
     * @summary 과정 찜한 정보 페이징 리스트
     * @param {CourseInterestPageInqInVo} courseInterestPageInqInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseInterestControllerApi
     */
    public inqCourseInterestPage(courseInterestPageInqInVo: CourseInterestPageInqInVo, options?: RawAxiosRequestConfig) {
        return CourseInterestControllerApiFp(this.configuration).inqCourseInterestPage(courseInterestPageInqInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 과정 찜한 정보 등록 api
     * @summary 과정 찜한 정보 등록
     * @param {CourseInterestInVo} courseInterestInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseInterestControllerApi
     */
    public rgsnCourseInterest(courseInterestInVo: CourseInterestInVo, options?: RawAxiosRequestConfig) {
        return CourseInterestControllerApiFp(this.configuration).rgsnCourseInterest(courseInterestInVo, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CourseLibraryControllerApi - axios parameter creator
 * @export
 */
export const CourseLibraryControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 과정 자료 멀티 삭제 api
         * @summary 과정 자료 멀티 삭제
         * @param {Array<CourseLibraryDeleteInVo>} courseLibraryDeleteInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delCourseLibraryMulti: async (courseLibraryDeleteInVo: Array<CourseLibraryDeleteInVo>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseLibraryDeleteInVo' is not null or undefined
            assertParamExists('delCourseLibraryMulti', 'courseLibraryDeleteInVo', courseLibraryDeleteInVo)
            const localVarPath = `/v1/course/library/delete/multi`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(courseLibraryDeleteInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 과정자료 상세 정보 조회 api
         * @summary 과정자료 상세 정보 조회
         * @param {CourseLibraryInVo} courseLibraryInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqCourseLibraryDtl: async (courseLibraryInVo: CourseLibraryInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseLibraryInVo' is not null or undefined
            assertParamExists('inqCourseLibraryDtl', 'courseLibraryInVo', courseLibraryInVo)
            const localVarPath = `/v1/course/library/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(courseLibraryInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 과정 자료 페이지 리스트 api
         * @summary 과정 자료 페이징 리스트
         * @param {CourseLibraryPageInqInVo} courseLibraryPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqCourseLibraryPage: async (courseLibraryPageInqInVo: CourseLibraryPageInqInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseLibraryPageInqInVo' is not null or undefined
            assertParamExists('inqCourseLibraryPage', 'courseLibraryPageInqInVo', courseLibraryPageInqInVo)
            const localVarPath = `/v1/course/library/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(courseLibraryPageInqInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 과정 자료 수정 api
         * @summary 과정 자료 수정
         * @param {CourseLibraryInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcCourseLibrary: async (inVo: CourseLibraryInVo, files?: Array<File>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inVo' is not null or undefined
            assertParamExists('mdfcCourseLibrary', 'inVo', inVo)
            const localVarPath = `/v1/course/library/modify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (files) {
                files.forEach((element) => {
                  localVarFormParams.append('files', element as any);
                })
            }

    
            if (inVo !== undefined) { 
                localVarFormParams.append('inVo', new Blob([JSON.stringify(inVo)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 과정 자료 등록 api
         * @summary 과정 자료 등록
         * @param {CourseLibraryAddInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnCourseLibrary: async (inVo: CourseLibraryAddInVo, files?: Array<File>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inVo' is not null or undefined
            assertParamExists('rgsnCourseLibrary', 'inVo', inVo)
            const localVarPath = `/v1/course/library/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (files) {
                files.forEach((element) => {
                  localVarFormParams.append('files', element as any);
                })
            }

    
            if (inVo !== undefined) { 
                localVarFormParams.append('inVo', new Blob([JSON.stringify(inVo)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CourseLibraryControllerApi - functional programming interface
 * @export
 */
export const CourseLibraryControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CourseLibraryControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 과정 자료 멀티 삭제 api
         * @summary 과정 자료 멀티 삭제
         * @param {Array<CourseLibraryDeleteInVo>} courseLibraryDeleteInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delCourseLibraryMulti(courseLibraryDeleteInVo: Array<CourseLibraryDeleteInVo>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delCourseLibraryMulti(courseLibraryDeleteInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseLibraryControllerApi.delCourseLibraryMulti']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 과정자료 상세 정보 조회 api
         * @summary 과정자료 상세 정보 조회
         * @param {CourseLibraryInVo} courseLibraryInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqCourseLibraryDtl(courseLibraryInVo: CourseLibraryInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseLibraryOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqCourseLibraryDtl(courseLibraryInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseLibraryControllerApi.inqCourseLibraryDtl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 과정 자료 페이지 리스트 api
         * @summary 과정 자료 페이징 리스트
         * @param {CourseLibraryPageInqInVo} courseLibraryPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqCourseLibraryPage(courseLibraryPageInqInVo: CourseLibraryPageInqInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageCourseLibraryOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqCourseLibraryPage(courseLibraryPageInqInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseLibraryControllerApi.inqCourseLibraryPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 과정 자료 수정 api
         * @summary 과정 자료 수정
         * @param {CourseLibraryInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mdfcCourseLibrary(inVo: CourseLibraryInVo, files?: Array<File>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mdfcCourseLibrary(inVo, files, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseLibraryControllerApi.mdfcCourseLibrary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 과정 자료 등록 api
         * @summary 과정 자료 등록
         * @param {CourseLibraryAddInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rgsnCourseLibrary(inVo: CourseLibraryAddInVo, files?: Array<File>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rgsnCourseLibrary(inVo, files, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseLibraryControllerApi.rgsnCourseLibrary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CourseLibraryControllerApi - factory interface
 * @export
 */
export const CourseLibraryControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CourseLibraryControllerApiFp(configuration)
    return {
        /**
         * 과정 자료 멀티 삭제 api
         * @summary 과정 자료 멀티 삭제
         * @param {Array<CourseLibraryDeleteInVo>} courseLibraryDeleteInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delCourseLibraryMulti(courseLibraryDeleteInVo: Array<CourseLibraryDeleteInVo>, options?: any): AxiosPromise<void> {
            return localVarFp.delCourseLibraryMulti(courseLibraryDeleteInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 과정자료 상세 정보 조회 api
         * @summary 과정자료 상세 정보 조회
         * @param {CourseLibraryInVo} courseLibraryInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqCourseLibraryDtl(courseLibraryInVo: CourseLibraryInVo, options?: any): AxiosPromise<CourseLibraryOutVo> {
            return localVarFp.inqCourseLibraryDtl(courseLibraryInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 과정 자료 페이지 리스트 api
         * @summary 과정 자료 페이징 리스트
         * @param {CourseLibraryPageInqInVo} courseLibraryPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqCourseLibraryPage(courseLibraryPageInqInVo: CourseLibraryPageInqInVo, options?: any): AxiosPromise<PageCourseLibraryOutVo> {
            return localVarFp.inqCourseLibraryPage(courseLibraryPageInqInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 과정 자료 수정 api
         * @summary 과정 자료 수정
         * @param {CourseLibraryInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcCourseLibrary(inVo: CourseLibraryInVo, files?: Array<File>, options?: any): AxiosPromise<void> {
            return localVarFp.mdfcCourseLibrary(inVo, files, options).then((request) => request(axios, basePath));
        },
        /**
         * 과정 자료 등록 api
         * @summary 과정 자료 등록
         * @param {CourseLibraryAddInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnCourseLibrary(inVo: CourseLibraryAddInVo, files?: Array<File>, options?: any): AxiosPromise<void> {
            return localVarFp.rgsnCourseLibrary(inVo, files, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CourseLibraryControllerApi - object-oriented interface
 * @export
 * @class CourseLibraryControllerApi
 * @extends {BaseAPI}
 */
export class CourseLibraryControllerApi extends BaseAPI {
    /**
     * 과정 자료 멀티 삭제 api
     * @summary 과정 자료 멀티 삭제
     * @param {Array<CourseLibraryDeleteInVo>} courseLibraryDeleteInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseLibraryControllerApi
     */
    public delCourseLibraryMulti(courseLibraryDeleteInVo: Array<CourseLibraryDeleteInVo>, options?: RawAxiosRequestConfig) {
        return CourseLibraryControllerApiFp(this.configuration).delCourseLibraryMulti(courseLibraryDeleteInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 과정자료 상세 정보 조회 api
     * @summary 과정자료 상세 정보 조회
     * @param {CourseLibraryInVo} courseLibraryInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseLibraryControllerApi
     */
    public inqCourseLibraryDtl(courseLibraryInVo: CourseLibraryInVo, options?: RawAxiosRequestConfig) {
        return CourseLibraryControllerApiFp(this.configuration).inqCourseLibraryDtl(courseLibraryInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 과정 자료 페이지 리스트 api
     * @summary 과정 자료 페이징 리스트
     * @param {CourseLibraryPageInqInVo} courseLibraryPageInqInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseLibraryControllerApi
     */
    public inqCourseLibraryPage(courseLibraryPageInqInVo: CourseLibraryPageInqInVo, options?: RawAxiosRequestConfig) {
        return CourseLibraryControllerApiFp(this.configuration).inqCourseLibraryPage(courseLibraryPageInqInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 과정 자료 수정 api
     * @summary 과정 자료 수정
     * @param {CourseLibraryInVo} inVo 
     * @param {Array<File>} [files] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseLibraryControllerApi
     */
    public mdfcCourseLibrary(inVo: CourseLibraryInVo, files?: Array<File>, options?: RawAxiosRequestConfig) {
        return CourseLibraryControllerApiFp(this.configuration).mdfcCourseLibrary(inVo, files, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 과정 자료 등록 api
     * @summary 과정 자료 등록
     * @param {CourseLibraryAddInVo} inVo 
     * @param {Array<File>} [files] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseLibraryControllerApi
     */
    public rgsnCourseLibrary(inVo: CourseLibraryAddInVo, files?: Array<File>, options?: RawAxiosRequestConfig) {
        return CourseLibraryControllerApiFp(this.configuration).rgsnCourseLibrary(inVo, files, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CourseNoticeControllerApi - axios parameter creator
 * @export
 */
export const CourseNoticeControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * [과정 공지 멀티 삭제 api
         * @summary 과정 공지 멀티 삭제
         * @param {Array<CourseNoticeDeleteInVo>} courseNoticeDeleteInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delCourseNoticeMulti: async (courseNoticeDeleteInVo: Array<CourseNoticeDeleteInVo>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseNoticeDeleteInVo' is not null or undefined
            assertParamExists('delCourseNoticeMulti', 'courseNoticeDeleteInVo', courseNoticeDeleteInVo)
            const localVarPath = `/v1/course/notice/delete/multi`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(courseNoticeDeleteInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 과정 공지 페이지 리스트 api
         * @summary 과정 공지 페이징 리스트
         * @param {CourseNoticePageInqInVo} courseNoticePageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqCourseNoticeCopyPage: async (courseNoticePageInqInVo: CourseNoticePageInqInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseNoticePageInqInVo' is not null or undefined
            assertParamExists('inqCourseNoticeCopyPage', 'courseNoticePageInqInVo', courseNoticePageInqInVo)
            const localVarPath = `/v1/course/notice/page/copy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(courseNoticePageInqInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 과정공지 상세 정보 조회 api
         * @summary 과정공지 상세 정보 조회
         * @param {CourseNoticeInVo} courseNoticeInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqCourseNoticeDtl: async (courseNoticeInVo: CourseNoticeInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseNoticeInVo' is not null or undefined
            assertParamExists('inqCourseNoticeDtl', 'courseNoticeInVo', courseNoticeInVo)
            const localVarPath = `/v1/course/notice/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(courseNoticeInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 과정 공지 페이지 리스트 api
         * @summary 과정 공지 페이징 리스트
         * @param {CourseNoticePageInqInVo} courseNoticePageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqCourseNoticePage: async (courseNoticePageInqInVo: CourseNoticePageInqInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseNoticePageInqInVo' is not null or undefined
            assertParamExists('inqCourseNoticePage', 'courseNoticePageInqInVo', courseNoticePageInqInVo)
            const localVarPath = `/v1/course/notice/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(courseNoticePageInqInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 과정 공지 수정 api
         * @summary 과정 공지 수정
         * @param {CourseNoticeInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcCourseNotice: async (inVo: CourseNoticeInVo, files?: Array<File>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inVo' is not null or undefined
            assertParamExists('mdfcCourseNotice', 'inVo', inVo)
            const localVarPath = `/v1/course/notice/modify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (files) {
                files.forEach((element) => {
                  localVarFormParams.append('files', element as any);
                })
            }

    
            if (inVo !== undefined) { 
                localVarFormParams.append('inVo', new Blob([JSON.stringify(inVo)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 과정 공지 등록 api
         * @summary 과정 공지 등록
         * @param {CourseNoticeAddInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnCourseNotice: async (inVo: CourseNoticeAddInVo, files?: Array<File>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inVo' is not null or undefined
            assertParamExists('rgsnCourseNotice', 'inVo', inVo)
            const localVarPath = `/v1/course/notice/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (files) {
                files.forEach((element) => {
                  localVarFormParams.append('files', element as any);
                })
            }

    
            if (inVo !== undefined) { 
                localVarFormParams.append('inVo', new Blob([JSON.stringify(inVo)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CourseNoticeControllerApi - functional programming interface
 * @export
 */
export const CourseNoticeControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CourseNoticeControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * [과정 공지 멀티 삭제 api
         * @summary 과정 공지 멀티 삭제
         * @param {Array<CourseNoticeDeleteInVo>} courseNoticeDeleteInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delCourseNoticeMulti(courseNoticeDeleteInVo: Array<CourseNoticeDeleteInVo>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delCourseNoticeMulti(courseNoticeDeleteInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseNoticeControllerApi.delCourseNoticeMulti']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 과정 공지 페이지 리스트 api
         * @summary 과정 공지 페이징 리스트
         * @param {CourseNoticePageInqInVo} courseNoticePageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqCourseNoticeCopyPage(courseNoticePageInqInVo: CourseNoticePageInqInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageCourseNoticeOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqCourseNoticeCopyPage(courseNoticePageInqInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseNoticeControllerApi.inqCourseNoticeCopyPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 과정공지 상세 정보 조회 api
         * @summary 과정공지 상세 정보 조회
         * @param {CourseNoticeInVo} courseNoticeInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqCourseNoticeDtl(courseNoticeInVo: CourseNoticeInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseNoticeOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqCourseNoticeDtl(courseNoticeInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseNoticeControllerApi.inqCourseNoticeDtl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 과정 공지 페이지 리스트 api
         * @summary 과정 공지 페이징 리스트
         * @param {CourseNoticePageInqInVo} courseNoticePageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqCourseNoticePage(courseNoticePageInqInVo: CourseNoticePageInqInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageCourseNoticeOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqCourseNoticePage(courseNoticePageInqInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseNoticeControllerApi.inqCourseNoticePage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 과정 공지 수정 api
         * @summary 과정 공지 수정
         * @param {CourseNoticeInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mdfcCourseNotice(inVo: CourseNoticeInVo, files?: Array<File>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mdfcCourseNotice(inVo, files, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseNoticeControllerApi.mdfcCourseNotice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 과정 공지 등록 api
         * @summary 과정 공지 등록
         * @param {CourseNoticeAddInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rgsnCourseNotice(inVo: CourseNoticeAddInVo, files?: Array<File>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rgsnCourseNotice(inVo, files, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseNoticeControllerApi.rgsnCourseNotice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CourseNoticeControllerApi - factory interface
 * @export
 */
export const CourseNoticeControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CourseNoticeControllerApiFp(configuration)
    return {
        /**
         * [과정 공지 멀티 삭제 api
         * @summary 과정 공지 멀티 삭제
         * @param {Array<CourseNoticeDeleteInVo>} courseNoticeDeleteInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delCourseNoticeMulti(courseNoticeDeleteInVo: Array<CourseNoticeDeleteInVo>, options?: any): AxiosPromise<void> {
            return localVarFp.delCourseNoticeMulti(courseNoticeDeleteInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 과정 공지 페이지 리스트 api
         * @summary 과정 공지 페이징 리스트
         * @param {CourseNoticePageInqInVo} courseNoticePageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqCourseNoticeCopyPage(courseNoticePageInqInVo: CourseNoticePageInqInVo, options?: any): AxiosPromise<PageCourseNoticeOutVo> {
            return localVarFp.inqCourseNoticeCopyPage(courseNoticePageInqInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 과정공지 상세 정보 조회 api
         * @summary 과정공지 상세 정보 조회
         * @param {CourseNoticeInVo} courseNoticeInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqCourseNoticeDtl(courseNoticeInVo: CourseNoticeInVo, options?: any): AxiosPromise<CourseNoticeOutVo> {
            return localVarFp.inqCourseNoticeDtl(courseNoticeInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 과정 공지 페이지 리스트 api
         * @summary 과정 공지 페이징 리스트
         * @param {CourseNoticePageInqInVo} courseNoticePageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqCourseNoticePage(courseNoticePageInqInVo: CourseNoticePageInqInVo, options?: any): AxiosPromise<PageCourseNoticeOutVo> {
            return localVarFp.inqCourseNoticePage(courseNoticePageInqInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 과정 공지 수정 api
         * @summary 과정 공지 수정
         * @param {CourseNoticeInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcCourseNotice(inVo: CourseNoticeInVo, files?: Array<File>, options?: any): AxiosPromise<void> {
            return localVarFp.mdfcCourseNotice(inVo, files, options).then((request) => request(axios, basePath));
        },
        /**
         * 과정 공지 등록 api
         * @summary 과정 공지 등록
         * @param {CourseNoticeAddInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnCourseNotice(inVo: CourseNoticeAddInVo, files?: Array<File>, options?: any): AxiosPromise<void> {
            return localVarFp.rgsnCourseNotice(inVo, files, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CourseNoticeControllerApi - object-oriented interface
 * @export
 * @class CourseNoticeControllerApi
 * @extends {BaseAPI}
 */
export class CourseNoticeControllerApi extends BaseAPI {
    /**
     * [과정 공지 멀티 삭제 api
     * @summary 과정 공지 멀티 삭제
     * @param {Array<CourseNoticeDeleteInVo>} courseNoticeDeleteInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseNoticeControllerApi
     */
    public delCourseNoticeMulti(courseNoticeDeleteInVo: Array<CourseNoticeDeleteInVo>, options?: RawAxiosRequestConfig) {
        return CourseNoticeControllerApiFp(this.configuration).delCourseNoticeMulti(courseNoticeDeleteInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 과정 공지 페이지 리스트 api
     * @summary 과정 공지 페이징 리스트
     * @param {CourseNoticePageInqInVo} courseNoticePageInqInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseNoticeControllerApi
     */
    public inqCourseNoticeCopyPage(courseNoticePageInqInVo: CourseNoticePageInqInVo, options?: RawAxiosRequestConfig) {
        return CourseNoticeControllerApiFp(this.configuration).inqCourseNoticeCopyPage(courseNoticePageInqInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 과정공지 상세 정보 조회 api
     * @summary 과정공지 상세 정보 조회
     * @param {CourseNoticeInVo} courseNoticeInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseNoticeControllerApi
     */
    public inqCourseNoticeDtl(courseNoticeInVo: CourseNoticeInVo, options?: RawAxiosRequestConfig) {
        return CourseNoticeControllerApiFp(this.configuration).inqCourseNoticeDtl(courseNoticeInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 과정 공지 페이지 리스트 api
     * @summary 과정 공지 페이징 리스트
     * @param {CourseNoticePageInqInVo} courseNoticePageInqInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseNoticeControllerApi
     */
    public inqCourseNoticePage(courseNoticePageInqInVo: CourseNoticePageInqInVo, options?: RawAxiosRequestConfig) {
        return CourseNoticeControllerApiFp(this.configuration).inqCourseNoticePage(courseNoticePageInqInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 과정 공지 수정 api
     * @summary 과정 공지 수정
     * @param {CourseNoticeInVo} inVo 
     * @param {Array<File>} [files] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseNoticeControllerApi
     */
    public mdfcCourseNotice(inVo: CourseNoticeInVo, files?: Array<File>, options?: RawAxiosRequestConfig) {
        return CourseNoticeControllerApiFp(this.configuration).mdfcCourseNotice(inVo, files, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 과정 공지 등록 api
     * @summary 과정 공지 등록
     * @param {CourseNoticeAddInVo} inVo 
     * @param {Array<File>} [files] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseNoticeControllerApi
     */
    public rgsnCourseNotice(inVo: CourseNoticeAddInVo, files?: Array<File>, options?: RawAxiosRequestConfig) {
        return CourseNoticeControllerApiFp(this.configuration).rgsnCourseNotice(inVo, files, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CourseQuestionAnswerControllerApi - axios parameter creator
 * @export
 */
export const CourseQuestionAnswerControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * [답변 삭제 api
         * @summary 답변 삭제
         * @param {CourseQuestionAnswerDeleteInVo} courseQuestionAnswerDeleteInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delCourseQuestionAnswer: async (courseQuestionAnswerDeleteInVo: CourseQuestionAnswerDeleteInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseQuestionAnswerDeleteInVo' is not null or undefined
            assertParamExists('delCourseQuestionAnswer', 'courseQuestionAnswerDeleteInVo', courseQuestionAnswerDeleteInVo)
            const localVarPath = `/v1/course/question/answer/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(courseQuestionAnswerDeleteInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 답변 상세 정보 조회 api
         * @summary 답변 상세 정보 조회
         * @param {CourseQuestionAnswerInVo} courseQuestionAnswerInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqCourseQuestionAnswerDtl: async (courseQuestionAnswerInVo: CourseQuestionAnswerInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseQuestionAnswerInVo' is not null or undefined
            assertParamExists('inqCourseQuestionAnswerDtl', 'courseQuestionAnswerInVo', courseQuestionAnswerInVo)
            const localVarPath = `/v1/course/question/answer/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(courseQuestionAnswerInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [답변 정보 수정 api
         * @summary 답변 정보 수정
         * @param {CourseQuestionAnswerInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcCourseQuestionAnswer: async (inVo: CourseQuestionAnswerInVo, files?: Array<File>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inVo' is not null or undefined
            assertParamExists('mdfcCourseQuestionAnswer', 'inVo', inVo)
            const localVarPath = `/v1/course/question/answer/modify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (files) {
                files.forEach((element) => {
                  localVarFormParams.append('files', element as any);
                })
            }

    
            if (inVo !== undefined) { 
                localVarFormParams.append('inVo', new Blob([JSON.stringify(inVo)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 답변 등록 api
         * @summary 답변 등록
         * @param {CourseQuestionAnswerInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnCourseQuestionAnswer: async (inVo: CourseQuestionAnswerInVo, files?: Array<File>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inVo' is not null or undefined
            assertParamExists('rgsnCourseQuestionAnswer', 'inVo', inVo)
            const localVarPath = `/v1/course/question/answer/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (files) {
                files.forEach((element) => {
                  localVarFormParams.append('files', element as any);
                })
            }

    
            if (inVo !== undefined) { 
                localVarFormParams.append('inVo', new Blob([JSON.stringify(inVo)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CourseQuestionAnswerControllerApi - functional programming interface
 * @export
 */
export const CourseQuestionAnswerControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CourseQuestionAnswerControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * [답변 삭제 api
         * @summary 답변 삭제
         * @param {CourseQuestionAnswerDeleteInVo} courseQuestionAnswerDeleteInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delCourseQuestionAnswer(courseQuestionAnswerDeleteInVo: CourseQuestionAnswerDeleteInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delCourseQuestionAnswer(courseQuestionAnswerDeleteInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseQuestionAnswerControllerApi.delCourseQuestionAnswer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 답변 상세 정보 조회 api
         * @summary 답변 상세 정보 조회
         * @param {CourseQuestionAnswerInVo} courseQuestionAnswerInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqCourseQuestionAnswerDtl(courseQuestionAnswerInVo: CourseQuestionAnswerInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseQuestionAnswerOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqCourseQuestionAnswerDtl(courseQuestionAnswerInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseQuestionAnswerControllerApi.inqCourseQuestionAnswerDtl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * [답변 정보 수정 api
         * @summary 답변 정보 수정
         * @param {CourseQuestionAnswerInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mdfcCourseQuestionAnswer(inVo: CourseQuestionAnswerInVo, files?: Array<File>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mdfcCourseQuestionAnswer(inVo, files, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseQuestionAnswerControllerApi.mdfcCourseQuestionAnswer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 답변 등록 api
         * @summary 답변 등록
         * @param {CourseQuestionAnswerInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rgsnCourseQuestionAnswer(inVo: CourseQuestionAnswerInVo, files?: Array<File>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rgsnCourseQuestionAnswer(inVo, files, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseQuestionAnswerControllerApi.rgsnCourseQuestionAnswer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CourseQuestionAnswerControllerApi - factory interface
 * @export
 */
export const CourseQuestionAnswerControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CourseQuestionAnswerControllerApiFp(configuration)
    return {
        /**
         * [답변 삭제 api
         * @summary 답변 삭제
         * @param {CourseQuestionAnswerDeleteInVo} courseQuestionAnswerDeleteInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delCourseQuestionAnswer(courseQuestionAnswerDeleteInVo: CourseQuestionAnswerDeleteInVo, options?: any): AxiosPromise<void> {
            return localVarFp.delCourseQuestionAnswer(courseQuestionAnswerDeleteInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 답변 상세 정보 조회 api
         * @summary 답변 상세 정보 조회
         * @param {CourseQuestionAnswerInVo} courseQuestionAnswerInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqCourseQuestionAnswerDtl(courseQuestionAnswerInVo: CourseQuestionAnswerInVo, options?: any): AxiosPromise<CourseQuestionAnswerOutVo> {
            return localVarFp.inqCourseQuestionAnswerDtl(courseQuestionAnswerInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * [답변 정보 수정 api
         * @summary 답변 정보 수정
         * @param {CourseQuestionAnswerInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcCourseQuestionAnswer(inVo: CourseQuestionAnswerInVo, files?: Array<File>, options?: any): AxiosPromise<void> {
            return localVarFp.mdfcCourseQuestionAnswer(inVo, files, options).then((request) => request(axios, basePath));
        },
        /**
         * 답변 등록 api
         * @summary 답변 등록
         * @param {CourseQuestionAnswerInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnCourseQuestionAnswer(inVo: CourseQuestionAnswerInVo, files?: Array<File>, options?: any): AxiosPromise<void> {
            return localVarFp.rgsnCourseQuestionAnswer(inVo, files, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CourseQuestionAnswerControllerApi - object-oriented interface
 * @export
 * @class CourseQuestionAnswerControllerApi
 * @extends {BaseAPI}
 */
export class CourseQuestionAnswerControllerApi extends BaseAPI {
    /**
     * [답변 삭제 api
     * @summary 답변 삭제
     * @param {CourseQuestionAnswerDeleteInVo} courseQuestionAnswerDeleteInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseQuestionAnswerControllerApi
     */
    public delCourseQuestionAnswer(courseQuestionAnswerDeleteInVo: CourseQuestionAnswerDeleteInVo, options?: RawAxiosRequestConfig) {
        return CourseQuestionAnswerControllerApiFp(this.configuration).delCourseQuestionAnswer(courseQuestionAnswerDeleteInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 답변 상세 정보 조회 api
     * @summary 답변 상세 정보 조회
     * @param {CourseQuestionAnswerInVo} courseQuestionAnswerInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseQuestionAnswerControllerApi
     */
    public inqCourseQuestionAnswerDtl(courseQuestionAnswerInVo: CourseQuestionAnswerInVo, options?: RawAxiosRequestConfig) {
        return CourseQuestionAnswerControllerApiFp(this.configuration).inqCourseQuestionAnswerDtl(courseQuestionAnswerInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * [답변 정보 수정 api
     * @summary 답변 정보 수정
     * @param {CourseQuestionAnswerInVo} inVo 
     * @param {Array<File>} [files] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseQuestionAnswerControllerApi
     */
    public mdfcCourseQuestionAnswer(inVo: CourseQuestionAnswerInVo, files?: Array<File>, options?: RawAxiosRequestConfig) {
        return CourseQuestionAnswerControllerApiFp(this.configuration).mdfcCourseQuestionAnswer(inVo, files, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 답변 등록 api
     * @summary 답변 등록
     * @param {CourseQuestionAnswerInVo} inVo 
     * @param {Array<File>} [files] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseQuestionAnswerControllerApi
     */
    public rgsnCourseQuestionAnswer(inVo: CourseQuestionAnswerInVo, files?: Array<File>, options?: RawAxiosRequestConfig) {
        return CourseQuestionAnswerControllerApiFp(this.configuration).rgsnCourseQuestionAnswer(inVo, files, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CourseQuestionControllerApi - axios parameter creator
 * @export
 */
export const CourseQuestionControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * [질문 삭제 api
         * @summary 질문 삭제
         * @param {CourseQuestionDeleteInVo} courseQuestionDeleteInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delCourseQuestion: async (courseQuestionDeleteInVo: CourseQuestionDeleteInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseQuestionDeleteInVo' is not null or undefined
            assertParamExists('delCourseQuestion', 'courseQuestionDeleteInVo', courseQuestionDeleteInVo)
            const localVarPath = `/v1/course/question/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(courseQuestionDeleteInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [질문/답변 멀티 삭제 api
         * @summary 질문/답변 멀티 삭제
         * @param {Array<CourseQuestionDeleteInVo>} courseQuestionDeleteInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delCourseQuestionMulti: async (courseQuestionDeleteInVo: Array<CourseQuestionDeleteInVo>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseQuestionDeleteInVo' is not null or undefined
            assertParamExists('delCourseQuestionMulti', 'courseQuestionDeleteInVo', courseQuestionDeleteInVo)
            const localVarPath = `/v1/course/question/delete/multi`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(courseQuestionDeleteInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 질문 상세 정보 조회 api
         * @summary 질문 상세 정보 조회
         * @param {CourseQuestionInVo} courseQuestionInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqCourseQuestionDtl: async (courseQuestionInVo: CourseQuestionInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseQuestionInVo' is not null or undefined
            assertParamExists('inqCourseQuestionDtl', 'courseQuestionInVo', courseQuestionInVo)
            const localVarPath = `/v1/course/question/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(courseQuestionInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 질문 페이지 리스트 api
         * @summary 질문 페이징 리스트
         * @param {CourseQuestionPageInqInVo} courseQuestionPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqCourseQuestionPage: async (courseQuestionPageInqInVo: CourseQuestionPageInqInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseQuestionPageInqInVo' is not null or undefined
            assertParamExists('inqCourseQuestionPage', 'courseQuestionPageInqInVo', courseQuestionPageInqInVo)
            const localVarPath = `/v1/course/question/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(courseQuestionPageInqInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 문의 수정 api
         * @summary 문의 수정
         * @param {CourseQuestionInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcCourseQuestion: async (inVo: CourseQuestionInVo, files?: Array<File>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inVo' is not null or undefined
            assertParamExists('mdfcCourseQuestion', 'inVo', inVo)
            const localVarPath = `/v1/course/question/modify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (files) {
                files.forEach((element) => {
                  localVarFormParams.append('files', element as any);
                })
            }

    
            if (inVo !== undefined) { 
                localVarFormParams.append('inVo', new Blob([JSON.stringify(inVo)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 문의 등록 api
         * @summary 문의 등록
         * @param {CourseQuestionInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnCourseQuestion: async (inVo: CourseQuestionInVo, files?: Array<File>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inVo' is not null or undefined
            assertParamExists('rgsnCourseQuestion', 'inVo', inVo)
            const localVarPath = `/v1/course/question/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (files) {
                files.forEach((element) => {
                  localVarFormParams.append('files', element as any);
                })
            }

    
            if (inVo !== undefined) { 
                localVarFormParams.append('inVo', new Blob([JSON.stringify(inVo)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CourseQuestionControllerApi - functional programming interface
 * @export
 */
export const CourseQuestionControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CourseQuestionControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * [질문 삭제 api
         * @summary 질문 삭제
         * @param {CourseQuestionDeleteInVo} courseQuestionDeleteInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delCourseQuestion(courseQuestionDeleteInVo: CourseQuestionDeleteInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delCourseQuestion(courseQuestionDeleteInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseQuestionControllerApi.delCourseQuestion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * [질문/답변 멀티 삭제 api
         * @summary 질문/답변 멀티 삭제
         * @param {Array<CourseQuestionDeleteInVo>} courseQuestionDeleteInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delCourseQuestionMulti(courseQuestionDeleteInVo: Array<CourseQuestionDeleteInVo>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delCourseQuestionMulti(courseQuestionDeleteInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseQuestionControllerApi.delCourseQuestionMulti']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 질문 상세 정보 조회 api
         * @summary 질문 상세 정보 조회
         * @param {CourseQuestionInVo} courseQuestionInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqCourseQuestionDtl(courseQuestionInVo: CourseQuestionInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseQuestionOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqCourseQuestionDtl(courseQuestionInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseQuestionControllerApi.inqCourseQuestionDtl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 질문 페이지 리스트 api
         * @summary 질문 페이징 리스트
         * @param {CourseQuestionPageInqInVo} courseQuestionPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqCourseQuestionPage(courseQuestionPageInqInVo: CourseQuestionPageInqInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageCourseQuestionOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqCourseQuestionPage(courseQuestionPageInqInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseQuestionControllerApi.inqCourseQuestionPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 문의 수정 api
         * @summary 문의 수정
         * @param {CourseQuestionInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mdfcCourseQuestion(inVo: CourseQuestionInVo, files?: Array<File>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mdfcCourseQuestion(inVo, files, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseQuestionControllerApi.mdfcCourseQuestion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 문의 등록 api
         * @summary 문의 등록
         * @param {CourseQuestionInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rgsnCourseQuestion(inVo: CourseQuestionInVo, files?: Array<File>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rgsnCourseQuestion(inVo, files, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseQuestionControllerApi.rgsnCourseQuestion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CourseQuestionControllerApi - factory interface
 * @export
 */
export const CourseQuestionControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CourseQuestionControllerApiFp(configuration)
    return {
        /**
         * [질문 삭제 api
         * @summary 질문 삭제
         * @param {CourseQuestionDeleteInVo} courseQuestionDeleteInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delCourseQuestion(courseQuestionDeleteInVo: CourseQuestionDeleteInVo, options?: any): AxiosPromise<void> {
            return localVarFp.delCourseQuestion(courseQuestionDeleteInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * [질문/답변 멀티 삭제 api
         * @summary 질문/답변 멀티 삭제
         * @param {Array<CourseQuestionDeleteInVo>} courseQuestionDeleteInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delCourseQuestionMulti(courseQuestionDeleteInVo: Array<CourseQuestionDeleteInVo>, options?: any): AxiosPromise<void> {
            return localVarFp.delCourseQuestionMulti(courseQuestionDeleteInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 질문 상세 정보 조회 api
         * @summary 질문 상세 정보 조회
         * @param {CourseQuestionInVo} courseQuestionInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqCourseQuestionDtl(courseQuestionInVo: CourseQuestionInVo, options?: any): AxiosPromise<CourseQuestionOutVo> {
            return localVarFp.inqCourseQuestionDtl(courseQuestionInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 질문 페이지 리스트 api
         * @summary 질문 페이징 리스트
         * @param {CourseQuestionPageInqInVo} courseQuestionPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqCourseQuestionPage(courseQuestionPageInqInVo: CourseQuestionPageInqInVo, options?: any): AxiosPromise<PageCourseQuestionOutVo> {
            return localVarFp.inqCourseQuestionPage(courseQuestionPageInqInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 문의 수정 api
         * @summary 문의 수정
         * @param {CourseQuestionInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcCourseQuestion(inVo: CourseQuestionInVo, files?: Array<File>, options?: any): AxiosPromise<void> {
            return localVarFp.mdfcCourseQuestion(inVo, files, options).then((request) => request(axios, basePath));
        },
        /**
         * 문의 등록 api
         * @summary 문의 등록
         * @param {CourseQuestionInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnCourseQuestion(inVo: CourseQuestionInVo, files?: Array<File>, options?: any): AxiosPromise<void> {
            return localVarFp.rgsnCourseQuestion(inVo, files, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CourseQuestionControllerApi - object-oriented interface
 * @export
 * @class CourseQuestionControllerApi
 * @extends {BaseAPI}
 */
export class CourseQuestionControllerApi extends BaseAPI {
    /**
     * [질문 삭제 api
     * @summary 질문 삭제
     * @param {CourseQuestionDeleteInVo} courseQuestionDeleteInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseQuestionControllerApi
     */
    public delCourseQuestion(courseQuestionDeleteInVo: CourseQuestionDeleteInVo, options?: RawAxiosRequestConfig) {
        return CourseQuestionControllerApiFp(this.configuration).delCourseQuestion(courseQuestionDeleteInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * [질문/답변 멀티 삭제 api
     * @summary 질문/답변 멀티 삭제
     * @param {Array<CourseQuestionDeleteInVo>} courseQuestionDeleteInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseQuestionControllerApi
     */
    public delCourseQuestionMulti(courseQuestionDeleteInVo: Array<CourseQuestionDeleteInVo>, options?: RawAxiosRequestConfig) {
        return CourseQuestionControllerApiFp(this.configuration).delCourseQuestionMulti(courseQuestionDeleteInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 질문 상세 정보 조회 api
     * @summary 질문 상세 정보 조회
     * @param {CourseQuestionInVo} courseQuestionInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseQuestionControllerApi
     */
    public inqCourseQuestionDtl(courseQuestionInVo: CourseQuestionInVo, options?: RawAxiosRequestConfig) {
        return CourseQuestionControllerApiFp(this.configuration).inqCourseQuestionDtl(courseQuestionInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 질문 페이지 리스트 api
     * @summary 질문 페이징 리스트
     * @param {CourseQuestionPageInqInVo} courseQuestionPageInqInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseQuestionControllerApi
     */
    public inqCourseQuestionPage(courseQuestionPageInqInVo: CourseQuestionPageInqInVo, options?: RawAxiosRequestConfig) {
        return CourseQuestionControllerApiFp(this.configuration).inqCourseQuestionPage(courseQuestionPageInqInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 문의 수정 api
     * @summary 문의 수정
     * @param {CourseQuestionInVo} inVo 
     * @param {Array<File>} [files] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseQuestionControllerApi
     */
    public mdfcCourseQuestion(inVo: CourseQuestionInVo, files?: Array<File>, options?: RawAxiosRequestConfig) {
        return CourseQuestionControllerApiFp(this.configuration).mdfcCourseQuestion(inVo, files, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 문의 등록 api
     * @summary 문의 등록
     * @param {CourseQuestionInVo} inVo 
     * @param {Array<File>} [files] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseQuestionControllerApi
     */
    public rgsnCourseQuestion(inVo: CourseQuestionInVo, files?: Array<File>, options?: RawAxiosRequestConfig) {
        return CourseQuestionControllerApiFp(this.configuration).rgsnCourseQuestion(inVo, files, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CourseReviewControllerApi - axios parameter creator
 * @export
 */
export const CourseReviewControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 과정 후기 작성/미작성 갯수 정보 api
         * @summary 과정 후기 작성/미작성 갯수 정보
         * @param {CourseReviewInVo} courseReviewInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqCourseReviewCount: async (courseReviewInVo: CourseReviewInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseReviewInVo' is not null or undefined
            assertParamExists('inqCourseReviewCount', 'courseReviewInVo', courseReviewInVo)
            const localVarPath = `/v1/course/review/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(courseReviewInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 과정 후기 정보 조회 api
         * @summary 과정 후기 정보 조회
         * @param {CourseReviewInVo} courseReviewInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqCourseReviewDtl: async (courseReviewInVo: CourseReviewInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseReviewInVo' is not null or undefined
            assertParamExists('inqCourseReviewDtl', 'courseReviewInVo', courseReviewInVo)
            const localVarPath = `/v1/course/review/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(courseReviewInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 과정 후기 페이징 리스트 api
         * @summary 과정 후기 페이징 리스트
         * @param {CourseReviewPageInqInVo} courseReviewPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqCourseReviewPage: async (courseReviewPageInqInVo: CourseReviewPageInqInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseReviewPageInqInVo' is not null or undefined
            assertParamExists('inqCourseReviewPage', 'courseReviewPageInqInVo', courseReviewPageInqInVo)
            const localVarPath = `/v1/course/review/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(courseReviewPageInqInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 과정 후기 작성/미작성 api
         * @summary 과정 후기 작성/미작성 수정
         * @param {CourseReviewInVo} courseReviewInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcCourseReview: async (courseReviewInVo: CourseReviewInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseReviewInVo' is not null or undefined
            assertParamExists('mdfcCourseReview', 'courseReviewInVo', courseReviewInVo)
            const localVarPath = `/v1/course/review/modify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(courseReviewInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 과정 후기 정보 등록 api
         * @summary 과정 후기 정보 등록
         * @param {CourseReviewInVo} courseReviewInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnCourseReview: async (courseReviewInVo: CourseReviewInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseReviewInVo' is not null or undefined
            assertParamExists('rgsnCourseReview', 'courseReviewInVo', courseReviewInVo)
            const localVarPath = `/v1/course/review/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(courseReviewInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CourseReviewControllerApi - functional programming interface
 * @export
 */
export const CourseReviewControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CourseReviewControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 과정 후기 작성/미작성 갯수 정보 api
         * @summary 과정 후기 작성/미작성 갯수 정보
         * @param {CourseReviewInVo} courseReviewInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqCourseReviewCount(courseReviewInVo: CourseReviewInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseReviewOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqCourseReviewCount(courseReviewInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseReviewControllerApi.inqCourseReviewCount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 과정 후기 정보 조회 api
         * @summary 과정 후기 정보 조회
         * @param {CourseReviewInVo} courseReviewInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqCourseReviewDtl(courseReviewInVo: CourseReviewInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseReviewOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqCourseReviewDtl(courseReviewInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseReviewControllerApi.inqCourseReviewDtl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 과정 후기 페이징 리스트 api
         * @summary 과정 후기 페이징 리스트
         * @param {CourseReviewPageInqInVo} courseReviewPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqCourseReviewPage(courseReviewPageInqInVo: CourseReviewPageInqInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageCourseReviewOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqCourseReviewPage(courseReviewPageInqInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseReviewControllerApi.inqCourseReviewPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 과정 후기 작성/미작성 api
         * @summary 과정 후기 작성/미작성 수정
         * @param {CourseReviewInVo} courseReviewInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mdfcCourseReview(courseReviewInVo: CourseReviewInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mdfcCourseReview(courseReviewInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseReviewControllerApi.mdfcCourseReview']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 과정 후기 정보 등록 api
         * @summary 과정 후기 정보 등록
         * @param {CourseReviewInVo} courseReviewInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rgsnCourseReview(courseReviewInVo: CourseReviewInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rgsnCourseReview(courseReviewInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseReviewControllerApi.rgsnCourseReview']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CourseReviewControllerApi - factory interface
 * @export
 */
export const CourseReviewControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CourseReviewControllerApiFp(configuration)
    return {
        /**
         * 과정 후기 작성/미작성 갯수 정보 api
         * @summary 과정 후기 작성/미작성 갯수 정보
         * @param {CourseReviewInVo} courseReviewInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqCourseReviewCount(courseReviewInVo: CourseReviewInVo, options?: any): AxiosPromise<CourseReviewOutVo> {
            return localVarFp.inqCourseReviewCount(courseReviewInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 과정 후기 정보 조회 api
         * @summary 과정 후기 정보 조회
         * @param {CourseReviewInVo} courseReviewInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqCourseReviewDtl(courseReviewInVo: CourseReviewInVo, options?: any): AxiosPromise<CourseReviewOutVo> {
            return localVarFp.inqCourseReviewDtl(courseReviewInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 과정 후기 페이징 리스트 api
         * @summary 과정 후기 페이징 리스트
         * @param {CourseReviewPageInqInVo} courseReviewPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqCourseReviewPage(courseReviewPageInqInVo: CourseReviewPageInqInVo, options?: any): AxiosPromise<PageCourseReviewOutVo> {
            return localVarFp.inqCourseReviewPage(courseReviewPageInqInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 과정 후기 작성/미작성 api
         * @summary 과정 후기 작성/미작성 수정
         * @param {CourseReviewInVo} courseReviewInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcCourseReview(courseReviewInVo: CourseReviewInVo, options?: any): AxiosPromise<void> {
            return localVarFp.mdfcCourseReview(courseReviewInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 과정 후기 정보 등록 api
         * @summary 과정 후기 정보 등록
         * @param {CourseReviewInVo} courseReviewInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnCourseReview(courseReviewInVo: CourseReviewInVo, options?: any): AxiosPromise<void> {
            return localVarFp.rgsnCourseReview(courseReviewInVo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CourseReviewControllerApi - object-oriented interface
 * @export
 * @class CourseReviewControllerApi
 * @extends {BaseAPI}
 */
export class CourseReviewControllerApi extends BaseAPI {
    /**
     * 과정 후기 작성/미작성 갯수 정보 api
     * @summary 과정 후기 작성/미작성 갯수 정보
     * @param {CourseReviewInVo} courseReviewInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseReviewControllerApi
     */
    public inqCourseReviewCount(courseReviewInVo: CourseReviewInVo, options?: RawAxiosRequestConfig) {
        return CourseReviewControllerApiFp(this.configuration).inqCourseReviewCount(courseReviewInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 과정 후기 정보 조회 api
     * @summary 과정 후기 정보 조회
     * @param {CourseReviewInVo} courseReviewInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseReviewControllerApi
     */
    public inqCourseReviewDtl(courseReviewInVo: CourseReviewInVo, options?: RawAxiosRequestConfig) {
        return CourseReviewControllerApiFp(this.configuration).inqCourseReviewDtl(courseReviewInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 과정 후기 페이징 리스트 api
     * @summary 과정 후기 페이징 리스트
     * @param {CourseReviewPageInqInVo} courseReviewPageInqInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseReviewControllerApi
     */
    public inqCourseReviewPage(courseReviewPageInqInVo: CourseReviewPageInqInVo, options?: RawAxiosRequestConfig) {
        return CourseReviewControllerApiFp(this.configuration).inqCourseReviewPage(courseReviewPageInqInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 과정 후기 작성/미작성 api
     * @summary 과정 후기 작성/미작성 수정
     * @param {CourseReviewInVo} courseReviewInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseReviewControllerApi
     */
    public mdfcCourseReview(courseReviewInVo: CourseReviewInVo, options?: RawAxiosRequestConfig) {
        return CourseReviewControllerApiFp(this.configuration).mdfcCourseReview(courseReviewInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 과정 후기 정보 등록 api
     * @summary 과정 후기 정보 등록
     * @param {CourseReviewInVo} courseReviewInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseReviewControllerApi
     */
    public rgsnCourseReview(courseReviewInVo: CourseReviewInVo, options?: RawAxiosRequestConfig) {
        return CourseReviewControllerApiFp(this.configuration).rgsnCourseReview(courseReviewInVo, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ExamCloudControllerApi - axios parameter creator
 * @export
 */
export const ExamCloudControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fail: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/example/fail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqDatabaseList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/example/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        success: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/example/success`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExamCloudControllerApi - functional programming interface
 * @export
 */
export const ExamCloudControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExamCloudControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fail(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fail(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExamCloudControllerApi.fail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqDatabaseList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqDatabaseList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExamCloudControllerApi.inqDatabaseList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async success(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.success(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExamCloudControllerApi.success']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ExamCloudControllerApi - factory interface
 * @export
 */
export const ExamCloudControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExamCloudControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fail(options?: any): AxiosPromise<void> {
            return localVarFp.fail(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqDatabaseList(options?: any): AxiosPromise<Array<string>> {
            return localVarFp.inqDatabaseList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        success(options?: any): AxiosPromise<void> {
            return localVarFp.success(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExamCloudControllerApi - object-oriented interface
 * @export
 * @class ExamCloudControllerApi
 * @extends {BaseAPI}
 */
export class ExamCloudControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamCloudControllerApi
     */
    public fail(options?: RawAxiosRequestConfig) {
        return ExamCloudControllerApiFp(this.configuration).fail(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamCloudControllerApi
     */
    public inqDatabaseList(options?: RawAxiosRequestConfig) {
        return ExamCloudControllerApiFp(this.configuration).inqDatabaseList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamCloudControllerApi
     */
    public success(options?: RawAxiosRequestConfig) {
        return ExamCloudControllerApiFp(this.configuration).success(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FacilityControllerApi - axios parameter creator
 * @export
 */
export const FacilityControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 시설 등록전 중복체크 api
         * @summary 시설 등록전 중복체크
         * @param {FacilityInVo} facilityInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkFacility: async (facilityInVo: FacilityInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'facilityInVo' is not null or undefined
            assertParamExists('checkFacility', 'facilityInVo', facilityInVo)
            const localVarPath = `/v1/facility/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(facilityInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 시설 단일 삭제 api
         * @summary 시설 단일 삭제
         * @param {FacilityInVo} facilityInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delFacility: async (facilityInVo: FacilityInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'facilityInVo' is not null or undefined
            assertParamExists('delFacility', 'facilityInVo', facilityInVo)
            const localVarPath = `/v1/facility/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(facilityInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 시설 멀티 삭제 api
         * @summary 시설 멀티 삭제
         * @param {Array<FacilityInVo>} facilityInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delFacilityMulti: async (facilityInVo: Array<FacilityInVo>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'facilityInVo' is not null or undefined
            assertParamExists('delFacilityMulti', 'facilityInVo', facilityInVo)
            const localVarPath = `/v1/facility/delete/multi`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(facilityInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 시설 상세 정보 조회 api
         * @summary 시설 상세 정보 조회
         * @param {FacilityInVo} facilityInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqFacilityDtl: async (facilityInVo: FacilityInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'facilityInVo' is not null or undefined
            assertParamExists('inqFacilityDtl', 'facilityInVo', facilityInVo)
            const localVarPath = `/v1/facility/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(facilityInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 시설 페이징 리스트 api
         * @summary 시설 페이징 리스트
         * @param {FacilityPageInqInVo} facilityPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqFacilityPage: async (facilityPageInqInVo: FacilityPageInqInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'facilityPageInqInVo' is not null or undefined
            assertParamExists('inqFacilityPage', 'facilityPageInqInVo', facilityPageInqInVo)
            const localVarPath = `/v1/facility/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(facilityPageInqInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 시설 수정 api
         * @summary 시설 수정
         * @param {FacilityInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcFacility: async (inVo: FacilityInVo, files?: Array<File>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inVo' is not null or undefined
            assertParamExists('mdfcFacility', 'inVo', inVo)
            const localVarPath = `/v1/facility/modify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (files) {
                files.forEach((element) => {
                  localVarFormParams.append('files', element as any);
                })
            }

    
            if (inVo !== undefined) { 
                localVarFormParams.append('inVo', new Blob([JSON.stringify(inVo)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 시설 등록 api
         * @summary 시설 등록
         * @param {FacilityInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnFacility: async (inVo: FacilityInVo, files?: Array<File>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inVo' is not null or undefined
            assertParamExists('rgsnFacility', 'inVo', inVo)
            const localVarPath = `/v1/facility/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (files) {
                files.forEach((element) => {
                  localVarFormParams.append('files', element as any);
                })
            }

    
            if (inVo !== undefined) { 
                localVarFormParams.append('inVo', new Blob([JSON.stringify(inVo)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FacilityControllerApi - functional programming interface
 * @export
 */
export const FacilityControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FacilityControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 시설 등록전 중복체크 api
         * @summary 시설 등록전 중복체크
         * @param {FacilityInVo} facilityInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkFacility(facilityInVo: FacilityInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkFacility(facilityInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FacilityControllerApi.checkFacility']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 시설 단일 삭제 api
         * @summary 시설 단일 삭제
         * @param {FacilityInVo} facilityInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delFacility(facilityInVo: FacilityInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delFacility(facilityInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FacilityControllerApi.delFacility']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 시설 멀티 삭제 api
         * @summary 시설 멀티 삭제
         * @param {Array<FacilityInVo>} facilityInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delFacilityMulti(facilityInVo: Array<FacilityInVo>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delFacilityMulti(facilityInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FacilityControllerApi.delFacilityMulti']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 시설 상세 정보 조회 api
         * @summary 시설 상세 정보 조회
         * @param {FacilityInVo} facilityInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqFacilityDtl(facilityInVo: FacilityInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FacilityOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqFacilityDtl(facilityInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FacilityControllerApi.inqFacilityDtl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 시설 페이징 리스트 api
         * @summary 시설 페이징 리스트
         * @param {FacilityPageInqInVo} facilityPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqFacilityPage(facilityPageInqInVo: FacilityPageInqInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageFacilityOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqFacilityPage(facilityPageInqInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FacilityControllerApi.inqFacilityPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 시설 수정 api
         * @summary 시설 수정
         * @param {FacilityInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mdfcFacility(inVo: FacilityInVo, files?: Array<File>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mdfcFacility(inVo, files, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FacilityControllerApi.mdfcFacility']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 시설 등록 api
         * @summary 시설 등록
         * @param {FacilityInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rgsnFacility(inVo: FacilityInVo, files?: Array<File>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rgsnFacility(inVo, files, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FacilityControllerApi.rgsnFacility']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FacilityControllerApi - factory interface
 * @export
 */
export const FacilityControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FacilityControllerApiFp(configuration)
    return {
        /**
         * 시설 등록전 중복체크 api
         * @summary 시설 등록전 중복체크
         * @param {FacilityInVo} facilityInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkFacility(facilityInVo: FacilityInVo, options?: any): AxiosPromise<number> {
            return localVarFp.checkFacility(facilityInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 시설 단일 삭제 api
         * @summary 시설 단일 삭제
         * @param {FacilityInVo} facilityInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delFacility(facilityInVo: FacilityInVo, options?: any): AxiosPromise<void> {
            return localVarFp.delFacility(facilityInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 시설 멀티 삭제 api
         * @summary 시설 멀티 삭제
         * @param {Array<FacilityInVo>} facilityInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delFacilityMulti(facilityInVo: Array<FacilityInVo>, options?: any): AxiosPromise<void> {
            return localVarFp.delFacilityMulti(facilityInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 시설 상세 정보 조회 api
         * @summary 시설 상세 정보 조회
         * @param {FacilityInVo} facilityInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqFacilityDtl(facilityInVo: FacilityInVo, options?: any): AxiosPromise<FacilityOutVo> {
            return localVarFp.inqFacilityDtl(facilityInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 시설 페이징 리스트 api
         * @summary 시설 페이징 리스트
         * @param {FacilityPageInqInVo} facilityPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqFacilityPage(facilityPageInqInVo: FacilityPageInqInVo, options?: any): AxiosPromise<PageFacilityOutVo> {
            return localVarFp.inqFacilityPage(facilityPageInqInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 시설 수정 api
         * @summary 시설 수정
         * @param {FacilityInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcFacility(inVo: FacilityInVo, files?: Array<File>, options?: any): AxiosPromise<void> {
            return localVarFp.mdfcFacility(inVo, files, options).then((request) => request(axios, basePath));
        },
        /**
         * 시설 등록 api
         * @summary 시설 등록
         * @param {FacilityInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnFacility(inVo: FacilityInVo, files?: Array<File>, options?: any): AxiosPromise<void> {
            return localVarFp.rgsnFacility(inVo, files, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FacilityControllerApi - object-oriented interface
 * @export
 * @class FacilityControllerApi
 * @extends {BaseAPI}
 */
export class FacilityControllerApi extends BaseAPI {
    /**
     * 시설 등록전 중복체크 api
     * @summary 시설 등록전 중복체크
     * @param {FacilityInVo} facilityInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FacilityControllerApi
     */
    public checkFacility(facilityInVo: FacilityInVo, options?: RawAxiosRequestConfig) {
        return FacilityControllerApiFp(this.configuration).checkFacility(facilityInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 시설 단일 삭제 api
     * @summary 시설 단일 삭제
     * @param {FacilityInVo} facilityInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FacilityControllerApi
     */
    public delFacility(facilityInVo: FacilityInVo, options?: RawAxiosRequestConfig) {
        return FacilityControllerApiFp(this.configuration).delFacility(facilityInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 시설 멀티 삭제 api
     * @summary 시설 멀티 삭제
     * @param {Array<FacilityInVo>} facilityInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FacilityControllerApi
     */
    public delFacilityMulti(facilityInVo: Array<FacilityInVo>, options?: RawAxiosRequestConfig) {
        return FacilityControllerApiFp(this.configuration).delFacilityMulti(facilityInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 시설 상세 정보 조회 api
     * @summary 시설 상세 정보 조회
     * @param {FacilityInVo} facilityInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FacilityControllerApi
     */
    public inqFacilityDtl(facilityInVo: FacilityInVo, options?: RawAxiosRequestConfig) {
        return FacilityControllerApiFp(this.configuration).inqFacilityDtl(facilityInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 시설 페이징 리스트 api
     * @summary 시설 페이징 리스트
     * @param {FacilityPageInqInVo} facilityPageInqInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FacilityControllerApi
     */
    public inqFacilityPage(facilityPageInqInVo: FacilityPageInqInVo, options?: RawAxiosRequestConfig) {
        return FacilityControllerApiFp(this.configuration).inqFacilityPage(facilityPageInqInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 시설 수정 api
     * @summary 시설 수정
     * @param {FacilityInVo} inVo 
     * @param {Array<File>} [files] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FacilityControllerApi
     */
    public mdfcFacility(inVo: FacilityInVo, files?: Array<File>, options?: RawAxiosRequestConfig) {
        return FacilityControllerApiFp(this.configuration).mdfcFacility(inVo, files, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 시설 등록 api
     * @summary 시설 등록
     * @param {FacilityInVo} inVo 
     * @param {Array<File>} [files] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FacilityControllerApi
     */
    public rgsnFacility(inVo: FacilityInVo, files?: Array<File>, options?: RawAxiosRequestConfig) {
        return FacilityControllerApiFp(this.configuration).rgsnFacility(inVo, files, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FacilityRequestControllerApi - axios parameter creator
 * @export
 */
export const FacilityRequestControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 시설 신청 삭제 api
         * @summary 시설 신청 멀티 삭제
         * @param {Array<FacilityRequestInVo>} facilityRequestInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delFacilityRequestMulti: async (facilityRequestInVo: Array<FacilityRequestInVo>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'facilityRequestInVo' is not null or undefined
            assertParamExists('delFacilityRequestMulti', 'facilityRequestInVo', facilityRequestInVo)
            const localVarPath = `/v1/facility/request/delete/multi`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(facilityRequestInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 시설 신청 켈린터 리스트 api
         * @summary 시설 신청 켈린더 노출 리스트
         * @param {FacilityRequestCalendarInqInVo} facilityRequestCalendarInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqFacilityRequestList: async (facilityRequestCalendarInqInVo: FacilityRequestCalendarInqInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'facilityRequestCalendarInqInVo' is not null or undefined
            assertParamExists('inqFacilityRequestList', 'facilityRequestCalendarInqInVo', facilityRequestCalendarInqInVo)
            const localVarPath = `/v1/facility/request/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(facilityRequestCalendarInqInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 시설 신청 페이징 리스트 api
         * @summary 시설 신청 페이징 리스트
         * @param {FacilityRequestPageInqInVo} facilityRequestPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqFacilityRequestPage: async (facilityRequestPageInqInVo: FacilityRequestPageInqInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'facilityRequestPageInqInVo' is not null or undefined
            assertParamExists('inqFacilityRequestPage', 'facilityRequestPageInqInVo', facilityRequestPageInqInVo)
            const localVarPath = `/v1/facility/request/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(facilityRequestPageInqInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 시설 신청 관리 수정 api
         * @summary 시설 신청 관리 수정
         * @param {FacilityRequestInVo} facilityRequestInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcFacilityRequest: async (facilityRequestInVo: FacilityRequestInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'facilityRequestInVo' is not null or undefined
            assertParamExists('mdfcFacilityRequest', 'facilityRequestInVo', facilityRequestInVo)
            const localVarPath = `/v1/facility/request/modify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(facilityRequestInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 시설 신청 취소 api
         * @summary 시설 신청 취소
         * @param {FacilityRequestInVo} facilityRequestInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcFacilityRequestCancel: async (facilityRequestInVo: FacilityRequestInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'facilityRequestInVo' is not null or undefined
            assertParamExists('mdfcFacilityRequestCancel', 'facilityRequestInVo', facilityRequestInVo)
            const localVarPath = `/v1/facility/request/cancel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(facilityRequestInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 시설 신청 관리 등록 api
         * @summary 시설 신청 관리 등록
         * @param {FacilityRequestInVo} facilityRequestInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnFacilityRequest: async (facilityRequestInVo: FacilityRequestInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'facilityRequestInVo' is not null or undefined
            assertParamExists('rgsnFacilityRequest', 'facilityRequestInVo', facilityRequestInVo)
            const localVarPath = `/v1/facility/request/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(facilityRequestInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FacilityRequestControllerApi - functional programming interface
 * @export
 */
export const FacilityRequestControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FacilityRequestControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 시설 신청 삭제 api
         * @summary 시설 신청 멀티 삭제
         * @param {Array<FacilityRequestInVo>} facilityRequestInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delFacilityRequestMulti(facilityRequestInVo: Array<FacilityRequestInVo>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delFacilityRequestMulti(facilityRequestInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FacilityRequestControllerApi.delFacilityRequestMulti']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 시설 신청 켈린터 리스트 api
         * @summary 시설 신청 켈린더 노출 리스트
         * @param {FacilityRequestCalendarInqInVo} facilityRequestCalendarInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqFacilityRequestList(facilityRequestCalendarInqInVo: FacilityRequestCalendarInqInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FacilityRequestOutVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqFacilityRequestList(facilityRequestCalendarInqInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FacilityRequestControllerApi.inqFacilityRequestList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 시설 신청 페이징 리스트 api
         * @summary 시설 신청 페이징 리스트
         * @param {FacilityRequestPageInqInVo} facilityRequestPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqFacilityRequestPage(facilityRequestPageInqInVo: FacilityRequestPageInqInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageFacilityRequestOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqFacilityRequestPage(facilityRequestPageInqInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FacilityRequestControllerApi.inqFacilityRequestPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 시설 신청 관리 수정 api
         * @summary 시설 신청 관리 수정
         * @param {FacilityRequestInVo} facilityRequestInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mdfcFacilityRequest(facilityRequestInVo: FacilityRequestInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mdfcFacilityRequest(facilityRequestInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FacilityRequestControllerApi.mdfcFacilityRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 시설 신청 취소 api
         * @summary 시설 신청 취소
         * @param {FacilityRequestInVo} facilityRequestInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mdfcFacilityRequestCancel(facilityRequestInVo: FacilityRequestInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mdfcFacilityRequestCancel(facilityRequestInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FacilityRequestControllerApi.mdfcFacilityRequestCancel']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 시설 신청 관리 등록 api
         * @summary 시설 신청 관리 등록
         * @param {FacilityRequestInVo} facilityRequestInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rgsnFacilityRequest(facilityRequestInVo: FacilityRequestInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rgsnFacilityRequest(facilityRequestInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FacilityRequestControllerApi.rgsnFacilityRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FacilityRequestControllerApi - factory interface
 * @export
 */
export const FacilityRequestControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FacilityRequestControllerApiFp(configuration)
    return {
        /**
         * 시설 신청 삭제 api
         * @summary 시설 신청 멀티 삭제
         * @param {Array<FacilityRequestInVo>} facilityRequestInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delFacilityRequestMulti(facilityRequestInVo: Array<FacilityRequestInVo>, options?: any): AxiosPromise<void> {
            return localVarFp.delFacilityRequestMulti(facilityRequestInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 시설 신청 켈린터 리스트 api
         * @summary 시설 신청 켈린더 노출 리스트
         * @param {FacilityRequestCalendarInqInVo} facilityRequestCalendarInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqFacilityRequestList(facilityRequestCalendarInqInVo: FacilityRequestCalendarInqInVo, options?: any): AxiosPromise<Array<FacilityRequestOutVo>> {
            return localVarFp.inqFacilityRequestList(facilityRequestCalendarInqInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 시설 신청 페이징 리스트 api
         * @summary 시설 신청 페이징 리스트
         * @param {FacilityRequestPageInqInVo} facilityRequestPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqFacilityRequestPage(facilityRequestPageInqInVo: FacilityRequestPageInqInVo, options?: any): AxiosPromise<PageFacilityRequestOutVo> {
            return localVarFp.inqFacilityRequestPage(facilityRequestPageInqInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 시설 신청 관리 수정 api
         * @summary 시설 신청 관리 수정
         * @param {FacilityRequestInVo} facilityRequestInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcFacilityRequest(facilityRequestInVo: FacilityRequestInVo, options?: any): AxiosPromise<void> {
            return localVarFp.mdfcFacilityRequest(facilityRequestInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 시설 신청 취소 api
         * @summary 시설 신청 취소
         * @param {FacilityRequestInVo} facilityRequestInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcFacilityRequestCancel(facilityRequestInVo: FacilityRequestInVo, options?: any): AxiosPromise<void> {
            return localVarFp.mdfcFacilityRequestCancel(facilityRequestInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 시설 신청 관리 등록 api
         * @summary 시설 신청 관리 등록
         * @param {FacilityRequestInVo} facilityRequestInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnFacilityRequest(facilityRequestInVo: FacilityRequestInVo, options?: any): AxiosPromise<void> {
            return localVarFp.rgsnFacilityRequest(facilityRequestInVo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FacilityRequestControllerApi - object-oriented interface
 * @export
 * @class FacilityRequestControllerApi
 * @extends {BaseAPI}
 */
export class FacilityRequestControllerApi extends BaseAPI {
    /**
     * 시설 신청 삭제 api
     * @summary 시설 신청 멀티 삭제
     * @param {Array<FacilityRequestInVo>} facilityRequestInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FacilityRequestControllerApi
     */
    public delFacilityRequestMulti(facilityRequestInVo: Array<FacilityRequestInVo>, options?: RawAxiosRequestConfig) {
        return FacilityRequestControllerApiFp(this.configuration).delFacilityRequestMulti(facilityRequestInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 시설 신청 켈린터 리스트 api
     * @summary 시설 신청 켈린더 노출 리스트
     * @param {FacilityRequestCalendarInqInVo} facilityRequestCalendarInqInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FacilityRequestControllerApi
     */
    public inqFacilityRequestList(facilityRequestCalendarInqInVo: FacilityRequestCalendarInqInVo, options?: RawAxiosRequestConfig) {
        return FacilityRequestControllerApiFp(this.configuration).inqFacilityRequestList(facilityRequestCalendarInqInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 시설 신청 페이징 리스트 api
     * @summary 시설 신청 페이징 리스트
     * @param {FacilityRequestPageInqInVo} facilityRequestPageInqInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FacilityRequestControllerApi
     */
    public inqFacilityRequestPage(facilityRequestPageInqInVo: FacilityRequestPageInqInVo, options?: RawAxiosRequestConfig) {
        return FacilityRequestControllerApiFp(this.configuration).inqFacilityRequestPage(facilityRequestPageInqInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 시설 신청 관리 수정 api
     * @summary 시설 신청 관리 수정
     * @param {FacilityRequestInVo} facilityRequestInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FacilityRequestControllerApi
     */
    public mdfcFacilityRequest(facilityRequestInVo: FacilityRequestInVo, options?: RawAxiosRequestConfig) {
        return FacilityRequestControllerApiFp(this.configuration).mdfcFacilityRequest(facilityRequestInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 시설 신청 취소 api
     * @summary 시설 신청 취소
     * @param {FacilityRequestInVo} facilityRequestInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FacilityRequestControllerApi
     */
    public mdfcFacilityRequestCancel(facilityRequestInVo: FacilityRequestInVo, options?: RawAxiosRequestConfig) {
        return FacilityRequestControllerApiFp(this.configuration).mdfcFacilityRequestCancel(facilityRequestInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 시설 신청 관리 등록 api
     * @summary 시설 신청 관리 등록
     * @param {FacilityRequestInVo} facilityRequestInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FacilityRequestControllerApi
     */
    public rgsnFacilityRequest(facilityRequestInVo: FacilityRequestInVo, options?: RawAxiosRequestConfig) {
        return FacilityRequestControllerApiFp(this.configuration).rgsnFacilityRequest(facilityRequestInVo, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FaqCategoryControllerApi - axios parameter creator
 * @export
 */
export const FaqCategoryControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 분류 리스트 api
         * @summary 분류 리스트
         * @param {FaqCategoryInVo} faqCategoryInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqFaqCategoryList: async (faqCategoryInVo: FaqCategoryInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'faqCategoryInVo' is not null or undefined
            assertParamExists('inqFaqCategoryList', 'faqCategoryInVo', faqCategoryInVo)
            const localVarPath = `/v1/faq/category/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(faqCategoryInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FaqCategoryControllerApi - functional programming interface
 * @export
 */
export const FaqCategoryControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FaqCategoryControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 분류 리스트 api
         * @summary 분류 리스트
         * @param {FaqCategoryInVo} faqCategoryInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqFaqCategoryList(faqCategoryInVo: FaqCategoryInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FaqCategoryOutVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqFaqCategoryList(faqCategoryInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FaqCategoryControllerApi.inqFaqCategoryList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FaqCategoryControllerApi - factory interface
 * @export
 */
export const FaqCategoryControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FaqCategoryControllerApiFp(configuration)
    return {
        /**
         * 분류 리스트 api
         * @summary 분류 리스트
         * @param {FaqCategoryInVo} faqCategoryInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqFaqCategoryList(faqCategoryInVo: FaqCategoryInVo, options?: any): AxiosPromise<Array<FaqCategoryOutVo>> {
            return localVarFp.inqFaqCategoryList(faqCategoryInVo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FaqCategoryControllerApi - object-oriented interface
 * @export
 * @class FaqCategoryControllerApi
 * @extends {BaseAPI}
 */
export class FaqCategoryControllerApi extends BaseAPI {
    /**
     * 분류 리스트 api
     * @summary 분류 리스트
     * @param {FaqCategoryInVo} faqCategoryInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaqCategoryControllerApi
     */
    public inqFaqCategoryList(faqCategoryInVo: FaqCategoryInVo, options?: RawAxiosRequestConfig) {
        return FaqCategoryControllerApiFp(this.configuration).inqFaqCategoryList(faqCategoryInVo, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FaqControllerApi - axios parameter creator
 * @export
 */
export const FaqControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * FAQ 페이징 리스트 api
         * @summary FAQ 페이징 리스트
         * @param {FaqPageInqInVo} faqPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqFaqPage: async (faqPageInqInVo: FaqPageInqInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'faqPageInqInVo' is not null or undefined
            assertParamExists('inqFaqPage', 'faqPageInqInVo', faqPageInqInVo)
            const localVarPath = `/v1/faq/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(faqPageInqInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FaqControllerApi - functional programming interface
 * @export
 */
export const FaqControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FaqControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * FAQ 페이징 리스트 api
         * @summary FAQ 페이징 리스트
         * @param {FaqPageInqInVo} faqPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqFaqPage(faqPageInqInVo: FaqPageInqInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageFaqOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqFaqPage(faqPageInqInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FaqControllerApi.inqFaqPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FaqControllerApi - factory interface
 * @export
 */
export const FaqControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FaqControllerApiFp(configuration)
    return {
        /**
         * FAQ 페이징 리스트 api
         * @summary FAQ 페이징 리스트
         * @param {FaqPageInqInVo} faqPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqFaqPage(faqPageInqInVo: FaqPageInqInVo, options?: any): AxiosPromise<PageFaqOutVo> {
            return localVarFp.inqFaqPage(faqPageInqInVo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FaqControllerApi - object-oriented interface
 * @export
 * @class FaqControllerApi
 * @extends {BaseAPI}
 */
export class FaqControllerApi extends BaseAPI {
    /**
     * FAQ 페이징 리스트 api
     * @summary FAQ 페이징 리스트
     * @param {FaqPageInqInVo} faqPageInqInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaqControllerApi
     */
    public inqFaqPage(faqPageInqInVo: FaqPageInqInVo, options?: RawAxiosRequestConfig) {
        return FaqControllerApiFp(this.configuration).inqFaqPage(faqPageInqInVo, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FileControllerApi - axios parameter creator
 * @export
 */
export const FileControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} atchId 
         * @param {number} atchSqn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFileCommunity: async (atchId: number, atchSqn: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'atchId' is not null or undefined
            assertParamExists('downloadFileCommunity', 'atchId', atchId)
            // verify required parameter 'atchSqn' is not null or undefined
            assertParamExists('downloadFileCommunity', 'atchSqn', atchSqn)
            const localVarPath = `/v1/file/download/community/{atchId}/{atchSqn}`
                .replace(`{${"atchId"}}`, encodeURIComponent(String(atchId)))
                .replace(`{${"atchSqn"}}`, encodeURIComponent(String(atchSqn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} dutyEdctCd 
         * @param {number} edctDsprNo 
         * @param {string} objcDsncVl 
         * @param {number} edctAtchObjcNo 
         * @param {number} edctAtchSqn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFileCourse: async (dutyEdctCd: string, edctDsprNo: number, objcDsncVl: string, edctAtchObjcNo: number, edctAtchSqn: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dutyEdctCd' is not null or undefined
            assertParamExists('downloadFileCourse', 'dutyEdctCd', dutyEdctCd)
            // verify required parameter 'edctDsprNo' is not null or undefined
            assertParamExists('downloadFileCourse', 'edctDsprNo', edctDsprNo)
            // verify required parameter 'objcDsncVl' is not null or undefined
            assertParamExists('downloadFileCourse', 'objcDsncVl', objcDsncVl)
            // verify required parameter 'edctAtchObjcNo' is not null or undefined
            assertParamExists('downloadFileCourse', 'edctAtchObjcNo', edctAtchObjcNo)
            // verify required parameter 'edctAtchSqn' is not null or undefined
            assertParamExists('downloadFileCourse', 'edctAtchSqn', edctAtchSqn)
            const localVarPath = `/v1/file/download/course/{dutyEdctCd}/{edctDsprNo}/{objcDsncVl}/{edctAtchObjcNo}/{edctAtchSqn}`
                .replace(`{${"dutyEdctCd"}}`, encodeURIComponent(String(dutyEdctCd)))
                .replace(`{${"edctDsprNo"}}`, encodeURIComponent(String(edctDsprNo)))
                .replace(`{${"objcDsncVl"}}`, encodeURIComponent(String(objcDsncVl)))
                .replace(`{${"edctAtchObjcNo"}}`, encodeURIComponent(String(edctAtchObjcNo)))
                .replace(`{${"edctAtchSqn"}}`, encodeURIComponent(String(edctAtchSqn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} dutyEdctCd 
         * @param {number} edctDsprNo 
         * @param {number} edctDsprChpaNo 
         * @param {number} edctDsprLssoNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFileCourseReport: async (dutyEdctCd: string, edctDsprNo: number, edctDsprChpaNo: number, edctDsprLssoNo: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dutyEdctCd' is not null or undefined
            assertParamExists('downloadFileCourseReport', 'dutyEdctCd', dutyEdctCd)
            // verify required parameter 'edctDsprNo' is not null or undefined
            assertParamExists('downloadFileCourseReport', 'edctDsprNo', edctDsprNo)
            // verify required parameter 'edctDsprChpaNo' is not null or undefined
            assertParamExists('downloadFileCourseReport', 'edctDsprChpaNo', edctDsprChpaNo)
            // verify required parameter 'edctDsprLssoNo' is not null or undefined
            assertParamExists('downloadFileCourseReport', 'edctDsprLssoNo', edctDsprLssoNo)
            const localVarPath = `/v1/file/download/course/report/{dutyEdctCd}/{edctDsprNo}/{edctDsprChpaNo}/{edctDsprLssoNo}`
                .replace(`{${"dutyEdctCd"}}`, encodeURIComponent(String(dutyEdctCd)))
                .replace(`{${"edctDsprNo"}}`, encodeURIComponent(String(edctDsprNo)))
                .replace(`{${"edctDsprChpaNo"}}`, encodeURIComponent(String(edctDsprChpaNo)))
                .replace(`{${"edctDsprLssoNo"}}`, encodeURIComponent(String(edctDsprLssoNo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} atchId 
         * @param {number} atchSqn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFileFaq: async (atchId: number, atchSqn: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'atchId' is not null or undefined
            assertParamExists('downloadFileFaq', 'atchId', atchId)
            // verify required parameter 'atchSqn' is not null or undefined
            assertParamExists('downloadFileFaq', 'atchSqn', atchSqn)
            const localVarPath = `/v1/file/download/faq/{atchId}/{atchSqn}`
                .replace(`{${"atchId"}}`, encodeURIComponent(String(atchId)))
                .replace(`{${"atchSqn"}}`, encodeURIComponent(String(atchSqn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} atchId 
         * @param {number} atchSqn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFileQuestion: async (atchId: number, atchSqn: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'atchId' is not null or undefined
            assertParamExists('downloadFileQuestion', 'atchId', atchId)
            // verify required parameter 'atchSqn' is not null or undefined
            assertParamExists('downloadFileQuestion', 'atchSqn', atchSqn)
            const localVarPath = `/v1/file/download/question/{atchId}/{atchSqn}`
                .replace(`{${"atchId"}}`, encodeURIComponent(String(atchId)))
                .replace(`{${"atchSqn"}}`, encodeURIComponent(String(atchSqn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} atchId 
         * @param {number} atchSqn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFileSocial: async (atchId: number, atchSqn: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'atchId' is not null or undefined
            assertParamExists('downloadFileSocial', 'atchId', atchId)
            // verify required parameter 'atchSqn' is not null or undefined
            assertParamExists('downloadFileSocial', 'atchSqn', atchSqn)
            const localVarPath = `/v1/file/download/social/{atchId}/{atchSqn}`
                .replace(`{${"atchId"}}`, encodeURIComponent(String(atchId)))
                .replace(`{${"atchSqn"}}`, encodeURIComponent(String(atchSqn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} spmyAplcDcd 
         * @param {number} sqc 
         * @param {number} atchSqn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadIdiEduCostFile: async (spmyAplcDcd: string, sqc: number, atchSqn: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spmyAplcDcd' is not null or undefined
            assertParamExists('downloadIdiEduCostFile', 'spmyAplcDcd', spmyAplcDcd)
            // verify required parameter 'sqc' is not null or undefined
            assertParamExists('downloadIdiEduCostFile', 'sqc', sqc)
            // verify required parameter 'atchSqn' is not null or undefined
            assertParamExists('downloadIdiEduCostFile', 'atchSqn', atchSqn)
            const localVarPath = `/v1/file/download/idi/edu/cost/file/{spmyAplcDcd}/{sqc}/{atchSqn}`
                .replace(`{${"spmyAplcDcd"}}`, encodeURIComponent(String(spmyAplcDcd)))
                .replace(`{${"sqc"}}`, encodeURIComponent(String(sqc)))
                .replace(`{${"atchSqn"}}`, encodeURIComponent(String(atchSqn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} onslDvlpSprnAplcDcd 
         * @param {number} sqc 
         * @param {number} atchSqn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadIdiExamCostFile: async (onslDvlpSprnAplcDcd: string, sqc: number, atchSqn: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'onslDvlpSprnAplcDcd' is not null or undefined
            assertParamExists('downloadIdiExamCostFile', 'onslDvlpSprnAplcDcd', onslDvlpSprnAplcDcd)
            // verify required parameter 'sqc' is not null or undefined
            assertParamExists('downloadIdiExamCostFile', 'sqc', sqc)
            // verify required parameter 'atchSqn' is not null or undefined
            assertParamExists('downloadIdiExamCostFile', 'atchSqn', atchSqn)
            const localVarPath = `/v1/file/download/idi/exam/cost/file/{onslDvlpSprnAplcDcd}/{sqc}/{atchSqn}`
                .replace(`{${"onslDvlpSprnAplcDcd"}}`, encodeURIComponent(String(onslDvlpSprnAplcDcd)))
                .replace(`{${"sqc"}}`, encodeURIComponent(String(sqc)))
                .replace(`{${"atchSqn"}}`, encodeURIComponent(String(atchSqn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<File>} files 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnMultiFile: async (files: Array<File>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'files' is not null or undefined
            assertParamExists('rgsnMultiFile', 'files', files)
            const localVarPath = `/v1/file/multi/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (files) {
                files.forEach((element) => {
                  localVarFormParams.append('files', element as any);
                })
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnSingleFile: async (file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('rgsnSingleFile', 'file', file)
            const localVarPath = `/v1/file/single/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FileControllerApi - functional programming interface
 * @export
 */
export const FileControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FileControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} atchId 
         * @param {number} atchSqn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadFileCommunity(atchId: number, atchSqn: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadFileCommunity(atchId, atchSqn, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FileControllerApi.downloadFileCommunity']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} dutyEdctCd 
         * @param {number} edctDsprNo 
         * @param {string} objcDsncVl 
         * @param {number} edctAtchObjcNo 
         * @param {number} edctAtchSqn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadFileCourse(dutyEdctCd: string, edctDsprNo: number, objcDsncVl: string, edctAtchObjcNo: number, edctAtchSqn: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadFileCourse(dutyEdctCd, edctDsprNo, objcDsncVl, edctAtchObjcNo, edctAtchSqn, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FileControllerApi.downloadFileCourse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} dutyEdctCd 
         * @param {number} edctDsprNo 
         * @param {number} edctDsprChpaNo 
         * @param {number} edctDsprLssoNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadFileCourseReport(dutyEdctCd: string, edctDsprNo: number, edctDsprChpaNo: number, edctDsprLssoNo: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadFileCourseReport(dutyEdctCd, edctDsprNo, edctDsprChpaNo, edctDsprLssoNo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FileControllerApi.downloadFileCourseReport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} atchId 
         * @param {number} atchSqn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadFileFaq(atchId: number, atchSqn: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadFileFaq(atchId, atchSqn, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FileControllerApi.downloadFileFaq']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} atchId 
         * @param {number} atchSqn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadFileQuestion(atchId: number, atchSqn: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadFileQuestion(atchId, atchSqn, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FileControllerApi.downloadFileQuestion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} atchId 
         * @param {number} atchSqn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadFileSocial(atchId: number, atchSqn: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadFileSocial(atchId, atchSqn, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FileControllerApi.downloadFileSocial']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} spmyAplcDcd 
         * @param {number} sqc 
         * @param {number} atchSqn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadIdiEduCostFile(spmyAplcDcd: string, sqc: number, atchSqn: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadIdiEduCostFile(spmyAplcDcd, sqc, atchSqn, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FileControllerApi.downloadIdiEduCostFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} onslDvlpSprnAplcDcd 
         * @param {number} sqc 
         * @param {number} atchSqn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadIdiExamCostFile(onslDvlpSprnAplcDcd: string, sqc: number, atchSqn: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadIdiExamCostFile(onslDvlpSprnAplcDcd, sqc, atchSqn, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FileControllerApi.downloadIdiExamCostFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Array<File>} files 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rgsnMultiFile(files: Array<File>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FileOutVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rgsnMultiFile(files, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FileControllerApi.rgsnMultiFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rgsnSingleFile(file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rgsnSingleFile(file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FileControllerApi.rgsnSingleFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FileControllerApi - factory interface
 * @export
 */
export const FileControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FileControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {number} atchId 
         * @param {number} atchSqn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFileCommunity(atchId: number, atchSqn: number, options?: any): AxiosPromise<File> {
            return localVarFp.downloadFileCommunity(atchId, atchSqn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} dutyEdctCd 
         * @param {number} edctDsprNo 
         * @param {string} objcDsncVl 
         * @param {number} edctAtchObjcNo 
         * @param {number} edctAtchSqn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFileCourse(dutyEdctCd: string, edctDsprNo: number, objcDsncVl: string, edctAtchObjcNo: number, edctAtchSqn: number, options?: any): AxiosPromise<File> {
            return localVarFp.downloadFileCourse(dutyEdctCd, edctDsprNo, objcDsncVl, edctAtchObjcNo, edctAtchSqn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} dutyEdctCd 
         * @param {number} edctDsprNo 
         * @param {number} edctDsprChpaNo 
         * @param {number} edctDsprLssoNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFileCourseReport(dutyEdctCd: string, edctDsprNo: number, edctDsprChpaNo: number, edctDsprLssoNo: number, options?: any): AxiosPromise<File> {
            return localVarFp.downloadFileCourseReport(dutyEdctCd, edctDsprNo, edctDsprChpaNo, edctDsprLssoNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} atchId 
         * @param {number} atchSqn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFileFaq(atchId: number, atchSqn: number, options?: any): AxiosPromise<File> {
            return localVarFp.downloadFileFaq(atchId, atchSqn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} atchId 
         * @param {number} atchSqn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFileQuestion(atchId: number, atchSqn: number, options?: any): AxiosPromise<File> {
            return localVarFp.downloadFileQuestion(atchId, atchSqn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} atchId 
         * @param {number} atchSqn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFileSocial(atchId: number, atchSqn: number, options?: any): AxiosPromise<File> {
            return localVarFp.downloadFileSocial(atchId, atchSqn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} spmyAplcDcd 
         * @param {number} sqc 
         * @param {number} atchSqn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadIdiEduCostFile(spmyAplcDcd: string, sqc: number, atchSqn: number, options?: any): AxiosPromise<File> {
            return localVarFp.downloadIdiEduCostFile(spmyAplcDcd, sqc, atchSqn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} onslDvlpSprnAplcDcd 
         * @param {number} sqc 
         * @param {number} atchSqn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadIdiExamCostFile(onslDvlpSprnAplcDcd: string, sqc: number, atchSqn: number, options?: any): AxiosPromise<File> {
            return localVarFp.downloadIdiExamCostFile(onslDvlpSprnAplcDcd, sqc, atchSqn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<File>} files 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnMultiFile(files: Array<File>, options?: any): AxiosPromise<Array<FileOutVo>> {
            return localVarFp.rgsnMultiFile(files, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnSingleFile(file: File, options?: any): AxiosPromise<FileOutVo> {
            return localVarFp.rgsnSingleFile(file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FileControllerApi - object-oriented interface
 * @export
 * @class FileControllerApi
 * @extends {BaseAPI}
 */
export class FileControllerApi extends BaseAPI {
    /**
     * 
     * @param {number} atchId 
     * @param {number} atchSqn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileControllerApi
     */
    public downloadFileCommunity(atchId: number, atchSqn: number, options?: RawAxiosRequestConfig) {
        return FileControllerApiFp(this.configuration).downloadFileCommunity(atchId, atchSqn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} dutyEdctCd 
     * @param {number} edctDsprNo 
     * @param {string} objcDsncVl 
     * @param {number} edctAtchObjcNo 
     * @param {number} edctAtchSqn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileControllerApi
     */
    public downloadFileCourse(dutyEdctCd: string, edctDsprNo: number, objcDsncVl: string, edctAtchObjcNo: number, edctAtchSqn: number, options?: RawAxiosRequestConfig) {
        return FileControllerApiFp(this.configuration).downloadFileCourse(dutyEdctCd, edctDsprNo, objcDsncVl, edctAtchObjcNo, edctAtchSqn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} dutyEdctCd 
     * @param {number} edctDsprNo 
     * @param {number} edctDsprChpaNo 
     * @param {number} edctDsprLssoNo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileControllerApi
     */
    public downloadFileCourseReport(dutyEdctCd: string, edctDsprNo: number, edctDsprChpaNo: number, edctDsprLssoNo: number, options?: RawAxiosRequestConfig) {
        return FileControllerApiFp(this.configuration).downloadFileCourseReport(dutyEdctCd, edctDsprNo, edctDsprChpaNo, edctDsprLssoNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} atchId 
     * @param {number} atchSqn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileControllerApi
     */
    public downloadFileFaq(atchId: number, atchSqn: number, options?: RawAxiosRequestConfig) {
        return FileControllerApiFp(this.configuration).downloadFileFaq(atchId, atchSqn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} atchId 
     * @param {number} atchSqn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileControllerApi
     */
    public downloadFileQuestion(atchId: number, atchSqn: number, options?: RawAxiosRequestConfig) {
        return FileControllerApiFp(this.configuration).downloadFileQuestion(atchId, atchSqn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} atchId 
     * @param {number} atchSqn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileControllerApi
     */
    public downloadFileSocial(atchId: number, atchSqn: number, options?: RawAxiosRequestConfig) {
        return FileControllerApiFp(this.configuration).downloadFileSocial(atchId, atchSqn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} spmyAplcDcd 
     * @param {number} sqc 
     * @param {number} atchSqn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileControllerApi
     */
    public downloadIdiEduCostFile(spmyAplcDcd: string, sqc: number, atchSqn: number, options?: RawAxiosRequestConfig) {
        return FileControllerApiFp(this.configuration).downloadIdiEduCostFile(spmyAplcDcd, sqc, atchSqn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} onslDvlpSprnAplcDcd 
     * @param {number} sqc 
     * @param {number} atchSqn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileControllerApi
     */
    public downloadIdiExamCostFile(onslDvlpSprnAplcDcd: string, sqc: number, atchSqn: number, options?: RawAxiosRequestConfig) {
        return FileControllerApiFp(this.configuration).downloadIdiExamCostFile(onslDvlpSprnAplcDcd, sqc, atchSqn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<File>} files 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileControllerApi
     */
    public rgsnMultiFile(files: Array<File>, options?: RawAxiosRequestConfig) {
        return FileControllerApiFp(this.configuration).rgsnMultiFile(files, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileControllerApi
     */
    public rgsnSingleFile(file: File, options?: RawAxiosRequestConfig) {
        return FileControllerApiFp(this.configuration).rgsnSingleFile(file, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * IdiEduCostControllerApi - axios parameter creator
 * @export
 */
export const IdiEduCostControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 자기개발 수강료/창업/재취업 지원금 신청 삭제 api
         * @summary 자기개발 수강료/창업/재취업 지원금 신청 삭제
         * @param {IdiEduCostInVo} idiEduCostInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delIdiEduCost: async (idiEduCostInVo: IdiEduCostInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idiEduCostInVo' is not null or undefined
            assertParamExists('delIdiEduCost', 'idiEduCostInVo', idiEduCostInVo)
            const localVarPath = `/v1/idi/edu/cost/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(idiEduCostInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 기관 리스트 api
         * @summary 기관 리스트
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqEducationInstitutionList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/idi/edu/cost/education/institution/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 자기개발 복지비 카드 페이징 리스트 api
         * @summary 자기개발 복지비 카드 페이징 리스트
         * @param {IdiCostCardPageInVo} idiCostCardPageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIdiCostCardPage: async (idiCostCardPageInVo: IdiCostCardPageInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idiCostCardPageInVo' is not null or undefined
            assertParamExists('inqIdiCostCardPage', 'idiCostCardPageInVo', idiCostCardPageInVo)
            const localVarPath = `/v1/idi/edu/cost/card/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(idiCostCardPageInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 학원수강료 승인 리스트 api
         * @summary 학원수강료 승인 리스트
         * @param {IdiEduCostAuthListInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIdiEduCostAuthList: async (arg0: IdiEduCostAuthListInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'arg0' is not null or undefined
            assertParamExists('inqIdiEduCostAuthList', 'arg0', arg0)
            const localVarPath = `/v1/idi/edu/cost/auth/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (arg0 !== undefined) {
                for (const [key, value] of Object.entries(arg0)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 자기개발 수강료 임시저장 조회 api
         * @summary 자기개발 수강료 임시저장 조회
         * @param {IdiEduCostDtlInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIdiEduCostDtl: async (arg0: IdiEduCostDtlInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'arg0' is not null or undefined
            assertParamExists('inqIdiEduCostDtl', 'arg0', arg0)
            const localVarPath = `/v1/idi/edu/cost/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (arg0 !== undefined) {
                for (const [key, value] of Object.entries(arg0)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 학원수강료 승인 리스트 api
         * @summary 학원수강료 메인 통계리스트
         * @param {IdiEduCostStatisticInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIdiEduCostStatisticList: async (arg0: IdiEduCostStatisticInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'arg0' is not null or undefined
            assertParamExists('inqIdiEduCostStatisticList', 'arg0', arg0)
            const localVarPath = `/v1/idi/edu/cost/statistic/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (arg0 !== undefined) {
                for (const [key, value] of Object.entries(arg0)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 시니어 여부 정보
         * @summary 시니어 여부 정보
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIdiEduCostUserInfo: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/idi/edu/cost/user/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 자기개발 수강료 정보 수정 api
         * @summary 자기개발 수강료 정보 수정
         * @param {IdiEduCostInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcIdiEduCost: async (inVo: IdiEduCostInVo, files?: Array<File>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inVo' is not null or undefined
            assertParamExists('mdfcIdiEduCost', 'inVo', inVo)
            const localVarPath = `/v1/idi/edu/cost/modify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (files) {
                files.forEach((element) => {
                  localVarFormParams.append('files', element as any);
                })
            }

    
            if (inVo !== undefined) { 
                localVarFormParams.append('inVo', new Blob([JSON.stringify(inVo)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 자기개발 수강료 등록 api
         * @summary 자기개발 수강료 등록
         * @param {IdiEduCostInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsIdiEduCost: async (inVo: IdiEduCostInVo, files?: Array<File>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inVo' is not null or undefined
            assertParamExists('rgsIdiEduCost', 'inVo', inVo)
            const localVarPath = `/v1/idi/edu/cost/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (files) {
                files.forEach((element) => {
                  localVarFormParams.append('files', element as any);
                })
            }

    
            if (inVo !== undefined) { 
                localVarFormParams.append('inVo', new Blob([JSON.stringify(inVo)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IdiEduCostControllerApi - functional programming interface
 * @export
 */
export const IdiEduCostControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IdiEduCostControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 자기개발 수강료/창업/재취업 지원금 신청 삭제 api
         * @summary 자기개발 수강료/창업/재취업 지원금 신청 삭제
         * @param {IdiEduCostInVo} idiEduCostInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delIdiEduCost(idiEduCostInVo: IdiEduCostInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delIdiEduCost(idiEduCostInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdiEduCostControllerApi.delIdiEduCost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 기관 리스트 api
         * @summary 기관 리스트
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqEducationInstitutionList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EduInsOutVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqEducationInstitutionList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdiEduCostControllerApi.inqEducationInstitutionList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 자기개발 복지비 카드 페이징 리스트 api
         * @summary 자기개발 복지비 카드 페이징 리스트
         * @param {IdiCostCardPageInVo} idiCostCardPageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqIdiCostCardPage(idiCostCardPageInVo: IdiCostCardPageInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageIdiCostCardOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqIdiCostCardPage(idiCostCardPageInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdiEduCostControllerApi.inqIdiCostCardPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 학원수강료 승인 리스트 api
         * @summary 학원수강료 승인 리스트
         * @param {IdiEduCostAuthListInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqIdiEduCostAuthList(arg0: IdiEduCostAuthListInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IdiEduCostAuthListOutVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqIdiEduCostAuthList(arg0, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdiEduCostControllerApi.inqIdiEduCostAuthList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 자기개발 수강료 임시저장 조회 api
         * @summary 자기개발 수강료 임시저장 조회
         * @param {IdiEduCostDtlInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqIdiEduCostDtl(arg0: IdiEduCostDtlInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdiEduCostOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqIdiEduCostDtl(arg0, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdiEduCostControllerApi.inqIdiEduCostDtl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 학원수강료 승인 리스트 api
         * @summary 학원수강료 메인 통계리스트
         * @param {IdiEduCostStatisticInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqIdiEduCostStatisticList(arg0: IdiEduCostStatisticInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IdiEduCostStatisticListOutVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqIdiEduCostStatisticList(arg0, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdiEduCostControllerApi.inqIdiEduCostStatisticList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 시니어 여부 정보
         * @summary 시니어 여부 정보
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqIdiEduCostUserInfo(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdiEduCostUserInfoOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqIdiEduCostUserInfo(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdiEduCostControllerApi.inqIdiEduCostUserInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 자기개발 수강료 정보 수정 api
         * @summary 자기개발 수강료 정보 수정
         * @param {IdiEduCostInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mdfcIdiEduCost(inVo: IdiEduCostInVo, files?: Array<File>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mdfcIdiEduCost(inVo, files, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdiEduCostControllerApi.mdfcIdiEduCost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 자기개발 수강료 등록 api
         * @summary 자기개발 수강료 등록
         * @param {IdiEduCostInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rgsIdiEduCost(inVo: IdiEduCostInVo, files?: Array<File>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rgsIdiEduCost(inVo, files, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdiEduCostControllerApi.rgsIdiEduCost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * IdiEduCostControllerApi - factory interface
 * @export
 */
export const IdiEduCostControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IdiEduCostControllerApiFp(configuration)
    return {
        /**
         * 자기개발 수강료/창업/재취업 지원금 신청 삭제 api
         * @summary 자기개발 수강료/창업/재취업 지원금 신청 삭제
         * @param {IdiEduCostInVo} idiEduCostInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delIdiEduCost(idiEduCostInVo: IdiEduCostInVo, options?: any): AxiosPromise<void> {
            return localVarFp.delIdiEduCost(idiEduCostInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 기관 리스트 api
         * @summary 기관 리스트
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqEducationInstitutionList(options?: any): AxiosPromise<Array<EduInsOutVo>> {
            return localVarFp.inqEducationInstitutionList(options).then((request) => request(axios, basePath));
        },
        /**
         * 자기개발 복지비 카드 페이징 리스트 api
         * @summary 자기개발 복지비 카드 페이징 리스트
         * @param {IdiCostCardPageInVo} idiCostCardPageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIdiCostCardPage(idiCostCardPageInVo: IdiCostCardPageInVo, options?: any): AxiosPromise<PageIdiCostCardOutVo> {
            return localVarFp.inqIdiCostCardPage(idiCostCardPageInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 학원수강료 승인 리스트 api
         * @summary 학원수강료 승인 리스트
         * @param {IdiEduCostAuthListInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIdiEduCostAuthList(arg0: IdiEduCostAuthListInVo, options?: any): AxiosPromise<Array<IdiEduCostAuthListOutVo>> {
            return localVarFp.inqIdiEduCostAuthList(arg0, options).then((request) => request(axios, basePath));
        },
        /**
         * 자기개발 수강료 임시저장 조회 api
         * @summary 자기개발 수강료 임시저장 조회
         * @param {IdiEduCostDtlInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIdiEduCostDtl(arg0: IdiEduCostDtlInVo, options?: any): AxiosPromise<IdiEduCostOutVo> {
            return localVarFp.inqIdiEduCostDtl(arg0, options).then((request) => request(axios, basePath));
        },
        /**
         * 학원수강료 승인 리스트 api
         * @summary 학원수강료 메인 통계리스트
         * @param {IdiEduCostStatisticInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIdiEduCostStatisticList(arg0: IdiEduCostStatisticInVo, options?: any): AxiosPromise<Array<IdiEduCostStatisticListOutVo>> {
            return localVarFp.inqIdiEduCostStatisticList(arg0, options).then((request) => request(axios, basePath));
        },
        /**
         * 시니어 여부 정보
         * @summary 시니어 여부 정보
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIdiEduCostUserInfo(options?: any): AxiosPromise<IdiEduCostUserInfoOutVo> {
            return localVarFp.inqIdiEduCostUserInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * 자기개발 수강료 정보 수정 api
         * @summary 자기개발 수강료 정보 수정
         * @param {IdiEduCostInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcIdiEduCost(inVo: IdiEduCostInVo, files?: Array<File>, options?: any): AxiosPromise<void> {
            return localVarFp.mdfcIdiEduCost(inVo, files, options).then((request) => request(axios, basePath));
        },
        /**
         * 자기개발 수강료 등록 api
         * @summary 자기개발 수강료 등록
         * @param {IdiEduCostInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsIdiEduCost(inVo: IdiEduCostInVo, files?: Array<File>, options?: any): AxiosPromise<void> {
            return localVarFp.rgsIdiEduCost(inVo, files, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IdiEduCostControllerApi - object-oriented interface
 * @export
 * @class IdiEduCostControllerApi
 * @extends {BaseAPI}
 */
export class IdiEduCostControllerApi extends BaseAPI {
    /**
     * 자기개발 수강료/창업/재취업 지원금 신청 삭제 api
     * @summary 자기개발 수강료/창업/재취업 지원금 신청 삭제
     * @param {IdiEduCostInVo} idiEduCostInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiEduCostControllerApi
     */
    public delIdiEduCost(idiEduCostInVo: IdiEduCostInVo, options?: RawAxiosRequestConfig) {
        return IdiEduCostControllerApiFp(this.configuration).delIdiEduCost(idiEduCostInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 기관 리스트 api
     * @summary 기관 리스트
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiEduCostControllerApi
     */
    public inqEducationInstitutionList(options?: RawAxiosRequestConfig) {
        return IdiEduCostControllerApiFp(this.configuration).inqEducationInstitutionList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 자기개발 복지비 카드 페이징 리스트 api
     * @summary 자기개발 복지비 카드 페이징 리스트
     * @param {IdiCostCardPageInVo} idiCostCardPageInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiEduCostControllerApi
     */
    public inqIdiCostCardPage(idiCostCardPageInVo: IdiCostCardPageInVo, options?: RawAxiosRequestConfig) {
        return IdiEduCostControllerApiFp(this.configuration).inqIdiCostCardPage(idiCostCardPageInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 학원수강료 승인 리스트 api
     * @summary 학원수강료 승인 리스트
     * @param {IdiEduCostAuthListInVo} arg0 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiEduCostControllerApi
     */
    public inqIdiEduCostAuthList(arg0: IdiEduCostAuthListInVo, options?: RawAxiosRequestConfig) {
        return IdiEduCostControllerApiFp(this.configuration).inqIdiEduCostAuthList(arg0, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 자기개발 수강료 임시저장 조회 api
     * @summary 자기개발 수강료 임시저장 조회
     * @param {IdiEduCostDtlInVo} arg0 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiEduCostControllerApi
     */
    public inqIdiEduCostDtl(arg0: IdiEduCostDtlInVo, options?: RawAxiosRequestConfig) {
        return IdiEduCostControllerApiFp(this.configuration).inqIdiEduCostDtl(arg0, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 학원수강료 승인 리스트 api
     * @summary 학원수강료 메인 통계리스트
     * @param {IdiEduCostStatisticInVo} arg0 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiEduCostControllerApi
     */
    public inqIdiEduCostStatisticList(arg0: IdiEduCostStatisticInVo, options?: RawAxiosRequestConfig) {
        return IdiEduCostControllerApiFp(this.configuration).inqIdiEduCostStatisticList(arg0, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 시니어 여부 정보
     * @summary 시니어 여부 정보
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiEduCostControllerApi
     */
    public inqIdiEduCostUserInfo(options?: RawAxiosRequestConfig) {
        return IdiEduCostControllerApiFp(this.configuration).inqIdiEduCostUserInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 자기개발 수강료 정보 수정 api
     * @summary 자기개발 수강료 정보 수정
     * @param {IdiEduCostInVo} inVo 
     * @param {Array<File>} [files] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiEduCostControllerApi
     */
    public mdfcIdiEduCost(inVo: IdiEduCostInVo, files?: Array<File>, options?: RawAxiosRequestConfig) {
        return IdiEduCostControllerApiFp(this.configuration).mdfcIdiEduCost(inVo, files, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 자기개발 수강료 등록 api
     * @summary 자기개발 수강료 등록
     * @param {IdiEduCostInVo} inVo 
     * @param {Array<File>} [files] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiEduCostControllerApi
     */
    public rgsIdiEduCost(inVo: IdiEduCostInVo, files?: Array<File>, options?: RawAxiosRequestConfig) {
        return IdiEduCostControllerApiFp(this.configuration).rgsIdiEduCost(inVo, files, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * IdiExamCostControllerApi - axios parameter creator
 * @export
 */
export const IdiExamCostControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 자기개발 시험응시료 지원신청 삭제 api
         * @summary 자기개발 시험응시료 지원신청 삭제
         * @param {IdiExamCostInVo} idiExamCostInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delIdiExamCost: async (idiExamCostInVo: IdiExamCostInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idiExamCostInVo' is not null or undefined
            assertParamExists('delIdiExamCost', 'idiExamCostInVo', idiExamCostInVo)
            const localVarPath = `/v1/idi/exam/cost/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(idiExamCostInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 시험수강료 승인 리스트 api
         * @summary 시험수강료 승인 리스트
         * @param {IdiExamCostAuthListInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIdiExamCostAuthList: async (arg0: IdiExamCostAuthListInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'arg0' is not null or undefined
            assertParamExists('inqIdiExamCostAuthList', 'arg0', arg0)
            const localVarPath = `/v1/idi/exam/cost/auth/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (arg0 !== undefined) {
                for (const [key, value] of Object.entries(arg0)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 자기개발 시험응시료 임시저장 조회 api
         * @summary 자기개발 시험응시료 임시저장 조회
         * @param {IdiExamCostDtlInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIdiExamCostDtl: async (arg0: IdiExamCostDtlInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'arg0' is not null or undefined
            assertParamExists('inqIdiExamCostDtl', 'arg0', arg0)
            const localVarPath = `/v1/idi/exam/cost/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (arg0 !== undefined) {
                for (const [key, value] of Object.entries(arg0)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 자기개발 수강료 정보 수정 api
         * @summary 자기개발 시험응시료 정보 수정
         * @param {IdiExamCostInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcIdiExamCost: async (inVo: IdiExamCostInVo, files?: Array<File>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inVo' is not null or undefined
            assertParamExists('mdfcIdiExamCost', 'inVo', inVo)
            const localVarPath = `/v1/idi/exam/cost/modify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (files) {
                files.forEach((element) => {
                  localVarFormParams.append('files', element as any);
                })
            }

    
            if (inVo !== undefined) { 
                localVarFormParams.append('inVo', new Blob([JSON.stringify(inVo)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 취득 자격증 중복 체크 api
         * @summary 취득 자격증 중복 체크
         * @param {IdiExamCostInVo} idiExamCostInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsCheckIdiExamCost: async (idiExamCostInVo: IdiExamCostInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idiExamCostInVo' is not null or undefined
            assertParamExists('rgsCheckIdiExamCost', 'idiExamCostInVo', idiExamCostInVo)
            const localVarPath = `/v1/idi/exam/cost/save/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(idiExamCostInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 자기개발 시험응시료 등록 api
         * @summary 자기개발 시험응시료 등록
         * @param {IdiExamCostInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsIdiExamCost: async (inVo: IdiExamCostInVo, files?: Array<File>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inVo' is not null or undefined
            assertParamExists('rgsIdiExamCost', 'inVo', inVo)
            const localVarPath = `/v1/idi/exam/cost/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (files) {
                files.forEach((element) => {
                  localVarFormParams.append('files', element as any);
                })
            }

    
            if (inVo !== undefined) { 
                localVarFormParams.append('inVo', new Blob([JSON.stringify(inVo)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IdiExamCostControllerApi - functional programming interface
 * @export
 */
export const IdiExamCostControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IdiExamCostControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 자기개발 시험응시료 지원신청 삭제 api
         * @summary 자기개발 시험응시료 지원신청 삭제
         * @param {IdiExamCostInVo} idiExamCostInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delIdiExamCost(idiExamCostInVo: IdiExamCostInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delIdiExamCost(idiExamCostInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdiExamCostControllerApi.delIdiExamCost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 시험수강료 승인 리스트 api
         * @summary 시험수강료 승인 리스트
         * @param {IdiExamCostAuthListInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqIdiExamCostAuthList(arg0: IdiExamCostAuthListInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IdiExamCostAuthListOutVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqIdiExamCostAuthList(arg0, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdiExamCostControllerApi.inqIdiExamCostAuthList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 자기개발 시험응시료 임시저장 조회 api
         * @summary 자기개발 시험응시료 임시저장 조회
         * @param {IdiExamCostDtlInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqIdiExamCostDtl(arg0: IdiExamCostDtlInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdiExamCostOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqIdiExamCostDtl(arg0, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdiExamCostControllerApi.inqIdiExamCostDtl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 자기개발 수강료 정보 수정 api
         * @summary 자기개발 시험응시료 정보 수정
         * @param {IdiExamCostInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mdfcIdiExamCost(inVo: IdiExamCostInVo, files?: Array<File>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mdfcIdiExamCost(inVo, files, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdiExamCostControllerApi.mdfcIdiExamCost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 취득 자격증 중복 체크 api
         * @summary 취득 자격증 중복 체크
         * @param {IdiExamCostInVo} idiExamCostInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rgsCheckIdiExamCost(idiExamCostInVo: IdiExamCostInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdiExamCostOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rgsCheckIdiExamCost(idiExamCostInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdiExamCostControllerApi.rgsCheckIdiExamCost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 자기개발 시험응시료 등록 api
         * @summary 자기개발 시험응시료 등록
         * @param {IdiExamCostInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rgsIdiExamCost(inVo: IdiExamCostInVo, files?: Array<File>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rgsIdiExamCost(inVo, files, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdiExamCostControllerApi.rgsIdiExamCost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * IdiExamCostControllerApi - factory interface
 * @export
 */
export const IdiExamCostControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IdiExamCostControllerApiFp(configuration)
    return {
        /**
         * 자기개발 시험응시료 지원신청 삭제 api
         * @summary 자기개발 시험응시료 지원신청 삭제
         * @param {IdiExamCostInVo} idiExamCostInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delIdiExamCost(idiExamCostInVo: IdiExamCostInVo, options?: any): AxiosPromise<void> {
            return localVarFp.delIdiExamCost(idiExamCostInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 시험수강료 승인 리스트 api
         * @summary 시험수강료 승인 리스트
         * @param {IdiExamCostAuthListInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIdiExamCostAuthList(arg0: IdiExamCostAuthListInVo, options?: any): AxiosPromise<Array<IdiExamCostAuthListOutVo>> {
            return localVarFp.inqIdiExamCostAuthList(arg0, options).then((request) => request(axios, basePath));
        },
        /**
         * 자기개발 시험응시료 임시저장 조회 api
         * @summary 자기개발 시험응시료 임시저장 조회
         * @param {IdiExamCostDtlInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIdiExamCostDtl(arg0: IdiExamCostDtlInVo, options?: any): AxiosPromise<IdiExamCostOutVo> {
            return localVarFp.inqIdiExamCostDtl(arg0, options).then((request) => request(axios, basePath));
        },
        /**
         * 자기개발 수강료 정보 수정 api
         * @summary 자기개발 시험응시료 정보 수정
         * @param {IdiExamCostInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcIdiExamCost(inVo: IdiExamCostInVo, files?: Array<File>, options?: any): AxiosPromise<void> {
            return localVarFp.mdfcIdiExamCost(inVo, files, options).then((request) => request(axios, basePath));
        },
        /**
         * 취득 자격증 중복 체크 api
         * @summary 취득 자격증 중복 체크
         * @param {IdiExamCostInVo} idiExamCostInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsCheckIdiExamCost(idiExamCostInVo: IdiExamCostInVo, options?: any): AxiosPromise<IdiExamCostOutVo> {
            return localVarFp.rgsCheckIdiExamCost(idiExamCostInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 자기개발 시험응시료 등록 api
         * @summary 자기개발 시험응시료 등록
         * @param {IdiExamCostInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsIdiExamCost(inVo: IdiExamCostInVo, files?: Array<File>, options?: any): AxiosPromise<void> {
            return localVarFp.rgsIdiExamCost(inVo, files, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IdiExamCostControllerApi - object-oriented interface
 * @export
 * @class IdiExamCostControllerApi
 * @extends {BaseAPI}
 */
export class IdiExamCostControllerApi extends BaseAPI {
    /**
     * 자기개발 시험응시료 지원신청 삭제 api
     * @summary 자기개발 시험응시료 지원신청 삭제
     * @param {IdiExamCostInVo} idiExamCostInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiExamCostControllerApi
     */
    public delIdiExamCost(idiExamCostInVo: IdiExamCostInVo, options?: RawAxiosRequestConfig) {
        return IdiExamCostControllerApiFp(this.configuration).delIdiExamCost(idiExamCostInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 시험수강료 승인 리스트 api
     * @summary 시험수강료 승인 리스트
     * @param {IdiExamCostAuthListInVo} arg0 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiExamCostControllerApi
     */
    public inqIdiExamCostAuthList(arg0: IdiExamCostAuthListInVo, options?: RawAxiosRequestConfig) {
        return IdiExamCostControllerApiFp(this.configuration).inqIdiExamCostAuthList(arg0, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 자기개발 시험응시료 임시저장 조회 api
     * @summary 자기개발 시험응시료 임시저장 조회
     * @param {IdiExamCostDtlInVo} arg0 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiExamCostControllerApi
     */
    public inqIdiExamCostDtl(arg0: IdiExamCostDtlInVo, options?: RawAxiosRequestConfig) {
        return IdiExamCostControllerApiFp(this.configuration).inqIdiExamCostDtl(arg0, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 자기개발 수강료 정보 수정 api
     * @summary 자기개발 시험응시료 정보 수정
     * @param {IdiExamCostInVo} inVo 
     * @param {Array<File>} [files] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiExamCostControllerApi
     */
    public mdfcIdiExamCost(inVo: IdiExamCostInVo, files?: Array<File>, options?: RawAxiosRequestConfig) {
        return IdiExamCostControllerApiFp(this.configuration).mdfcIdiExamCost(inVo, files, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 취득 자격증 중복 체크 api
     * @summary 취득 자격증 중복 체크
     * @param {IdiExamCostInVo} idiExamCostInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiExamCostControllerApi
     */
    public rgsCheckIdiExamCost(idiExamCostInVo: IdiExamCostInVo, options?: RawAxiosRequestConfig) {
        return IdiExamCostControllerApiFp(this.configuration).rgsCheckIdiExamCost(idiExamCostInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 자기개발 시험응시료 등록 api
     * @summary 자기개발 시험응시료 등록
     * @param {IdiExamCostInVo} inVo 
     * @param {Array<File>} [files] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiExamCostControllerApi
     */
    public rgsIdiExamCost(inVo: IdiExamCostInVo, files?: Array<File>, options?: RawAxiosRequestConfig) {
        return IdiExamCostControllerApiFp(this.configuration).rgsIdiExamCost(inVo, files, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * IdiLicenseControllerApi - axios parameter creator
 * @export
 */
export const IdiLicenseControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 자기개발 자격증 연수 페이징 리스트 api
         * @summary 자기개발 자격증 연수 페이징 리스트
         * @param {IdiLicenseCoursePageInVo} idiLicenseCoursePageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIdiLicenseCoursePage: async (idiLicenseCoursePageInVo: IdiLicenseCoursePageInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idiLicenseCoursePageInVo' is not null or undefined
            assertParamExists('inqIdiLicenseCoursePage', 'idiLicenseCoursePageInVo', idiLicenseCoursePageInVo)
            const localVarPath = `/v1/idi/license/course/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(idiLicenseCoursePageInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 자기개발 인터페이스 자격증  페이징 리스트 api
         * @summary 자기개발 인터페이스 자격증 페이징 리스트
         * @param {IdiLicenseInterfacePageInVo} idiLicenseInterfacePageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIdiLicenseInterfacePage: async (idiLicenseInterfacePageInVo: IdiLicenseInterfacePageInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idiLicenseInterfacePageInVo' is not null or undefined
            assertParamExists('inqIdiLicenseInterfacePage', 'idiLicenseInterfacePageInVo', idiLicenseInterfacePageInVo)
            const localVarPath = `/v1/idi/license/interface/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(idiLicenseInterfacePageInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 자기 개발취득자격증관리 페이징 리스트 api
         * @summary 자기개발 취득자격증관리 페이징 리스트
         * @param {IdiLicensePageInVo} idiLicensePageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIdiLicensePage: async (idiLicensePageInVo: IdiLicensePageInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idiLicensePageInVo' is not null or undefined
            assertParamExists('inqIdiLicensePage', 'idiLicensePageInVo', idiLicensePageInVo)
            const localVarPath = `/v1/idi/license/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(idiLicensePageInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IdiLicenseControllerApi - functional programming interface
 * @export
 */
export const IdiLicenseControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IdiLicenseControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 자기개발 자격증 연수 페이징 리스트 api
         * @summary 자기개발 자격증 연수 페이징 리스트
         * @param {IdiLicenseCoursePageInVo} idiLicenseCoursePageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqIdiLicenseCoursePage(idiLicenseCoursePageInVo: IdiLicenseCoursePageInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageIdiLicenseCourseOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqIdiLicenseCoursePage(idiLicenseCoursePageInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdiLicenseControllerApi.inqIdiLicenseCoursePage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 자기개발 인터페이스 자격증  페이징 리스트 api
         * @summary 자기개발 인터페이스 자격증 페이징 리스트
         * @param {IdiLicenseInterfacePageInVo} idiLicenseInterfacePageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqIdiLicenseInterfacePage(idiLicenseInterfacePageInVo: IdiLicenseInterfacePageInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageIdiLicenseInterfaceOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqIdiLicenseInterfacePage(idiLicenseInterfacePageInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdiLicenseControllerApi.inqIdiLicenseInterfacePage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 자기 개발취득자격증관리 페이징 리스트 api
         * @summary 자기개발 취득자격증관리 페이징 리스트
         * @param {IdiLicensePageInVo} idiLicensePageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqIdiLicensePage(idiLicensePageInVo: IdiLicensePageInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageIdiLicenseOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqIdiLicensePage(idiLicensePageInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdiLicenseControllerApi.inqIdiLicensePage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * IdiLicenseControllerApi - factory interface
 * @export
 */
export const IdiLicenseControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IdiLicenseControllerApiFp(configuration)
    return {
        /**
         * 자기개발 자격증 연수 페이징 리스트 api
         * @summary 자기개발 자격증 연수 페이징 리스트
         * @param {IdiLicenseCoursePageInVo} idiLicenseCoursePageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIdiLicenseCoursePage(idiLicenseCoursePageInVo: IdiLicenseCoursePageInVo, options?: any): AxiosPromise<PageIdiLicenseCourseOutVo> {
            return localVarFp.inqIdiLicenseCoursePage(idiLicenseCoursePageInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 자기개발 인터페이스 자격증  페이징 리스트 api
         * @summary 자기개발 인터페이스 자격증 페이징 리스트
         * @param {IdiLicenseInterfacePageInVo} idiLicenseInterfacePageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIdiLicenseInterfacePage(idiLicenseInterfacePageInVo: IdiLicenseInterfacePageInVo, options?: any): AxiosPromise<PageIdiLicenseInterfaceOutVo> {
            return localVarFp.inqIdiLicenseInterfacePage(idiLicenseInterfacePageInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 자기 개발취득자격증관리 페이징 리스트 api
         * @summary 자기개발 취득자격증관리 페이징 리스트
         * @param {IdiLicensePageInVo} idiLicensePageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIdiLicensePage(idiLicensePageInVo: IdiLicensePageInVo, options?: any): AxiosPromise<PageIdiLicenseOutVo> {
            return localVarFp.inqIdiLicensePage(idiLicensePageInVo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IdiLicenseControllerApi - object-oriented interface
 * @export
 * @class IdiLicenseControllerApi
 * @extends {BaseAPI}
 */
export class IdiLicenseControllerApi extends BaseAPI {
    /**
     * 자기개발 자격증 연수 페이징 리스트 api
     * @summary 자기개발 자격증 연수 페이징 리스트
     * @param {IdiLicenseCoursePageInVo} idiLicenseCoursePageInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiLicenseControllerApi
     */
    public inqIdiLicenseCoursePage(idiLicenseCoursePageInVo: IdiLicenseCoursePageInVo, options?: RawAxiosRequestConfig) {
        return IdiLicenseControllerApiFp(this.configuration).inqIdiLicenseCoursePage(idiLicenseCoursePageInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 자기개발 인터페이스 자격증  페이징 리스트 api
     * @summary 자기개발 인터페이스 자격증 페이징 리스트
     * @param {IdiLicenseInterfacePageInVo} idiLicenseInterfacePageInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiLicenseControllerApi
     */
    public inqIdiLicenseInterfacePage(idiLicenseInterfacePageInVo: IdiLicenseInterfacePageInVo, options?: RawAxiosRequestConfig) {
        return IdiLicenseControllerApiFp(this.configuration).inqIdiLicenseInterfacePage(idiLicenseInterfacePageInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 자기 개발취득자격증관리 페이징 리스트 api
     * @summary 자기개발 취득자격증관리 페이징 리스트
     * @param {IdiLicensePageInVo} idiLicensePageInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiLicenseControllerApi
     */
    public inqIdiLicensePage(idiLicensePageInVo: IdiLicensePageInVo, options?: RawAxiosRequestConfig) {
        return IdiLicenseControllerApiFp(this.configuration).inqIdiLicensePage(idiLicensePageInVo, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * IdiLicenseHistoryControllerApi - axios parameter creator
 * @export
 */
export const IdiLicenseHistoryControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 자기 자격증취득내역관리 페이징 리스트 api
         * @summary 자기개발 자격증취득내역관리 페이징 리스트
         * @param {IdiLicenseHistoryInVo} idiLicenseHistoryInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIdiLicenseHistoryPage: async (idiLicenseHistoryInVo: IdiLicenseHistoryInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idiLicenseHistoryInVo' is not null or undefined
            assertParamExists('inqIdiLicenseHistoryPage', 'idiLicenseHistoryInVo', idiLicenseHistoryInVo)
            const localVarPath = `/v1/idi/license/history/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(idiLicenseHistoryInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IdiLicenseHistoryControllerApi - functional programming interface
 * @export
 */
export const IdiLicenseHistoryControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IdiLicenseHistoryControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 자기 자격증취득내역관리 페이징 리스트 api
         * @summary 자기개발 자격증취득내역관리 페이징 리스트
         * @param {IdiLicenseHistoryInVo} idiLicenseHistoryInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqIdiLicenseHistoryPage(idiLicenseHistoryInVo: IdiLicenseHistoryInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageIdiLicenseHistoryOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqIdiLicenseHistoryPage(idiLicenseHistoryInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdiLicenseHistoryControllerApi.inqIdiLicenseHistoryPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * IdiLicenseHistoryControllerApi - factory interface
 * @export
 */
export const IdiLicenseHistoryControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IdiLicenseHistoryControllerApiFp(configuration)
    return {
        /**
         * 자기 자격증취득내역관리 페이징 리스트 api
         * @summary 자기개발 자격증취득내역관리 페이징 리스트
         * @param {IdiLicenseHistoryInVo} idiLicenseHistoryInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIdiLicenseHistoryPage(idiLicenseHistoryInVo: IdiLicenseHistoryInVo, options?: any): AxiosPromise<PageIdiLicenseHistoryOutVo> {
            return localVarFp.inqIdiLicenseHistoryPage(idiLicenseHistoryInVo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IdiLicenseHistoryControllerApi - object-oriented interface
 * @export
 * @class IdiLicenseHistoryControllerApi
 * @extends {BaseAPI}
 */
export class IdiLicenseHistoryControllerApi extends BaseAPI {
    /**
     * 자기 자격증취득내역관리 페이징 리스트 api
     * @summary 자기개발 자격증취득내역관리 페이징 리스트
     * @param {IdiLicenseHistoryInVo} idiLicenseHistoryInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiLicenseHistoryControllerApi
     */
    public inqIdiLicenseHistoryPage(idiLicenseHistoryInVo: IdiLicenseHistoryInVo, options?: RawAxiosRequestConfig) {
        return IdiLicenseHistoryControllerApiFp(this.configuration).inqIdiLicenseHistoryPage(idiLicenseHistoryInVo, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * IdiLicenseSupplyControllerApi - axios parameter creator
 * @export
 */
export const IdiLicenseSupplyControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 자기개발 자격증취득지원관리 과정 리스트
         * @summary 자기개발 자격증취득지원관리 과정 리스트
         * @param {IdiLicenseSupplyPageInVo} idiLicenseSupplyPageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIdiLicenseSupplyCoursePage: async (idiLicenseSupplyPageInVo: IdiLicenseSupplyPageInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idiLicenseSupplyPageInVo' is not null or undefined
            assertParamExists('inqIdiLicenseSupplyCoursePage', 'idiLicenseSupplyPageInVo', idiLicenseSupplyPageInVo)
            const localVarPath = `/v1/idi/license/supply/course`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(idiLicenseSupplyPageInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 자기 자격증취득지원관리 페이징 리스트 api
         * @summary 자기개발 자격증취득지원관리 페이징 리스트
         * @param {IdiLicenseSupplyPageInVo} idiLicenseSupplyPageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIdiLicenseSupplyPage: async (idiLicenseSupplyPageInVo: IdiLicenseSupplyPageInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idiLicenseSupplyPageInVo' is not null or undefined
            assertParamExists('inqIdiLicenseSupplyPage', 'idiLicenseSupplyPageInVo', idiLicenseSupplyPageInVo)
            const localVarPath = `/v1/idi/license/supply/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(idiLicenseSupplyPageInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IdiLicenseSupplyControllerApi - functional programming interface
 * @export
 */
export const IdiLicenseSupplyControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IdiLicenseSupplyControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 자기개발 자격증취득지원관리 과정 리스트
         * @summary 자기개발 자격증취득지원관리 과정 리스트
         * @param {IdiLicenseSupplyPageInVo} idiLicenseSupplyPageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqIdiLicenseSupplyCoursePage(idiLicenseSupplyPageInVo: IdiLicenseSupplyPageInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageIdiLicenseSupplyOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqIdiLicenseSupplyCoursePage(idiLicenseSupplyPageInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdiLicenseSupplyControllerApi.inqIdiLicenseSupplyCoursePage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 자기 자격증취득지원관리 페이징 리스트 api
         * @summary 자기개발 자격증취득지원관리 페이징 리스트
         * @param {IdiLicenseSupplyPageInVo} idiLicenseSupplyPageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqIdiLicenseSupplyPage(idiLicenseSupplyPageInVo: IdiLicenseSupplyPageInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageIdiLicenseSupplyOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqIdiLicenseSupplyPage(idiLicenseSupplyPageInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdiLicenseSupplyControllerApi.inqIdiLicenseSupplyPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * IdiLicenseSupplyControllerApi - factory interface
 * @export
 */
export const IdiLicenseSupplyControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IdiLicenseSupplyControllerApiFp(configuration)
    return {
        /**
         * 자기개발 자격증취득지원관리 과정 리스트
         * @summary 자기개발 자격증취득지원관리 과정 리스트
         * @param {IdiLicenseSupplyPageInVo} idiLicenseSupplyPageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIdiLicenseSupplyCoursePage(idiLicenseSupplyPageInVo: IdiLicenseSupplyPageInVo, options?: any): AxiosPromise<PageIdiLicenseSupplyOutVo> {
            return localVarFp.inqIdiLicenseSupplyCoursePage(idiLicenseSupplyPageInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 자기 자격증취득지원관리 페이징 리스트 api
         * @summary 자기개발 자격증취득지원관리 페이징 리스트
         * @param {IdiLicenseSupplyPageInVo} idiLicenseSupplyPageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIdiLicenseSupplyPage(idiLicenseSupplyPageInVo: IdiLicenseSupplyPageInVo, options?: any): AxiosPromise<PageIdiLicenseSupplyOutVo> {
            return localVarFp.inqIdiLicenseSupplyPage(idiLicenseSupplyPageInVo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IdiLicenseSupplyControllerApi - object-oriented interface
 * @export
 * @class IdiLicenseSupplyControllerApi
 * @extends {BaseAPI}
 */
export class IdiLicenseSupplyControllerApi extends BaseAPI {
    /**
     * 자기개발 자격증취득지원관리 과정 리스트
     * @summary 자기개발 자격증취득지원관리 과정 리스트
     * @param {IdiLicenseSupplyPageInVo} idiLicenseSupplyPageInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiLicenseSupplyControllerApi
     */
    public inqIdiLicenseSupplyCoursePage(idiLicenseSupplyPageInVo: IdiLicenseSupplyPageInVo, options?: RawAxiosRequestConfig) {
        return IdiLicenseSupplyControllerApiFp(this.configuration).inqIdiLicenseSupplyCoursePage(idiLicenseSupplyPageInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 자기 자격증취득지원관리 페이징 리스트 api
     * @summary 자기개발 자격증취득지원관리 페이징 리스트
     * @param {IdiLicenseSupplyPageInVo} idiLicenseSupplyPageInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiLicenseSupplyControllerApi
     */
    public inqIdiLicenseSupplyPage(idiLicenseSupplyPageInVo: IdiLicenseSupplyPageInVo, options?: RawAxiosRequestConfig) {
        return IdiLicenseSupplyControllerApiFp(this.configuration).inqIdiLicenseSupplyPage(idiLicenseSupplyPageInVo, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * IdiMileageControllerApi - axios parameter creator
 * @export
 */
export const IdiMileageControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 상품권 신청 api
         * @summary 상품권 신청 삭제
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delIdiMileageGiftRequest: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('delIdiMileageGiftRequest', 'body', body)
            const localVarPath = `/v1/idi/mileage/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 마이페이지 마일리지 취득(기타) 페이징 리스트 api
         * @summary 마이페이지 마일리지(메인) 취득(기타) 페이징 리스트
         * @param {IdiMileageEtcPageInVo} idiMileageEtcPageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIdiMileageEtcPage: async (idiMileageEtcPageInVo: IdiMileageEtcPageInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idiMileageEtcPageInVo' is not null or undefined
            assertParamExists('inqIdiMileageEtcPage', 'idiMileageEtcPageInVo', idiMileageEtcPageInVo)
            const localVarPath = `/v1/idi/mileage/etc/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(idiMileageEtcPageInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 자기개발 보상구분에 따른 상품 리스트 api
         * @summary 자기개발 보상구분에 따른 상품 리스트
         * @param {IdiMileageGiftListInVo} idiMileageGiftListInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIdiMileageGiftList: async (idiMileageGiftListInVo: IdiMileageGiftListInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idiMileageGiftListInVo' is not null or undefined
            assertParamExists('inqIdiMileageGiftList', 'idiMileageGiftListInVo', idiMileageGiftListInVo)
            const localVarPath = `/v1/idi/mileage/gift/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(idiMileageGiftListInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 자기개발 상품권관리 페이징 리스트 api
         * @summary 자기개발 상품권관리 페이징 리스트
         * @param {IdiMileageGiftPageInVo} idiMileageGiftPageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIdiMileageGiftPage: async (idiMileageGiftPageInVo: IdiMileageGiftPageInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idiMileageGiftPageInVo' is not null or undefined
            assertParamExists('inqIdiMileageGiftPage', 'idiMileageGiftPageInVo', idiMileageGiftPageInVo)
            const localVarPath = `/v1/idi/mileage/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(idiMileageGiftPageInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 마이페이지 마일리지 취득(학습) 페이징 리스트 api
         * @summary 마이페이지 마일리지(메인) 취득(학습) 페이징 리스트
         * @param {IdiMileageLearningPageInVo} idiMileageLearningPageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIdiMileageLearningPage: async (idiMileageLearningPageInVo: IdiMileageLearningPageInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idiMileageLearningPageInVo' is not null or undefined
            assertParamExists('inqIdiMileageLearningPage', 'idiMileageLearningPageInVo', idiMileageLearningPageInVo)
            const localVarPath = `/v1/idi/mileage/learning/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(idiMileageLearningPageInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 마이페이지 마일리지 취득(자격증) 페이징 리스트 api
         * @summary 마이페이지 마일리지(메인) 취득(자격증) 페이징 리스트
         * @param {IdiMileageLicensePageInVo} idiMileageLicensePageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIdiMileageLicensePage: async (idiMileageLicensePageInVo: IdiMileageLicensePageInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idiMileageLicensePageInVo' is not null or undefined
            assertParamExists('inqIdiMileageLicensePage', 'idiMileageLicensePageInVo', idiMileageLicensePageInVo)
            const localVarPath = `/v1/idi/mileage/license/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(idiMileageLicensePageInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 마일리지 메인 차트 마일리지 데이터 조회
         * @summary 마일리지 메인 차트 마일리지 데이터 조회
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIdiMyMileageChartTotal: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('inqIdiMyMileageChartTotal', 'body', body)
            const localVarPath = `/v1/idi/mileage/my/chart/total`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 마이페이지 마일리지 신청내역 페이징 리스트 api
         * @summary 마이페이지 마일리지 신청내역 페이징 리스트
         * @param {IdiMileageRequestPageInVo} idiMileageRequestPageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIdiMyMileageRequestPage: async (idiMileageRequestPageInVo: IdiMileageRequestPageInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idiMileageRequestPageInVo' is not null or undefined
            assertParamExists('inqIdiMyMileageRequestPage', 'idiMileageRequestPageInVo', idiMileageRequestPageInVo)
            const localVarPath = `/v1/idi/mileage/request/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(idiMileageRequestPageInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 나의 누적 마일리지 조회
         * @summary 나의 누적 마일리지 조회
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIdiMyMileageTotal: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('inqIdiMyMileageTotal', 'body', body)
            const localVarPath = `/v1/idi/mileage/my/total`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 자기개발 개인별 마일리지 신청 api
         * @summary 자기개발 개인별 마일리지 신청
         * @param {IdiMileageGiftRequestInVo} idiMileageGiftRequestInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsIdiMileageGiftRequest: async (idiMileageGiftRequestInVo: IdiMileageGiftRequestInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idiMileageGiftRequestInVo' is not null or undefined
            assertParamExists('rgsIdiMileageGiftRequest', 'idiMileageGiftRequestInVo', idiMileageGiftRequestInVo)
            const localVarPath = `/v1/idi/mileage/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(idiMileageGiftRequestInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IdiMileageControllerApi - functional programming interface
 * @export
 */
export const IdiMileageControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IdiMileageControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 상품권 신청 api
         * @summary 상품권 신청 삭제
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delIdiMileageGiftRequest(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delIdiMileageGiftRequest(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdiMileageControllerApi.delIdiMileageGiftRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 마이페이지 마일리지 취득(기타) 페이징 리스트 api
         * @summary 마이페이지 마일리지(메인) 취득(기타) 페이징 리스트
         * @param {IdiMileageEtcPageInVo} idiMileageEtcPageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqIdiMileageEtcPage(idiMileageEtcPageInVo: IdiMileageEtcPageInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageIdiMileageEtcOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqIdiMileageEtcPage(idiMileageEtcPageInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdiMileageControllerApi.inqIdiMileageEtcPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 자기개발 보상구분에 따른 상품 리스트 api
         * @summary 자기개발 보상구분에 따른 상품 리스트
         * @param {IdiMileageGiftListInVo} idiMileageGiftListInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqIdiMileageGiftList(idiMileageGiftListInVo: IdiMileageGiftListInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IdiMileageGiftListOutVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqIdiMileageGiftList(idiMileageGiftListInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdiMileageControllerApi.inqIdiMileageGiftList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 자기개발 상품권관리 페이징 리스트 api
         * @summary 자기개발 상품권관리 페이징 리스트
         * @param {IdiMileageGiftPageInVo} idiMileageGiftPageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqIdiMileageGiftPage(idiMileageGiftPageInVo: IdiMileageGiftPageInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IdiMileageGiftOutVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqIdiMileageGiftPage(idiMileageGiftPageInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdiMileageControllerApi.inqIdiMileageGiftPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 마이페이지 마일리지 취득(학습) 페이징 리스트 api
         * @summary 마이페이지 마일리지(메인) 취득(학습) 페이징 리스트
         * @param {IdiMileageLearningPageInVo} idiMileageLearningPageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqIdiMileageLearningPage(idiMileageLearningPageInVo: IdiMileageLearningPageInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageIdiMileageLearningOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqIdiMileageLearningPage(idiMileageLearningPageInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdiMileageControllerApi.inqIdiMileageLearningPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 마이페이지 마일리지 취득(자격증) 페이징 리스트 api
         * @summary 마이페이지 마일리지(메인) 취득(자격증) 페이징 리스트
         * @param {IdiMileageLicensePageInVo} idiMileageLicensePageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqIdiMileageLicensePage(idiMileageLicensePageInVo: IdiMileageLicensePageInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageIdiMileageLicenseOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqIdiMileageLicensePage(idiMileageLicensePageInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdiMileageControllerApi.inqIdiMileageLicensePage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 마일리지 메인 차트 마일리지 데이터 조회
         * @summary 마일리지 메인 차트 마일리지 데이터 조회
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqIdiMyMileageChartTotal(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdiMileageMyChartTotalOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqIdiMyMileageChartTotal(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdiMileageControllerApi.inqIdiMyMileageChartTotal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 마이페이지 마일리지 신청내역 페이징 리스트 api
         * @summary 마이페이지 마일리지 신청내역 페이징 리스트
         * @param {IdiMileageRequestPageInVo} idiMileageRequestPageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqIdiMyMileageRequestPage(idiMileageRequestPageInVo: IdiMileageRequestPageInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageIdiMileageRequestOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqIdiMyMileageRequestPage(idiMileageRequestPageInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdiMileageControllerApi.inqIdiMyMileageRequestPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 나의 누적 마일리지 조회
         * @summary 나의 누적 마일리지 조회
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqIdiMyMileageTotal(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdiMileageMyTotalOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqIdiMyMileageTotal(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdiMileageControllerApi.inqIdiMyMileageTotal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 자기개발 개인별 마일리지 신청 api
         * @summary 자기개발 개인별 마일리지 신청
         * @param {IdiMileageGiftRequestInVo} idiMileageGiftRequestInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rgsIdiMileageGiftRequest(idiMileageGiftRequestInVo: IdiMileageGiftRequestInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rgsIdiMileageGiftRequest(idiMileageGiftRequestInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdiMileageControllerApi.rgsIdiMileageGiftRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * IdiMileageControllerApi - factory interface
 * @export
 */
export const IdiMileageControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IdiMileageControllerApiFp(configuration)
    return {
        /**
         * 상품권 신청 api
         * @summary 상품권 신청 삭제
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delIdiMileageGiftRequest(body: object, options?: any): AxiosPromise<void> {
            return localVarFp.delIdiMileageGiftRequest(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 마이페이지 마일리지 취득(기타) 페이징 리스트 api
         * @summary 마이페이지 마일리지(메인) 취득(기타) 페이징 리스트
         * @param {IdiMileageEtcPageInVo} idiMileageEtcPageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIdiMileageEtcPage(idiMileageEtcPageInVo: IdiMileageEtcPageInVo, options?: any): AxiosPromise<PageIdiMileageEtcOutVo> {
            return localVarFp.inqIdiMileageEtcPage(idiMileageEtcPageInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 자기개발 보상구분에 따른 상품 리스트 api
         * @summary 자기개발 보상구분에 따른 상품 리스트
         * @param {IdiMileageGiftListInVo} idiMileageGiftListInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIdiMileageGiftList(idiMileageGiftListInVo: IdiMileageGiftListInVo, options?: any): AxiosPromise<Array<IdiMileageGiftListOutVo>> {
            return localVarFp.inqIdiMileageGiftList(idiMileageGiftListInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 자기개발 상품권관리 페이징 리스트 api
         * @summary 자기개발 상품권관리 페이징 리스트
         * @param {IdiMileageGiftPageInVo} idiMileageGiftPageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIdiMileageGiftPage(idiMileageGiftPageInVo: IdiMileageGiftPageInVo, options?: any): AxiosPromise<Array<IdiMileageGiftOutVo>> {
            return localVarFp.inqIdiMileageGiftPage(idiMileageGiftPageInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 마이페이지 마일리지 취득(학습) 페이징 리스트 api
         * @summary 마이페이지 마일리지(메인) 취득(학습) 페이징 리스트
         * @param {IdiMileageLearningPageInVo} idiMileageLearningPageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIdiMileageLearningPage(idiMileageLearningPageInVo: IdiMileageLearningPageInVo, options?: any): AxiosPromise<PageIdiMileageLearningOutVo> {
            return localVarFp.inqIdiMileageLearningPage(idiMileageLearningPageInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 마이페이지 마일리지 취득(자격증) 페이징 리스트 api
         * @summary 마이페이지 마일리지(메인) 취득(자격증) 페이징 리스트
         * @param {IdiMileageLicensePageInVo} idiMileageLicensePageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIdiMileageLicensePage(idiMileageLicensePageInVo: IdiMileageLicensePageInVo, options?: any): AxiosPromise<PageIdiMileageLicenseOutVo> {
            return localVarFp.inqIdiMileageLicensePage(idiMileageLicensePageInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 마일리지 메인 차트 마일리지 데이터 조회
         * @summary 마일리지 메인 차트 마일리지 데이터 조회
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIdiMyMileageChartTotal(body: object, options?: any): AxiosPromise<IdiMileageMyChartTotalOutVo> {
            return localVarFp.inqIdiMyMileageChartTotal(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 마이페이지 마일리지 신청내역 페이징 리스트 api
         * @summary 마이페이지 마일리지 신청내역 페이징 리스트
         * @param {IdiMileageRequestPageInVo} idiMileageRequestPageInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIdiMyMileageRequestPage(idiMileageRequestPageInVo: IdiMileageRequestPageInVo, options?: any): AxiosPromise<PageIdiMileageRequestOutVo> {
            return localVarFp.inqIdiMyMileageRequestPage(idiMileageRequestPageInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 나의 누적 마일리지 조회
         * @summary 나의 누적 마일리지 조회
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIdiMyMileageTotal(body: object, options?: any): AxiosPromise<IdiMileageMyTotalOutVo> {
            return localVarFp.inqIdiMyMileageTotal(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 자기개발 개인별 마일리지 신청 api
         * @summary 자기개발 개인별 마일리지 신청
         * @param {IdiMileageGiftRequestInVo} idiMileageGiftRequestInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsIdiMileageGiftRequest(idiMileageGiftRequestInVo: IdiMileageGiftRequestInVo, options?: any): AxiosPromise<void> {
            return localVarFp.rgsIdiMileageGiftRequest(idiMileageGiftRequestInVo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IdiMileageControllerApi - object-oriented interface
 * @export
 * @class IdiMileageControllerApi
 * @extends {BaseAPI}
 */
export class IdiMileageControllerApi extends BaseAPI {
    /**
     * 상품권 신청 api
     * @summary 상품권 신청 삭제
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiMileageControllerApi
     */
    public delIdiMileageGiftRequest(body: object, options?: RawAxiosRequestConfig) {
        return IdiMileageControllerApiFp(this.configuration).delIdiMileageGiftRequest(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 마이페이지 마일리지 취득(기타) 페이징 리스트 api
     * @summary 마이페이지 마일리지(메인) 취득(기타) 페이징 리스트
     * @param {IdiMileageEtcPageInVo} idiMileageEtcPageInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiMileageControllerApi
     */
    public inqIdiMileageEtcPage(idiMileageEtcPageInVo: IdiMileageEtcPageInVo, options?: RawAxiosRequestConfig) {
        return IdiMileageControllerApiFp(this.configuration).inqIdiMileageEtcPage(idiMileageEtcPageInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 자기개발 보상구분에 따른 상품 리스트 api
     * @summary 자기개발 보상구분에 따른 상품 리스트
     * @param {IdiMileageGiftListInVo} idiMileageGiftListInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiMileageControllerApi
     */
    public inqIdiMileageGiftList(idiMileageGiftListInVo: IdiMileageGiftListInVo, options?: RawAxiosRequestConfig) {
        return IdiMileageControllerApiFp(this.configuration).inqIdiMileageGiftList(idiMileageGiftListInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 자기개발 상품권관리 페이징 리스트 api
     * @summary 자기개발 상품권관리 페이징 리스트
     * @param {IdiMileageGiftPageInVo} idiMileageGiftPageInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiMileageControllerApi
     */
    public inqIdiMileageGiftPage(idiMileageGiftPageInVo: IdiMileageGiftPageInVo, options?: RawAxiosRequestConfig) {
        return IdiMileageControllerApiFp(this.configuration).inqIdiMileageGiftPage(idiMileageGiftPageInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 마이페이지 마일리지 취득(학습) 페이징 리스트 api
     * @summary 마이페이지 마일리지(메인) 취득(학습) 페이징 리스트
     * @param {IdiMileageLearningPageInVo} idiMileageLearningPageInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiMileageControllerApi
     */
    public inqIdiMileageLearningPage(idiMileageLearningPageInVo: IdiMileageLearningPageInVo, options?: RawAxiosRequestConfig) {
        return IdiMileageControllerApiFp(this.configuration).inqIdiMileageLearningPage(idiMileageLearningPageInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 마이페이지 마일리지 취득(자격증) 페이징 리스트 api
     * @summary 마이페이지 마일리지(메인) 취득(자격증) 페이징 리스트
     * @param {IdiMileageLicensePageInVo} idiMileageLicensePageInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiMileageControllerApi
     */
    public inqIdiMileageLicensePage(idiMileageLicensePageInVo: IdiMileageLicensePageInVo, options?: RawAxiosRequestConfig) {
        return IdiMileageControllerApiFp(this.configuration).inqIdiMileageLicensePage(idiMileageLicensePageInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 마일리지 메인 차트 마일리지 데이터 조회
     * @summary 마일리지 메인 차트 마일리지 데이터 조회
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiMileageControllerApi
     */
    public inqIdiMyMileageChartTotal(body: object, options?: RawAxiosRequestConfig) {
        return IdiMileageControllerApiFp(this.configuration).inqIdiMyMileageChartTotal(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 마이페이지 마일리지 신청내역 페이징 리스트 api
     * @summary 마이페이지 마일리지 신청내역 페이징 리스트
     * @param {IdiMileageRequestPageInVo} idiMileageRequestPageInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiMileageControllerApi
     */
    public inqIdiMyMileageRequestPage(idiMileageRequestPageInVo: IdiMileageRequestPageInVo, options?: RawAxiosRequestConfig) {
        return IdiMileageControllerApiFp(this.configuration).inqIdiMyMileageRequestPage(idiMileageRequestPageInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 나의 누적 마일리지 조회
     * @summary 나의 누적 마일리지 조회
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiMileageControllerApi
     */
    public inqIdiMyMileageTotal(body: object, options?: RawAxiosRequestConfig) {
        return IdiMileageControllerApiFp(this.configuration).inqIdiMyMileageTotal(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 자기개발 개인별 마일리지 신청 api
     * @summary 자기개발 개인별 마일리지 신청
     * @param {IdiMileageGiftRequestInVo} idiMileageGiftRequestInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiMileageControllerApi
     */
    public rgsIdiMileageGiftRequest(idiMileageGiftRequestInVo: IdiMileageGiftRequestInVo, options?: RawAxiosRequestConfig) {
        return IdiMileageControllerApiFp(this.configuration).rgsIdiMileageGiftRequest(idiMileageGiftRequestInVo, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * IdiMyCostControllerApi - axios parameter creator
 * @export
 */
export const IdiMyCostControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 마이페이지 자기개발 현황 리스트 api
         * @summary 마이페이지 자기개발 현황 리스트
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIdiMyCostList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/idi/my/cost/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IdiMyCostControllerApi - functional programming interface
 * @export
 */
export const IdiMyCostControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IdiMyCostControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 마이페이지 자기개발 현황 리스트 api
         * @summary 마이페이지 자기개발 현황 리스트
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqIdiMyCostList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IdiMyCostOutVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqIdiMyCostList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdiMyCostControllerApi.inqIdiMyCostList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * IdiMyCostControllerApi - factory interface
 * @export
 */
export const IdiMyCostControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IdiMyCostControllerApiFp(configuration)
    return {
        /**
         * 마이페이지 자기개발 현황 리스트 api
         * @summary 마이페이지 자기개발 현황 리스트
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIdiMyCostList(options?: any): AxiosPromise<Array<IdiMyCostOutVo>> {
            return localVarFp.inqIdiMyCostList(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IdiMyCostControllerApi - object-oriented interface
 * @export
 * @class IdiMyCostControllerApi
 * @extends {BaseAPI}
 */
export class IdiMyCostControllerApi extends BaseAPI {
    /**
     * 마이페이지 자기개발 현황 리스트 api
     * @summary 마이페이지 자기개발 현황 리스트
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiMyCostControllerApi
     */
    public inqIdiMyCostList(options?: RawAxiosRequestConfig) {
        return IdiMyCostControllerApiFp(this.configuration).inqIdiMyCostList(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * IdiSupportDevDescControllerApi - axios parameter creator
 * @export
 */
export const IdiSupportDevDescControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 승인문서 페이징 리스트 api
         * @summary 승인문서
         * @param {IdiSupportDevDescInVo} idiSupportDevDescInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqApprovalStatus: async (idiSupportDevDescInVo: IdiSupportDevDescInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idiSupportDevDescInVo' is not null or undefined
            assertParamExists('inqApprovalStatus', 'idiSupportDevDescInVo', idiSupportDevDescInVo)
            const localVarPath = `/v1/idi/support/desc/approval`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(idiSupportDevDescInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 나의 신청현황 페이징 리스트 api
         * @summary 나의 신청현황
         * @param {IdiSupportDevDescInVo} idiSupportDevDescInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqMyAppStatus: async (idiSupportDevDescInVo: IdiSupportDevDescInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idiSupportDevDescInVo' is not null or undefined
            assertParamExists('inqMyAppStatus', 'idiSupportDevDescInVo', idiSupportDevDescInVo)
            const localVarPath = `/v1/idi/support/desc/mylist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(idiSupportDevDescInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 승인문서 페이징 리스트 api
         * @summary 반려문서
         * @param {IdiSupportDevDescInVo} idiSupportDevDescInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqRejectStatus: async (idiSupportDevDescInVo: IdiSupportDevDescInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idiSupportDevDescInVo' is not null or undefined
            assertParamExists('inqRejectStatus', 'idiSupportDevDescInVo', idiSupportDevDescInVo)
            const localVarPath = `/v1/idi/support/desc/reject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(idiSupportDevDescInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IdiSupportDevDescControllerApi - functional programming interface
 * @export
 */
export const IdiSupportDevDescControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IdiSupportDevDescControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 승인문서 페이징 리스트 api
         * @summary 승인문서
         * @param {IdiSupportDevDescInVo} idiSupportDevDescInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqApprovalStatus(idiSupportDevDescInVo: IdiSupportDevDescInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageIdiSupportDevDescOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqApprovalStatus(idiSupportDevDescInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdiSupportDevDescControllerApi.inqApprovalStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 나의 신청현황 페이징 리스트 api
         * @summary 나의 신청현황
         * @param {IdiSupportDevDescInVo} idiSupportDevDescInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqMyAppStatus(idiSupportDevDescInVo: IdiSupportDevDescInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageIdiSupportDevDescOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqMyAppStatus(idiSupportDevDescInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdiSupportDevDescControllerApi.inqMyAppStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 승인문서 페이징 리스트 api
         * @summary 반려문서
         * @param {IdiSupportDevDescInVo} idiSupportDevDescInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqRejectStatus(idiSupportDevDescInVo: IdiSupportDevDescInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageIdiSupportDevDescOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqRejectStatus(idiSupportDevDescInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdiSupportDevDescControllerApi.inqRejectStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * IdiSupportDevDescControllerApi - factory interface
 * @export
 */
export const IdiSupportDevDescControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IdiSupportDevDescControllerApiFp(configuration)
    return {
        /**
         * 승인문서 페이징 리스트 api
         * @summary 승인문서
         * @param {IdiSupportDevDescInVo} idiSupportDevDescInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqApprovalStatus(idiSupportDevDescInVo: IdiSupportDevDescInVo, options?: any): AxiosPromise<PageIdiSupportDevDescOutVo> {
            return localVarFp.inqApprovalStatus(idiSupportDevDescInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 나의 신청현황 페이징 리스트 api
         * @summary 나의 신청현황
         * @param {IdiSupportDevDescInVo} idiSupportDevDescInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqMyAppStatus(idiSupportDevDescInVo: IdiSupportDevDescInVo, options?: any): AxiosPromise<PageIdiSupportDevDescOutVo> {
            return localVarFp.inqMyAppStatus(idiSupportDevDescInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 승인문서 페이징 리스트 api
         * @summary 반려문서
         * @param {IdiSupportDevDescInVo} idiSupportDevDescInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqRejectStatus(idiSupportDevDescInVo: IdiSupportDevDescInVo, options?: any): AxiosPromise<PageIdiSupportDevDescOutVo> {
            return localVarFp.inqRejectStatus(idiSupportDevDescInVo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IdiSupportDevDescControllerApi - object-oriented interface
 * @export
 * @class IdiSupportDevDescControllerApi
 * @extends {BaseAPI}
 */
export class IdiSupportDevDescControllerApi extends BaseAPI {
    /**
     * 승인문서 페이징 리스트 api
     * @summary 승인문서
     * @param {IdiSupportDevDescInVo} idiSupportDevDescInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiSupportDevDescControllerApi
     */
    public inqApprovalStatus(idiSupportDevDescInVo: IdiSupportDevDescInVo, options?: RawAxiosRequestConfig) {
        return IdiSupportDevDescControllerApiFp(this.configuration).inqApprovalStatus(idiSupportDevDescInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 나의 신청현황 페이징 리스트 api
     * @summary 나의 신청현황
     * @param {IdiSupportDevDescInVo} idiSupportDevDescInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiSupportDevDescControllerApi
     */
    public inqMyAppStatus(idiSupportDevDescInVo: IdiSupportDevDescInVo, options?: RawAxiosRequestConfig) {
        return IdiSupportDevDescControllerApiFp(this.configuration).inqMyAppStatus(idiSupportDevDescInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 승인문서 페이징 리스트 api
     * @summary 반려문서
     * @param {IdiSupportDevDescInVo} idiSupportDevDescInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiSupportDevDescControllerApi
     */
    public inqRejectStatus(idiSupportDevDescInVo: IdiSupportDevDescInVo, options?: RawAxiosRequestConfig) {
        return IdiSupportDevDescControllerApiFp(this.configuration).inqRejectStatus(idiSupportDevDescInVo, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * KyoboControllerApi - axios parameter creator
 * @export
 */
export const KyoboControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 교보 리딩트리 접속 암호화 생성
         * @summary 교보 리딩트리 접속 암호화 생성
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqKyoboEncryption: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/kyobo/encryption`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * KyoboControllerApi - functional programming interface
 * @export
 */
export const KyoboControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = KyoboControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 교보 리딩트리 접속 암호화 생성
         * @summary 교보 리딩트리 접속 암호화 생성
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqKyoboEncryption(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KyoboOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqKyoboEncryption(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['KyoboControllerApi.inqKyoboEncryption']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * KyoboControllerApi - factory interface
 * @export
 */
export const KyoboControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = KyoboControllerApiFp(configuration)
    return {
        /**
         * 교보 리딩트리 접속 암호화 생성
         * @summary 교보 리딩트리 접속 암호화 생성
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqKyoboEncryption(options?: any): AxiosPromise<KyoboOutVo> {
            return localVarFp.inqKyoboEncryption(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * KyoboControllerApi - object-oriented interface
 * @export
 * @class KyoboControllerApi
 * @extends {BaseAPI}
 */
export class KyoboControllerApi extends BaseAPI {
    /**
     * 교보 리딩트리 접속 암호화 생성
     * @summary 교보 리딩트리 접속 암호화 생성
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KyoboControllerApi
     */
    public inqKyoboEncryption(options?: RawAxiosRequestConfig) {
        return KyoboControllerApiFp(this.configuration).inqKyoboEncryption(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LoginControllerApi - axios parameter creator
 * @export
 */
export const LoginControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 비밀번호 찾기 검증 API
         * @summary 비밀번호 찾기 검증
         * @param {FindPwdInVo} findPwdInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPassword: async (findPwdInVo: FindPwdInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'findPwdInVo' is not null or undefined
            assertParamExists('findPassword', 'findPwdInVo', findPwdInVo)
            const localVarPath = `/v1/user/auth/findPassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(findPwdInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 로그인 API
         * @summary 로그인
         * @param {LoginInVo} loginInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginInVo: LoginInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginInVo' is not null or undefined
            assertParamExists('login', 'loginInVo', loginInVo)
            const localVarPath = `/v1/user/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 로그인 API
         * @summary 로그인
         * @param {LoginAppInVo} loginAppInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginApp: async (loginAppInVo: LoginAppInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginAppInVo' is not null or undefined
            assertParamExists('loginApp', 'loginAppInVo', loginAppInVo)
            const localVarPath = `/v1/user/auth/login/app`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginAppInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 로그인 MOTP API
         * @summary 로그인 MOTP
         * @param {LoginMotpInVo} loginMotpInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginMotp: async (loginMotpInVo: LoginMotpInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginMotpInVo' is not null or undefined
            assertParamExists('loginMotp', 'loginMotpInVo', loginMotpInVo)
            const localVarPath = `/v1/user/auth/login/motp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginMotpInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 로그아웃 API
         * @summary 로그아웃
         * @param {LogOutInVo} logOutInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (logOutInVo: LogOutInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'logOutInVo' is not null or undefined
            assertParamExists('logout', 'logOutInVo', logOutInVo)
            const localVarPath = `/v1/user/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(logOutInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 비밀번호 초기화 및 SMS, 이메일 전송 API
         * @summary 비밀번호 초기화 및 SMS, 이메일 전송
         * @param {ResetPwdInVo} resetPwdInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword: async (resetPwdInVo: ResetPwdInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resetPwdInVo' is not null or undefined
            assertParamExists('resetPassword', 'resetPwdInVo', resetPwdInVo)
            const localVarPath = `/v1/user/auth/resetPassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resetPwdInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoginControllerApi - functional programming interface
 * @export
 */
export const LoginControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LoginControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 비밀번호 찾기 검증 API
         * @summary 비밀번호 찾기 검증
         * @param {FindPwdInVo} findPwdInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findPassword(findPwdInVo: FindPwdInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findPassword(findPwdInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LoginControllerApi.findPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 로그인 API
         * @summary 로그인
         * @param {LoginInVo} loginInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginInVo: LoginInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserAppOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LoginControllerApi.login']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 로그인 API
         * @summary 로그인
         * @param {LoginAppInVo} loginAppInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginApp(loginAppInVo: LoginAppInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserAppOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginApp(loginAppInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LoginControllerApi.loginApp']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 로그인 MOTP API
         * @summary 로그인 MOTP
         * @param {LoginMotpInVo} loginMotpInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginMotp(loginMotpInVo: LoginMotpInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginMotp(loginMotpInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LoginControllerApi.loginMotp']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 로그아웃 API
         * @summary 로그아웃
         * @param {LogOutInVo} logOutInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(logOutInVo: LogOutInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(logOutInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LoginControllerApi.logout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 비밀번호 초기화 및 SMS, 이메일 전송 API
         * @summary 비밀번호 초기화 및 SMS, 이메일 전송
         * @param {ResetPwdInVo} resetPwdInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPassword(resetPwdInVo: ResetPwdInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetPassword(resetPwdInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LoginControllerApi.resetPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LoginControllerApi - factory interface
 * @export
 */
export const LoginControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LoginControllerApiFp(configuration)
    return {
        /**
         * 비밀번호 찾기 검증 API
         * @summary 비밀번호 찾기 검증
         * @param {FindPwdInVo} findPwdInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPassword(findPwdInVo: FindPwdInVo, options?: any): AxiosPromise<void> {
            return localVarFp.findPassword(findPwdInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 로그인 API
         * @summary 로그인
         * @param {LoginInVo} loginInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginInVo: LoginInVo, options?: any): AxiosPromise<UserAppOutVo> {
            return localVarFp.login(loginInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 로그인 API
         * @summary 로그인
         * @param {LoginAppInVo} loginAppInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginApp(loginAppInVo: LoginAppInVo, options?: any): AxiosPromise<UserAppOutVo> {
            return localVarFp.loginApp(loginAppInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 로그인 MOTP API
         * @summary 로그인 MOTP
         * @param {LoginMotpInVo} loginMotpInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginMotp(loginMotpInVo: LoginMotpInVo, options?: any): AxiosPromise<UserOutVo> {
            return localVarFp.loginMotp(loginMotpInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 로그아웃 API
         * @summary 로그아웃
         * @param {LogOutInVo} logOutInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(logOutInVo: LogOutInVo, options?: any): AxiosPromise<void> {
            return localVarFp.logout(logOutInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 비밀번호 초기화 및 SMS, 이메일 전송 API
         * @summary 비밀번호 초기화 및 SMS, 이메일 전송
         * @param {ResetPwdInVo} resetPwdInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword(resetPwdInVo: ResetPwdInVo, options?: any): AxiosPromise<void> {
            return localVarFp.resetPassword(resetPwdInVo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LoginControllerApi - object-oriented interface
 * @export
 * @class LoginControllerApi
 * @extends {BaseAPI}
 */
export class LoginControllerApi extends BaseAPI {
    /**
     * 비밀번호 찾기 검증 API
     * @summary 비밀번호 찾기 검증
     * @param {FindPwdInVo} findPwdInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginControllerApi
     */
    public findPassword(findPwdInVo: FindPwdInVo, options?: RawAxiosRequestConfig) {
        return LoginControllerApiFp(this.configuration).findPassword(findPwdInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 로그인 API
     * @summary 로그인
     * @param {LoginInVo} loginInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginControllerApi
     */
    public login(loginInVo: LoginInVo, options?: RawAxiosRequestConfig) {
        return LoginControllerApiFp(this.configuration).login(loginInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 로그인 API
     * @summary 로그인
     * @param {LoginAppInVo} loginAppInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginControllerApi
     */
    public loginApp(loginAppInVo: LoginAppInVo, options?: RawAxiosRequestConfig) {
        return LoginControllerApiFp(this.configuration).loginApp(loginAppInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 로그인 MOTP API
     * @summary 로그인 MOTP
     * @param {LoginMotpInVo} loginMotpInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginControllerApi
     */
    public loginMotp(loginMotpInVo: LoginMotpInVo, options?: RawAxiosRequestConfig) {
        return LoginControllerApiFp(this.configuration).loginMotp(loginMotpInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 로그아웃 API
     * @summary 로그아웃
     * @param {LogOutInVo} logOutInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginControllerApi
     */
    public logout(logOutInVo: LogOutInVo, options?: RawAxiosRequestConfig) {
        return LoginControllerApiFp(this.configuration).logout(logOutInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 비밀번호 초기화 및 SMS, 이메일 전송 API
     * @summary 비밀번호 초기화 및 SMS, 이메일 전송
     * @param {ResetPwdInVo} resetPwdInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginControllerApi
     */
    public resetPassword(resetPwdInVo: ResetPwdInVo, options?: RawAxiosRequestConfig) {
        return LoginControllerApiFp(this.configuration).resetPassword(resetPwdInVo, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MainControllerApi - axios parameter creator
 * @export
 */
export const MainControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 내부망인지 외부망인지 체크 하는 API
         * @summary 내부망인지 외부망인지 체크 하는 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIpCheck: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/main/ipcheck`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 슬라이드 배너 조회 api
         * @summary 슬라이드 배너 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqMainModuleList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/main/module/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 메인 공지 조회 api
         * @summary 메인 공지 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqMainNoticeList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/main/notice/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 인기 강의 조회 api
         * @summary 인기 강의 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqMainPopularCourseList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/main/popular/course/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 메인 팝업 조회 api
         * @summary 메인 팝업 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqMainPopupList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/main/popup/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 최근 업데이트 강의 조회 api
         * @summary 최근 업데이트 강의 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqMainRecentCourseList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/main/recent/course/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 메인 수가후기 조회 api
         * @summary 메인 수강후기 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqMainReviewList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/main/review/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MainControllerApi - functional programming interface
 * @export
 */
export const MainControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MainControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 내부망인지 외부망인지 체크 하는 API
         * @summary 내부망인지 외부망인지 체크 하는 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqIpCheck(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqIpCheck(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MainControllerApi.inqIpCheck']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 슬라이드 배너 조회 api
         * @summary 슬라이드 배너 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqMainModuleList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MainModuleOutVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqMainModuleList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MainControllerApi.inqMainModuleList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 메인 공지 조회 api
         * @summary 메인 공지 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqMainNoticeList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MainNoticeOutVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqMainNoticeList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MainControllerApi.inqMainNoticeList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 인기 강의 조회 api
         * @summary 인기 강의 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqMainPopularCourseList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MainCourseOutVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqMainPopularCourseList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MainControllerApi.inqMainPopularCourseList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 메인 팝업 조회 api
         * @summary 메인 팝업 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqMainPopupList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MainPopupOutVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqMainPopupList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MainControllerApi.inqMainPopupList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 최근 업데이트 강의 조회 api
         * @summary 최근 업데이트 강의 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqMainRecentCourseList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MainCourseOutVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqMainRecentCourseList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MainControllerApi.inqMainRecentCourseList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 메인 수가후기 조회 api
         * @summary 메인 수강후기 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqMainReviewList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MainReviewOutVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqMainReviewList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MainControllerApi.inqMainReviewList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MainControllerApi - factory interface
 * @export
 */
export const MainControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MainControllerApiFp(configuration)
    return {
        /**
         * 내부망인지 외부망인지 체크 하는 API
         * @summary 내부망인지 외부망인지 체크 하는 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqIpCheck(options?: any): AxiosPromise<{ [key: string]: string; }> {
            return localVarFp.inqIpCheck(options).then((request) => request(axios, basePath));
        },
        /**
         * 슬라이드 배너 조회 api
         * @summary 슬라이드 배너 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqMainModuleList(options?: any): AxiosPromise<Array<MainModuleOutVo>> {
            return localVarFp.inqMainModuleList(options).then((request) => request(axios, basePath));
        },
        /**
         * 메인 공지 조회 api
         * @summary 메인 공지 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqMainNoticeList(options?: any): AxiosPromise<Array<MainNoticeOutVo>> {
            return localVarFp.inqMainNoticeList(options).then((request) => request(axios, basePath));
        },
        /**
         * 인기 강의 조회 api
         * @summary 인기 강의 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqMainPopularCourseList(options?: any): AxiosPromise<Array<MainCourseOutVo>> {
            return localVarFp.inqMainPopularCourseList(options).then((request) => request(axios, basePath));
        },
        /**
         * 메인 팝업 조회 api
         * @summary 메인 팝업 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqMainPopupList(options?: any): AxiosPromise<Array<MainPopupOutVo>> {
            return localVarFp.inqMainPopupList(options).then((request) => request(axios, basePath));
        },
        /**
         * 최근 업데이트 강의 조회 api
         * @summary 최근 업데이트 강의 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqMainRecentCourseList(options?: any): AxiosPromise<Array<MainCourseOutVo>> {
            return localVarFp.inqMainRecentCourseList(options).then((request) => request(axios, basePath));
        },
        /**
         * 메인 수가후기 조회 api
         * @summary 메인 수강후기 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqMainReviewList(options?: any): AxiosPromise<Array<MainReviewOutVo>> {
            return localVarFp.inqMainReviewList(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MainControllerApi - object-oriented interface
 * @export
 * @class MainControllerApi
 * @extends {BaseAPI}
 */
export class MainControllerApi extends BaseAPI {
    /**
     * 내부망인지 외부망인지 체크 하는 API
     * @summary 내부망인지 외부망인지 체크 하는 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MainControllerApi
     */
    public inqIpCheck(options?: RawAxiosRequestConfig) {
        return MainControllerApiFp(this.configuration).inqIpCheck(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 슬라이드 배너 조회 api
     * @summary 슬라이드 배너 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MainControllerApi
     */
    public inqMainModuleList(options?: RawAxiosRequestConfig) {
        return MainControllerApiFp(this.configuration).inqMainModuleList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 메인 공지 조회 api
     * @summary 메인 공지 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MainControllerApi
     */
    public inqMainNoticeList(options?: RawAxiosRequestConfig) {
        return MainControllerApiFp(this.configuration).inqMainNoticeList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 인기 강의 조회 api
     * @summary 인기 강의 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MainControllerApi
     */
    public inqMainPopularCourseList(options?: RawAxiosRequestConfig) {
        return MainControllerApiFp(this.configuration).inqMainPopularCourseList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 메인 팝업 조회 api
     * @summary 메인 팝업 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MainControllerApi
     */
    public inqMainPopupList(options?: RawAxiosRequestConfig) {
        return MainControllerApiFp(this.configuration).inqMainPopupList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 최근 업데이트 강의 조회 api
     * @summary 최근 업데이트 강의 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MainControllerApi
     */
    public inqMainRecentCourseList(options?: RawAxiosRequestConfig) {
        return MainControllerApiFp(this.configuration).inqMainRecentCourseList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 메인 수가후기 조회 api
     * @summary 메인 수강후기 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MainControllerApi
     */
    public inqMainReviewList(options?: RawAxiosRequestConfig) {
        return MainControllerApiFp(this.configuration).inqMainReviewList(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MenuControllerApi - axios parameter creator
 * @export
 */
export const MenuControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 메뉴 단건 조회 api
         * @summary 메뉴 단건 조회
         * @param {MenuInVo} menuInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqMenu: async (menuInVo: MenuInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'menuInVo' is not null or undefined
            assertParamExists('inqMenu', 'menuInVo', menuInVo)
            const localVarPath = `/v1/user/menu/select`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(menuInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 메뉴 전체 조회 api
         * @summary 메뉴 전체 조회
         * @param {MenuInVo} menuInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqMenuAll: async (menuInVo: MenuInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'menuInVo' is not null or undefined
            assertParamExists('inqMenuAll', 'menuInVo', menuInVo)
            const localVarPath = `/v1/user/menu/list/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(menuInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MenuControllerApi - functional programming interface
 * @export
 */
export const MenuControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MenuControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 메뉴 단건 조회 api
         * @summary 메뉴 단건 조회
         * @param {MenuInVo} menuInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqMenu(menuInVo: MenuInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MenuInVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqMenu(menuInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MenuControllerApi.inqMenu']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 메뉴 전체 조회 api
         * @summary 메뉴 전체 조회
         * @param {MenuInVo} menuInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqMenuAll(menuInVo: MenuInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MenuAllOutVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqMenuAll(menuInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MenuControllerApi.inqMenuAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MenuControllerApi - factory interface
 * @export
 */
export const MenuControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MenuControllerApiFp(configuration)
    return {
        /**
         * 메뉴 단건 조회 api
         * @summary 메뉴 단건 조회
         * @param {MenuInVo} menuInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqMenu(menuInVo: MenuInVo, options?: any): AxiosPromise<MenuInVo> {
            return localVarFp.inqMenu(menuInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 메뉴 전체 조회 api
         * @summary 메뉴 전체 조회
         * @param {MenuInVo} menuInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqMenuAll(menuInVo: MenuInVo, options?: any): AxiosPromise<Array<MenuAllOutVo>> {
            return localVarFp.inqMenuAll(menuInVo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MenuControllerApi - object-oriented interface
 * @export
 * @class MenuControllerApi
 * @extends {BaseAPI}
 */
export class MenuControllerApi extends BaseAPI {
    /**
     * 메뉴 단건 조회 api
     * @summary 메뉴 단건 조회
     * @param {MenuInVo} menuInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuControllerApi
     */
    public inqMenu(menuInVo: MenuInVo, options?: RawAxiosRequestConfig) {
        return MenuControllerApiFp(this.configuration).inqMenu(menuInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 메뉴 전체 조회 api
     * @summary 메뉴 전체 조회
     * @param {MenuInVo} menuInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuControllerApi
     */
    public inqMenuAll(menuInVo: MenuInVo, options?: RawAxiosRequestConfig) {
        return MenuControllerApiFp(this.configuration).inqMenuAll(menuInVo, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PopupControllerApi - axios parameter creator
 * @export
 */
export const PopupControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 팝업 상세 정보 조회 api
         * @summary 팝업 상세 정보 조회
         * @param {PopupInVo} popupInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqPopupDtl: async (popupInVo: PopupInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'popupInVo' is not null or undefined
            assertParamExists('inqPopupDtl', 'popupInVo', popupInVo)
            const localVarPath = `/v1/popup/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(popupInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 팝업 페이지 리스트 api
         * @summary 팝업 페이징 리스트
         * @param {PopupPageInqInVo} popupPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqPopupPage: async (popupPageInqInVo: PopupPageInqInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'popupPageInqInVo' is not null or undefined
            assertParamExists('inqPopupPage', 'popupPageInqInVo', popupPageInqInVo)
            const localVarPath = `/v1/popup/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(popupPageInqInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PopupControllerApi - functional programming interface
 * @export
 */
export const PopupControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PopupControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 팝업 상세 정보 조회 api
         * @summary 팝업 상세 정보 조회
         * @param {PopupInVo} popupInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqPopupDtl(popupInVo: PopupInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PopupOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqPopupDtl(popupInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PopupControllerApi.inqPopupDtl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 팝업 페이지 리스트 api
         * @summary 팝업 페이징 리스트
         * @param {PopupPageInqInVo} popupPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqPopupPage(popupPageInqInVo: PopupPageInqInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagePopupOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqPopupPage(popupPageInqInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PopupControllerApi.inqPopupPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PopupControllerApi - factory interface
 * @export
 */
export const PopupControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PopupControllerApiFp(configuration)
    return {
        /**
         * 팝업 상세 정보 조회 api
         * @summary 팝업 상세 정보 조회
         * @param {PopupInVo} popupInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqPopupDtl(popupInVo: PopupInVo, options?: any): AxiosPromise<PopupOutVo> {
            return localVarFp.inqPopupDtl(popupInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 팝업 페이지 리스트 api
         * @summary 팝업 페이징 리스트
         * @param {PopupPageInqInVo} popupPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqPopupPage(popupPageInqInVo: PopupPageInqInVo, options?: any): AxiosPromise<PagePopupOutVo> {
            return localVarFp.inqPopupPage(popupPageInqInVo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PopupControllerApi - object-oriented interface
 * @export
 * @class PopupControllerApi
 * @extends {BaseAPI}
 */
export class PopupControllerApi extends BaseAPI {
    /**
     * 팝업 상세 정보 조회 api
     * @summary 팝업 상세 정보 조회
     * @param {PopupInVo} popupInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopupControllerApi
     */
    public inqPopupDtl(popupInVo: PopupInVo, options?: RawAxiosRequestConfig) {
        return PopupControllerApiFp(this.configuration).inqPopupDtl(popupInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 팝업 페이지 리스트 api
     * @summary 팝업 페이징 리스트
     * @param {PopupPageInqInVo} popupPageInqInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopupControllerApi
     */
    public inqPopupPage(popupPageInqInVo: PopupPageInqInVo, options?: RawAxiosRequestConfig) {
        return PopupControllerApiFp(this.configuration).inqPopupPage(popupPageInqInVo, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * QuestionAnswerControllerApi - axios parameter creator
 * @export
 */
export const QuestionAnswerControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * [답변 삭제 api
         * @summary 답변 삭제
         * @param {QuestionAnswerDeleteInVo} questionAnswerDeleteInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delQuestionAnswer: async (questionAnswerDeleteInVo: QuestionAnswerDeleteInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'questionAnswerDeleteInVo' is not null or undefined
            assertParamExists('delQuestionAnswer', 'questionAnswerDeleteInVo', questionAnswerDeleteInVo)
            const localVarPath = `/v1/question/answer/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(questionAnswerDeleteInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 답변 상세 정보 조회 api
         * @summary 답변 상세 정보 조회
         * @param {QuestionAnswerInVo} questionAnswerInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqQuestionAnswerDtl: async (questionAnswerInVo: QuestionAnswerInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'questionAnswerInVo' is not null or undefined
            assertParamExists('inqQuestionAnswerDtl', 'questionAnswerInVo', questionAnswerInVo)
            const localVarPath = `/v1/question/answer/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(questionAnswerInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QuestionAnswerControllerApi - functional programming interface
 * @export
 */
export const QuestionAnswerControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QuestionAnswerControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * [답변 삭제 api
         * @summary 답변 삭제
         * @param {QuestionAnswerDeleteInVo} questionAnswerDeleteInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delQuestionAnswer(questionAnswerDeleteInVo: QuestionAnswerDeleteInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delQuestionAnswer(questionAnswerDeleteInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuestionAnswerControllerApi.delQuestionAnswer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 답변 상세 정보 조회 api
         * @summary 답변 상세 정보 조회
         * @param {QuestionAnswerInVo} questionAnswerInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqQuestionAnswerDtl(questionAnswerInVo: QuestionAnswerInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuestionAnswerOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqQuestionAnswerDtl(questionAnswerInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuestionAnswerControllerApi.inqQuestionAnswerDtl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * QuestionAnswerControllerApi - factory interface
 * @export
 */
export const QuestionAnswerControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QuestionAnswerControllerApiFp(configuration)
    return {
        /**
         * [답변 삭제 api
         * @summary 답변 삭제
         * @param {QuestionAnswerDeleteInVo} questionAnswerDeleteInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delQuestionAnswer(questionAnswerDeleteInVo: QuestionAnswerDeleteInVo, options?: any): AxiosPromise<void> {
            return localVarFp.delQuestionAnswer(questionAnswerDeleteInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 답변 상세 정보 조회 api
         * @summary 답변 상세 정보 조회
         * @param {QuestionAnswerInVo} questionAnswerInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqQuestionAnswerDtl(questionAnswerInVo: QuestionAnswerInVo, options?: any): AxiosPromise<QuestionAnswerOutVo> {
            return localVarFp.inqQuestionAnswerDtl(questionAnswerInVo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QuestionAnswerControllerApi - object-oriented interface
 * @export
 * @class QuestionAnswerControllerApi
 * @extends {BaseAPI}
 */
export class QuestionAnswerControllerApi extends BaseAPI {
    /**
     * [답변 삭제 api
     * @summary 답변 삭제
     * @param {QuestionAnswerDeleteInVo} questionAnswerDeleteInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionAnswerControllerApi
     */
    public delQuestionAnswer(questionAnswerDeleteInVo: QuestionAnswerDeleteInVo, options?: RawAxiosRequestConfig) {
        return QuestionAnswerControllerApiFp(this.configuration).delQuestionAnswer(questionAnswerDeleteInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 답변 상세 정보 조회 api
     * @summary 답변 상세 정보 조회
     * @param {QuestionAnswerInVo} questionAnswerInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionAnswerControllerApi
     */
    public inqQuestionAnswerDtl(questionAnswerInVo: QuestionAnswerInVo, options?: RawAxiosRequestConfig) {
        return QuestionAnswerControllerApiFp(this.configuration).inqQuestionAnswerDtl(questionAnswerInVo, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * QuestionControllerApi - axios parameter creator
 * @export
 */
export const QuestionControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * [질문/답변 삭제 api
         * @summary 질문/답변 삭제
         * @param {QuestionDeleteInVo} questionDeleteInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delQuestion: async (questionDeleteInVo: QuestionDeleteInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'questionDeleteInVo' is not null or undefined
            assertParamExists('delQuestion', 'questionDeleteInVo', questionDeleteInVo)
            const localVarPath = `/v1/question/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(questionDeleteInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [질문/답변 멀티 삭제 api
         * @summary 질문/답변 멀티 삭제
         * @param {Array<QuestionDeleteInVo>} questionDeleteInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delQuestionMulti: async (questionDeleteInVo: Array<QuestionDeleteInVo>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'questionDeleteInVo' is not null or undefined
            assertParamExists('delQuestionMulti', 'questionDeleteInVo', questionDeleteInVo)
            const localVarPath = `/v1/question/delete/multi`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(questionDeleteInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 질문 상세 정보 조회 api
         * @summary 질문 상세 정보 조회
         * @param {QuestionInVo} questionInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqQuestionDtl: async (questionInVo: QuestionInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'questionInVo' is not null or undefined
            assertParamExists('inqQuestionDtl', 'questionInVo', questionInVo)
            const localVarPath = `/v1/question/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(questionInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 질문 페이지 리스트 api
         * @summary 질문 페이징 리스트
         * @param {QuestionPageInqInVo} questionPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqQuestionPage: async (questionPageInqInVo: QuestionPageInqInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'questionPageInqInVo' is not null or undefined
            assertParamExists('inqQuestionPage', 'questionPageInqInVo', questionPageInqInVo)
            const localVarPath = `/v1/question/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(questionPageInqInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 문의 수정 api
         * @summary 문의 수정
         * @param {QuestionInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcQuestion: async (inVo: QuestionInVo, files?: Array<File>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inVo' is not null or undefined
            assertParamExists('mdfcQuestion', 'inVo', inVo)
            const localVarPath = `/v1/question/modify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (files) {
                files.forEach((element) => {
                  localVarFormParams.append('files', element as any);
                })
            }

    
            if (inVo !== undefined) { 
                localVarFormParams.append('inVo', new Blob([JSON.stringify(inVo)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 문의 등록 api
         * @summary 문의 등록
         * @param {QuestionInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnQuestion: async (inVo: QuestionInVo, files?: Array<File>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inVo' is not null or undefined
            assertParamExists('rgsnQuestion', 'inVo', inVo)
            const localVarPath = `/v1/question/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (files) {
                files.forEach((element) => {
                  localVarFormParams.append('files', element as any);
                })
            }

    
            if (inVo !== undefined) { 
                localVarFormParams.append('inVo', new Blob([JSON.stringify(inVo)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QuestionControllerApi - functional programming interface
 * @export
 */
export const QuestionControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QuestionControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * [질문/답변 삭제 api
         * @summary 질문/답변 삭제
         * @param {QuestionDeleteInVo} questionDeleteInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delQuestion(questionDeleteInVo: QuestionDeleteInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delQuestion(questionDeleteInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuestionControllerApi.delQuestion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * [질문/답변 멀티 삭제 api
         * @summary 질문/답변 멀티 삭제
         * @param {Array<QuestionDeleteInVo>} questionDeleteInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delQuestionMulti(questionDeleteInVo: Array<QuestionDeleteInVo>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delQuestionMulti(questionDeleteInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuestionControllerApi.delQuestionMulti']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 질문 상세 정보 조회 api
         * @summary 질문 상세 정보 조회
         * @param {QuestionInVo} questionInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqQuestionDtl(questionInVo: QuestionInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuestionOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqQuestionDtl(questionInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuestionControllerApi.inqQuestionDtl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 질문 페이지 리스트 api
         * @summary 질문 페이징 리스트
         * @param {QuestionPageInqInVo} questionPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqQuestionPage(questionPageInqInVo: QuestionPageInqInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageQuestionOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqQuestionPage(questionPageInqInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuestionControllerApi.inqQuestionPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 문의 수정 api
         * @summary 문의 수정
         * @param {QuestionInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mdfcQuestion(inVo: QuestionInVo, files?: Array<File>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mdfcQuestion(inVo, files, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuestionControllerApi.mdfcQuestion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 문의 등록 api
         * @summary 문의 등록
         * @param {QuestionInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rgsnQuestion(inVo: QuestionInVo, files?: Array<File>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rgsnQuestion(inVo, files, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuestionControllerApi.rgsnQuestion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * QuestionControllerApi - factory interface
 * @export
 */
export const QuestionControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QuestionControllerApiFp(configuration)
    return {
        /**
         * [질문/답변 삭제 api
         * @summary 질문/답변 삭제
         * @param {QuestionDeleteInVo} questionDeleteInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delQuestion(questionDeleteInVo: QuestionDeleteInVo, options?: any): AxiosPromise<void> {
            return localVarFp.delQuestion(questionDeleteInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * [질문/답변 멀티 삭제 api
         * @summary 질문/답변 멀티 삭제
         * @param {Array<QuestionDeleteInVo>} questionDeleteInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delQuestionMulti(questionDeleteInVo: Array<QuestionDeleteInVo>, options?: any): AxiosPromise<void> {
            return localVarFp.delQuestionMulti(questionDeleteInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 질문 상세 정보 조회 api
         * @summary 질문 상세 정보 조회
         * @param {QuestionInVo} questionInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqQuestionDtl(questionInVo: QuestionInVo, options?: any): AxiosPromise<QuestionOutVo> {
            return localVarFp.inqQuestionDtl(questionInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 질문 페이지 리스트 api
         * @summary 질문 페이징 리스트
         * @param {QuestionPageInqInVo} questionPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqQuestionPage(questionPageInqInVo: QuestionPageInqInVo, options?: any): AxiosPromise<PageQuestionOutVo> {
            return localVarFp.inqQuestionPage(questionPageInqInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 문의 수정 api
         * @summary 문의 수정
         * @param {QuestionInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcQuestion(inVo: QuestionInVo, files?: Array<File>, options?: any): AxiosPromise<void> {
            return localVarFp.mdfcQuestion(inVo, files, options).then((request) => request(axios, basePath));
        },
        /**
         * 문의 등록 api
         * @summary 문의 등록
         * @param {QuestionInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnQuestion(inVo: QuestionInVo, files?: Array<File>, options?: any): AxiosPromise<void> {
            return localVarFp.rgsnQuestion(inVo, files, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QuestionControllerApi - object-oriented interface
 * @export
 * @class QuestionControllerApi
 * @extends {BaseAPI}
 */
export class QuestionControllerApi extends BaseAPI {
    /**
     * [질문/답변 삭제 api
     * @summary 질문/답변 삭제
     * @param {QuestionDeleteInVo} questionDeleteInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionControllerApi
     */
    public delQuestion(questionDeleteInVo: QuestionDeleteInVo, options?: RawAxiosRequestConfig) {
        return QuestionControllerApiFp(this.configuration).delQuestion(questionDeleteInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * [질문/답변 멀티 삭제 api
     * @summary 질문/답변 멀티 삭제
     * @param {Array<QuestionDeleteInVo>} questionDeleteInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionControllerApi
     */
    public delQuestionMulti(questionDeleteInVo: Array<QuestionDeleteInVo>, options?: RawAxiosRequestConfig) {
        return QuestionControllerApiFp(this.configuration).delQuestionMulti(questionDeleteInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 질문 상세 정보 조회 api
     * @summary 질문 상세 정보 조회
     * @param {QuestionInVo} questionInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionControllerApi
     */
    public inqQuestionDtl(questionInVo: QuestionInVo, options?: RawAxiosRequestConfig) {
        return QuestionControllerApiFp(this.configuration).inqQuestionDtl(questionInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 질문 페이지 리스트 api
     * @summary 질문 페이징 리스트
     * @param {QuestionPageInqInVo} questionPageInqInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionControllerApi
     */
    public inqQuestionPage(questionPageInqInVo: QuestionPageInqInVo, options?: RawAxiosRequestConfig) {
        return QuestionControllerApiFp(this.configuration).inqQuestionPage(questionPageInqInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 문의 수정 api
     * @summary 문의 수정
     * @param {QuestionInVo} inVo 
     * @param {Array<File>} [files] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionControllerApi
     */
    public mdfcQuestion(inVo: QuestionInVo, files?: Array<File>, options?: RawAxiosRequestConfig) {
        return QuestionControllerApiFp(this.configuration).mdfcQuestion(inVo, files, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 문의 등록 api
     * @summary 문의 등록
     * @param {QuestionInVo} inVo 
     * @param {Array<File>} [files] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionControllerApi
     */
    public rgsnQuestion(inVo: QuestionInVo, files?: Array<File>, options?: RawAxiosRequestConfig) {
        return QuestionControllerApiFp(this.configuration).rgsnQuestion(inVo, files, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ResortFacilityControllerApi - axios parameter creator
 * @export
 */
export const ResortFacilityControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 휴양시설 등록전 중복체크 api
         * @summary 휴양시설 등록전 중복체크
         * @param {ResortFacilityInVo} resortFacilityInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkResortFacility: async (resortFacilityInVo: ResortFacilityInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resortFacilityInVo' is not null or undefined
            assertParamExists('checkResortFacility', 'resortFacilityInVo', resortFacilityInVo)
            const localVarPath = `/v1/resort/facility/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resortFacilityInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 휴양 시설 단일 삭제 api
         * @summary 휴양 시설 단일 삭제
         * @param {ResortFacilityInVo} resortFacilityInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delResortFacility: async (resortFacilityInVo: ResortFacilityInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resortFacilityInVo' is not null or undefined
            assertParamExists('delResortFacility', 'resortFacilityInVo', resortFacilityInVo)
            const localVarPath = `/v1/resort/facility/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resortFacilityInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 휴양 시설 멀티 삭제 api
         * @summary 휴양 시설 멀티 삭제
         * @param {Array<ResortFacilityInVo>} resortFacilityInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delResortFacilityMulti: async (resortFacilityInVo: Array<ResortFacilityInVo>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resortFacilityInVo' is not null or undefined
            assertParamExists('delResortFacilityMulti', 'resortFacilityInVo', resortFacilityInVo)
            const localVarPath = `/v1/resort/facility/delete/multi`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resortFacilityInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 휴양 시설 상세 정보 조회 api
         * @summary 휴양 시설 상세 정보 조회
         * @param {ResortFacilityInVo} resortFacilityInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqResortFacilityDtl: async (resortFacilityInVo: ResortFacilityInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resortFacilityInVo' is not null or undefined
            assertParamExists('inqResortFacilityDtl', 'resortFacilityInVo', resortFacilityInVo)
            const localVarPath = `/v1/resort/facility/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resortFacilityInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 휴양시설 페이징 리스트 api
         * @summary 휴양시설 페이징 리스트
         * @param {ResortFacilityPageInqInVo} resortFacilityPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqResortFacilityPage: async (resortFacilityPageInqInVo: ResortFacilityPageInqInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resortFacilityPageInqInVo' is not null or undefined
            assertParamExists('inqResortFacilityPage', 'resortFacilityPageInqInVo', resortFacilityPageInqInVo)
            const localVarPath = `/v1/resort/facility/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resortFacilityPageInqInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 휴양 시설 수정 api
         * @summary 휴양 시설 수정
         * @param {ResortFacilityInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcResortFacility: async (inVo: ResortFacilityInVo, files?: Array<File>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inVo' is not null or undefined
            assertParamExists('mdfcResortFacility', 'inVo', inVo)
            const localVarPath = `/v1/resort/facility/modify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (files) {
                files.forEach((element) => {
                  localVarFormParams.append('files', element as any);
                })
            }

    
            if (inVo !== undefined) { 
                localVarFormParams.append('inVo', new Blob([JSON.stringify(inVo)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 휴양시설 등록 api
         * @summary 휴양시설 등록
         * @param {ResortFacilityInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnResortFacility: async (inVo: ResortFacilityInVo, files?: Array<File>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inVo' is not null or undefined
            assertParamExists('rgsnResortFacility', 'inVo', inVo)
            const localVarPath = `/v1/resort/facility/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (files) {
                files.forEach((element) => {
                  localVarFormParams.append('files', element as any);
                })
            }

    
            if (inVo !== undefined) { 
                localVarFormParams.append('inVo', new Blob([JSON.stringify(inVo)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ResortFacilityControllerApi - functional programming interface
 * @export
 */
export const ResortFacilityControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ResortFacilityControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 휴양시설 등록전 중복체크 api
         * @summary 휴양시설 등록전 중복체크
         * @param {ResortFacilityInVo} resortFacilityInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkResortFacility(resortFacilityInVo: ResortFacilityInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkResortFacility(resortFacilityInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ResortFacilityControllerApi.checkResortFacility']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 휴양 시설 단일 삭제 api
         * @summary 휴양 시설 단일 삭제
         * @param {ResortFacilityInVo} resortFacilityInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delResortFacility(resortFacilityInVo: ResortFacilityInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delResortFacility(resortFacilityInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ResortFacilityControllerApi.delResortFacility']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 휴양 시설 멀티 삭제 api
         * @summary 휴양 시설 멀티 삭제
         * @param {Array<ResortFacilityInVo>} resortFacilityInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delResortFacilityMulti(resortFacilityInVo: Array<ResortFacilityInVo>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delResortFacilityMulti(resortFacilityInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ResortFacilityControllerApi.delResortFacilityMulti']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 휴양 시설 상세 정보 조회 api
         * @summary 휴양 시설 상세 정보 조회
         * @param {ResortFacilityInVo} resortFacilityInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqResortFacilityDtl(resortFacilityInVo: ResortFacilityInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResortFacilityOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqResortFacilityDtl(resortFacilityInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ResortFacilityControllerApi.inqResortFacilityDtl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 휴양시설 페이징 리스트 api
         * @summary 휴양시설 페이징 리스트
         * @param {ResortFacilityPageInqInVo} resortFacilityPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqResortFacilityPage(resortFacilityPageInqInVo: ResortFacilityPageInqInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageResortFacilityOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqResortFacilityPage(resortFacilityPageInqInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ResortFacilityControllerApi.inqResortFacilityPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 휴양 시설 수정 api
         * @summary 휴양 시설 수정
         * @param {ResortFacilityInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mdfcResortFacility(inVo: ResortFacilityInVo, files?: Array<File>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mdfcResortFacility(inVo, files, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ResortFacilityControllerApi.mdfcResortFacility']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 휴양시설 등록 api
         * @summary 휴양시설 등록
         * @param {ResortFacilityInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rgsnResortFacility(inVo: ResortFacilityInVo, files?: Array<File>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rgsnResortFacility(inVo, files, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ResortFacilityControllerApi.rgsnResortFacility']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ResortFacilityControllerApi - factory interface
 * @export
 */
export const ResortFacilityControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ResortFacilityControllerApiFp(configuration)
    return {
        /**
         * 휴양시설 등록전 중복체크 api
         * @summary 휴양시설 등록전 중복체크
         * @param {ResortFacilityInVo} resortFacilityInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkResortFacility(resortFacilityInVo: ResortFacilityInVo, options?: any): AxiosPromise<number> {
            return localVarFp.checkResortFacility(resortFacilityInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 휴양 시설 단일 삭제 api
         * @summary 휴양 시설 단일 삭제
         * @param {ResortFacilityInVo} resortFacilityInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delResortFacility(resortFacilityInVo: ResortFacilityInVo, options?: any): AxiosPromise<void> {
            return localVarFp.delResortFacility(resortFacilityInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 휴양 시설 멀티 삭제 api
         * @summary 휴양 시설 멀티 삭제
         * @param {Array<ResortFacilityInVo>} resortFacilityInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delResortFacilityMulti(resortFacilityInVo: Array<ResortFacilityInVo>, options?: any): AxiosPromise<void> {
            return localVarFp.delResortFacilityMulti(resortFacilityInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 휴양 시설 상세 정보 조회 api
         * @summary 휴양 시설 상세 정보 조회
         * @param {ResortFacilityInVo} resortFacilityInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqResortFacilityDtl(resortFacilityInVo: ResortFacilityInVo, options?: any): AxiosPromise<ResortFacilityOutVo> {
            return localVarFp.inqResortFacilityDtl(resortFacilityInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 휴양시설 페이징 리스트 api
         * @summary 휴양시설 페이징 리스트
         * @param {ResortFacilityPageInqInVo} resortFacilityPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqResortFacilityPage(resortFacilityPageInqInVo: ResortFacilityPageInqInVo, options?: any): AxiosPromise<PageResortFacilityOutVo> {
            return localVarFp.inqResortFacilityPage(resortFacilityPageInqInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 휴양 시설 수정 api
         * @summary 휴양 시설 수정
         * @param {ResortFacilityInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcResortFacility(inVo: ResortFacilityInVo, files?: Array<File>, options?: any): AxiosPromise<void> {
            return localVarFp.mdfcResortFacility(inVo, files, options).then((request) => request(axios, basePath));
        },
        /**
         * 휴양시설 등록 api
         * @summary 휴양시설 등록
         * @param {ResortFacilityInVo} inVo 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnResortFacility(inVo: ResortFacilityInVo, files?: Array<File>, options?: any): AxiosPromise<void> {
            return localVarFp.rgsnResortFacility(inVo, files, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ResortFacilityControllerApi - object-oriented interface
 * @export
 * @class ResortFacilityControllerApi
 * @extends {BaseAPI}
 */
export class ResortFacilityControllerApi extends BaseAPI {
    /**
     * 휴양시설 등록전 중복체크 api
     * @summary 휴양시설 등록전 중복체크
     * @param {ResortFacilityInVo} resortFacilityInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResortFacilityControllerApi
     */
    public checkResortFacility(resortFacilityInVo: ResortFacilityInVo, options?: RawAxiosRequestConfig) {
        return ResortFacilityControllerApiFp(this.configuration).checkResortFacility(resortFacilityInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 휴양 시설 단일 삭제 api
     * @summary 휴양 시설 단일 삭제
     * @param {ResortFacilityInVo} resortFacilityInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResortFacilityControllerApi
     */
    public delResortFacility(resortFacilityInVo: ResortFacilityInVo, options?: RawAxiosRequestConfig) {
        return ResortFacilityControllerApiFp(this.configuration).delResortFacility(resortFacilityInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 휴양 시설 멀티 삭제 api
     * @summary 휴양 시설 멀티 삭제
     * @param {Array<ResortFacilityInVo>} resortFacilityInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResortFacilityControllerApi
     */
    public delResortFacilityMulti(resortFacilityInVo: Array<ResortFacilityInVo>, options?: RawAxiosRequestConfig) {
        return ResortFacilityControllerApiFp(this.configuration).delResortFacilityMulti(resortFacilityInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 휴양 시설 상세 정보 조회 api
     * @summary 휴양 시설 상세 정보 조회
     * @param {ResortFacilityInVo} resortFacilityInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResortFacilityControllerApi
     */
    public inqResortFacilityDtl(resortFacilityInVo: ResortFacilityInVo, options?: RawAxiosRequestConfig) {
        return ResortFacilityControllerApiFp(this.configuration).inqResortFacilityDtl(resortFacilityInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 휴양시설 페이징 리스트 api
     * @summary 휴양시설 페이징 리스트
     * @param {ResortFacilityPageInqInVo} resortFacilityPageInqInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResortFacilityControllerApi
     */
    public inqResortFacilityPage(resortFacilityPageInqInVo: ResortFacilityPageInqInVo, options?: RawAxiosRequestConfig) {
        return ResortFacilityControllerApiFp(this.configuration).inqResortFacilityPage(resortFacilityPageInqInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 휴양 시설 수정 api
     * @summary 휴양 시설 수정
     * @param {ResortFacilityInVo} inVo 
     * @param {Array<File>} [files] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResortFacilityControllerApi
     */
    public mdfcResortFacility(inVo: ResortFacilityInVo, files?: Array<File>, options?: RawAxiosRequestConfig) {
        return ResortFacilityControllerApiFp(this.configuration).mdfcResortFacility(inVo, files, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 휴양시설 등록 api
     * @summary 휴양시설 등록
     * @param {ResortFacilityInVo} inVo 
     * @param {Array<File>} [files] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResortFacilityControllerApi
     */
    public rgsnResortFacility(inVo: ResortFacilityInVo, files?: Array<File>, options?: RawAxiosRequestConfig) {
        return ResortFacilityControllerApiFp(this.configuration).rgsnResortFacility(inVo, files, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ResortFacilityRequestControllerApi - axios parameter creator
 * @export
 */
export const ResortFacilityRequestControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 휴양 시설 회차 체크 api
         * @summary 휴양 시설 회차 체크
         * @param {ResortFacilityRequestInVo} resortFacilityRequestInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkResortFacilityTob: async (resortFacilityRequestInVo: ResortFacilityRequestInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resortFacilityRequestInVo' is not null or undefined
            assertParamExists('checkResortFacilityTob', 'resortFacilityRequestInVo', resortFacilityRequestInVo)
            const localVarPath = `/v1/resort/facility/request/tob/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resortFacilityRequestInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 휴양 시설 신청 멀티 삭제 api
         * @summary 휴양 시설 신청 멀티 삭제
         * @param {Array<ResortFacilityRequestInVo>} resortFacilityRequestInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delResortFacilityRequestMulti: async (resortFacilityRequestInVo: Array<ResortFacilityRequestInVo>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resortFacilityRequestInVo' is not null or undefined
            assertParamExists('delResortFacilityRequestMulti', 'resortFacilityRequestInVo', resortFacilityRequestInVo)
            const localVarPath = `/v1/resort/facility/request/delete/multi`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resortFacilityRequestInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 감점 점수
         * @summary 감점 점수
         * @param {ResortFacilityRequestInVo} resortFacilityRequestInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqDmrkScr: async (resortFacilityRequestInVo: ResortFacilityRequestInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resortFacilityRequestInVo' is not null or undefined
            assertParamExists('inqDmrkScr', 'resortFacilityRequestInVo', resortFacilityRequestInVo)
            const localVarPath = `/v1/resort/facility/request/dmrk/Scr`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resortFacilityRequestInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 휴양 시설 승인 페이징 리스트 api
         * @summary 휴양 시설 승인 페이징 리스트
         * @param {ResortFacilityApprovalPageInqInVo} resortFacilityApprovalPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqResortFacilityApprovalPage: async (resortFacilityApprovalPageInqInVo: ResortFacilityApprovalPageInqInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resortFacilityApprovalPageInqInVo' is not null or undefined
            assertParamExists('inqResortFacilityApprovalPage', 'resortFacilityApprovalPageInqInVo', resortFacilityApprovalPageInqInVo)
            const localVarPath = `/v1/resort/facility/request/approval/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resortFacilityApprovalPageInqInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 휴양 시설 신청 페이징 리스트 api
         * @summary 마이페이지 휴양/시설 신청 현황 페이징 리스트
         * @param {ResortFacilityRequestMyPageInqInVo} resortFacilityRequestMyPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqResortFacilityRequestMyPage: async (resortFacilityRequestMyPageInqInVo: ResortFacilityRequestMyPageInqInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resortFacilityRequestMyPageInqInVo' is not null or undefined
            assertParamExists('inqResortFacilityRequestMyPage', 'resortFacilityRequestMyPageInqInVo', resortFacilityRequestMyPageInqInVo)
            const localVarPath = `/v1/resort/facility/request/my/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resortFacilityRequestMyPageInqInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 휴양 시설 신청 페이징 리스트 api
         * @summary 휴양 시설 신청 페이징 리스트
         * @param {ResortFacilityRequestPageInqInVo} resortFacilityRequestPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqResortFacilityRequestPage: async (resortFacilityRequestPageInqInVo: ResortFacilityRequestPageInqInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resortFacilityRequestPageInqInVo' is not null or undefined
            assertParamExists('inqResortFacilityRequestPage', 'resortFacilityRequestPageInqInVo', resortFacilityRequestPageInqInVo)
            const localVarPath = `/v1/resort/facility/request/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resortFacilityRequestPageInqInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 휴양 시설 승인 페이징 리스트 api
         * @summary 휴양 시설 승인 업데이트 페이징 리스트
         * @param {Array<ResortFacilityApprovalInVo>} resortFacilityApprovalInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcResortFacilityApproval: async (resortFacilityApprovalInVo: Array<ResortFacilityApprovalInVo>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resortFacilityApprovalInVo' is not null or undefined
            assertParamExists('mdfcResortFacilityApproval', 'resortFacilityApprovalInVo', resortFacilityApprovalInVo)
            const localVarPath = `/v1/resort/facility/request/approval/modify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resortFacilityApprovalInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 휴양 시설 신청 취소 api
         * @summary 휴양 시설 신청 취소
         * @param {ResortFacilityRequestInVo} resortFacilityRequestInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcResortFacilityRequestCancel: async (resortFacilityRequestInVo: ResortFacilityRequestInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resortFacilityRequestInVo' is not null or undefined
            assertParamExists('mdfcResortFacilityRequestCancel', 'resortFacilityRequestInVo', resortFacilityRequestInVo)
            const localVarPath = `/v1/resort/facility/request/cancel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resortFacilityRequestInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 휴양 시설 신청 관리 등록 api
         * @summary 휴양 시설 신청 관리 등록
         * @param {ResortFacilityRequestInVo} resortFacilityRequestInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsResortFacilityRequest: async (resortFacilityRequestInVo: ResortFacilityRequestInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resortFacilityRequestInVo' is not null or undefined
            assertParamExists('rgsResortFacilityRequest', 'resortFacilityRequestInVo', resortFacilityRequestInVo)
            const localVarPath = `/v1/resort/facility/request/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resortFacilityRequestInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 휴양 시설 신청 관리 등록 체크 api
         * @summary 휴양 시설 신청 관리 등록 체크
         * @param {ResortFacilityRequestInVo} resortFacilityRequestInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnCheckResortFacilityRequest: async (resortFacilityRequestInVo: ResortFacilityRequestInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resortFacilityRequestInVo' is not null or undefined
            assertParamExists('rgsnCheckResortFacilityRequest', 'resortFacilityRequestInVo', resortFacilityRequestInVo)
            const localVarPath = `/v1/resort/facility/request/save/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resortFacilityRequestInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ResortFacilityRequestControllerApi - functional programming interface
 * @export
 */
export const ResortFacilityRequestControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ResortFacilityRequestControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 휴양 시설 회차 체크 api
         * @summary 휴양 시설 회차 체크
         * @param {ResortFacilityRequestInVo} resortFacilityRequestInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkResortFacilityTob(resortFacilityRequestInVo: ResortFacilityRequestInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResortFacilityScheduleOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkResortFacilityTob(resortFacilityRequestInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ResortFacilityRequestControllerApi.checkResortFacilityTob']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 휴양 시설 신청 멀티 삭제 api
         * @summary 휴양 시설 신청 멀티 삭제
         * @param {Array<ResortFacilityRequestInVo>} resortFacilityRequestInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delResortFacilityRequestMulti(resortFacilityRequestInVo: Array<ResortFacilityRequestInVo>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delResortFacilityRequestMulti(resortFacilityRequestInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ResortFacilityRequestControllerApi.delResortFacilityRequestMulti']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 감점 점수
         * @summary 감점 점수
         * @param {ResortFacilityRequestInVo} resortFacilityRequestInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqDmrkScr(resortFacilityRequestInVo: ResortFacilityRequestInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResortFacilityRequestOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqDmrkScr(resortFacilityRequestInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ResortFacilityRequestControllerApi.inqDmrkScr']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 휴양 시설 승인 페이징 리스트 api
         * @summary 휴양 시설 승인 페이징 리스트
         * @param {ResortFacilityApprovalPageInqInVo} resortFacilityApprovalPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqResortFacilityApprovalPage(resortFacilityApprovalPageInqInVo: ResortFacilityApprovalPageInqInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageResortFacilityApprovalOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqResortFacilityApprovalPage(resortFacilityApprovalPageInqInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ResortFacilityRequestControllerApi.inqResortFacilityApprovalPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 휴양 시설 신청 페이징 리스트 api
         * @summary 마이페이지 휴양/시설 신청 현황 페이징 리스트
         * @param {ResortFacilityRequestMyPageInqInVo} resortFacilityRequestMyPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqResortFacilityRequestMyPage(resortFacilityRequestMyPageInqInVo: ResortFacilityRequestMyPageInqInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageResortFacilityRequestMyOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqResortFacilityRequestMyPage(resortFacilityRequestMyPageInqInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ResortFacilityRequestControllerApi.inqResortFacilityRequestMyPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 휴양 시설 신청 페이징 리스트 api
         * @summary 휴양 시설 신청 페이징 리스트
         * @param {ResortFacilityRequestPageInqInVo} resortFacilityRequestPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqResortFacilityRequestPage(resortFacilityRequestPageInqInVo: ResortFacilityRequestPageInqInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageResortFacilityRequestOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqResortFacilityRequestPage(resortFacilityRequestPageInqInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ResortFacilityRequestControllerApi.inqResortFacilityRequestPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 휴양 시설 승인 페이징 리스트 api
         * @summary 휴양 시설 승인 업데이트 페이징 리스트
         * @param {Array<ResortFacilityApprovalInVo>} resortFacilityApprovalInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mdfcResortFacilityApproval(resortFacilityApprovalInVo: Array<ResortFacilityApprovalInVo>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mdfcResortFacilityApproval(resortFacilityApprovalInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ResortFacilityRequestControllerApi.mdfcResortFacilityApproval']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 휴양 시설 신청 취소 api
         * @summary 휴양 시설 신청 취소
         * @param {ResortFacilityRequestInVo} resortFacilityRequestInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mdfcResortFacilityRequestCancel(resortFacilityRequestInVo: ResortFacilityRequestInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mdfcResortFacilityRequestCancel(resortFacilityRequestInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ResortFacilityRequestControllerApi.mdfcResortFacilityRequestCancel']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 휴양 시설 신청 관리 등록 api
         * @summary 휴양 시설 신청 관리 등록
         * @param {ResortFacilityRequestInVo} resortFacilityRequestInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rgsResortFacilityRequest(resortFacilityRequestInVo: ResortFacilityRequestInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rgsResortFacilityRequest(resortFacilityRequestInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ResortFacilityRequestControllerApi.rgsResortFacilityRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 휴양 시설 신청 관리 등록 체크 api
         * @summary 휴양 시설 신청 관리 등록 체크
         * @param {ResortFacilityRequestInVo} resortFacilityRequestInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rgsnCheckResortFacilityRequest(resortFacilityRequestInVo: ResortFacilityRequestInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rgsnCheckResortFacilityRequest(resortFacilityRequestInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ResortFacilityRequestControllerApi.rgsnCheckResortFacilityRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ResortFacilityRequestControllerApi - factory interface
 * @export
 */
export const ResortFacilityRequestControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ResortFacilityRequestControllerApiFp(configuration)
    return {
        /**
         * 휴양 시설 회차 체크 api
         * @summary 휴양 시설 회차 체크
         * @param {ResortFacilityRequestInVo} resortFacilityRequestInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkResortFacilityTob(resortFacilityRequestInVo: ResortFacilityRequestInVo, options?: any): AxiosPromise<ResortFacilityScheduleOutVo> {
            return localVarFp.checkResortFacilityTob(resortFacilityRequestInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 휴양 시설 신청 멀티 삭제 api
         * @summary 휴양 시설 신청 멀티 삭제
         * @param {Array<ResortFacilityRequestInVo>} resortFacilityRequestInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delResortFacilityRequestMulti(resortFacilityRequestInVo: Array<ResortFacilityRequestInVo>, options?: any): AxiosPromise<void> {
            return localVarFp.delResortFacilityRequestMulti(resortFacilityRequestInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 감점 점수
         * @summary 감점 점수
         * @param {ResortFacilityRequestInVo} resortFacilityRequestInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqDmrkScr(resortFacilityRequestInVo: ResortFacilityRequestInVo, options?: any): AxiosPromise<ResortFacilityRequestOutVo> {
            return localVarFp.inqDmrkScr(resortFacilityRequestInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 휴양 시설 승인 페이징 리스트 api
         * @summary 휴양 시설 승인 페이징 리스트
         * @param {ResortFacilityApprovalPageInqInVo} resortFacilityApprovalPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqResortFacilityApprovalPage(resortFacilityApprovalPageInqInVo: ResortFacilityApprovalPageInqInVo, options?: any): AxiosPromise<PageResortFacilityApprovalOutVo> {
            return localVarFp.inqResortFacilityApprovalPage(resortFacilityApprovalPageInqInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 휴양 시설 신청 페이징 리스트 api
         * @summary 마이페이지 휴양/시설 신청 현황 페이징 리스트
         * @param {ResortFacilityRequestMyPageInqInVo} resortFacilityRequestMyPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqResortFacilityRequestMyPage(resortFacilityRequestMyPageInqInVo: ResortFacilityRequestMyPageInqInVo, options?: any): AxiosPromise<PageResortFacilityRequestMyOutVo> {
            return localVarFp.inqResortFacilityRequestMyPage(resortFacilityRequestMyPageInqInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 휴양 시설 신청 페이징 리스트 api
         * @summary 휴양 시설 신청 페이징 리스트
         * @param {ResortFacilityRequestPageInqInVo} resortFacilityRequestPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqResortFacilityRequestPage(resortFacilityRequestPageInqInVo: ResortFacilityRequestPageInqInVo, options?: any): AxiosPromise<PageResortFacilityRequestOutVo> {
            return localVarFp.inqResortFacilityRequestPage(resortFacilityRequestPageInqInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 휴양 시설 승인 페이징 리스트 api
         * @summary 휴양 시설 승인 업데이트 페이징 리스트
         * @param {Array<ResortFacilityApprovalInVo>} resortFacilityApprovalInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcResortFacilityApproval(resortFacilityApprovalInVo: Array<ResortFacilityApprovalInVo>, options?: any): AxiosPromise<void> {
            return localVarFp.mdfcResortFacilityApproval(resortFacilityApprovalInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 휴양 시설 신청 취소 api
         * @summary 휴양 시설 신청 취소
         * @param {ResortFacilityRequestInVo} resortFacilityRequestInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcResortFacilityRequestCancel(resortFacilityRequestInVo: ResortFacilityRequestInVo, options?: any): AxiosPromise<void> {
            return localVarFp.mdfcResortFacilityRequestCancel(resortFacilityRequestInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 휴양 시설 신청 관리 등록 api
         * @summary 휴양 시설 신청 관리 등록
         * @param {ResortFacilityRequestInVo} resortFacilityRequestInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsResortFacilityRequest(resortFacilityRequestInVo: ResortFacilityRequestInVo, options?: any): AxiosPromise<void> {
            return localVarFp.rgsResortFacilityRequest(resortFacilityRequestInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 휴양 시설 신청 관리 등록 체크 api
         * @summary 휴양 시설 신청 관리 등록 체크
         * @param {ResortFacilityRequestInVo} resortFacilityRequestInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsnCheckResortFacilityRequest(resortFacilityRequestInVo: ResortFacilityRequestInVo, options?: any): AxiosPromise<number> {
            return localVarFp.rgsnCheckResortFacilityRequest(resortFacilityRequestInVo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ResortFacilityRequestControllerApi - object-oriented interface
 * @export
 * @class ResortFacilityRequestControllerApi
 * @extends {BaseAPI}
 */
export class ResortFacilityRequestControllerApi extends BaseAPI {
    /**
     * 휴양 시설 회차 체크 api
     * @summary 휴양 시설 회차 체크
     * @param {ResortFacilityRequestInVo} resortFacilityRequestInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResortFacilityRequestControllerApi
     */
    public checkResortFacilityTob(resortFacilityRequestInVo: ResortFacilityRequestInVo, options?: RawAxiosRequestConfig) {
        return ResortFacilityRequestControllerApiFp(this.configuration).checkResortFacilityTob(resortFacilityRequestInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 휴양 시설 신청 멀티 삭제 api
     * @summary 휴양 시설 신청 멀티 삭제
     * @param {Array<ResortFacilityRequestInVo>} resortFacilityRequestInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResortFacilityRequestControllerApi
     */
    public delResortFacilityRequestMulti(resortFacilityRequestInVo: Array<ResortFacilityRequestInVo>, options?: RawAxiosRequestConfig) {
        return ResortFacilityRequestControllerApiFp(this.configuration).delResortFacilityRequestMulti(resortFacilityRequestInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 감점 점수
     * @summary 감점 점수
     * @param {ResortFacilityRequestInVo} resortFacilityRequestInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResortFacilityRequestControllerApi
     */
    public inqDmrkScr(resortFacilityRequestInVo: ResortFacilityRequestInVo, options?: RawAxiosRequestConfig) {
        return ResortFacilityRequestControllerApiFp(this.configuration).inqDmrkScr(resortFacilityRequestInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 휴양 시설 승인 페이징 리스트 api
     * @summary 휴양 시설 승인 페이징 리스트
     * @param {ResortFacilityApprovalPageInqInVo} resortFacilityApprovalPageInqInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResortFacilityRequestControllerApi
     */
    public inqResortFacilityApprovalPage(resortFacilityApprovalPageInqInVo: ResortFacilityApprovalPageInqInVo, options?: RawAxiosRequestConfig) {
        return ResortFacilityRequestControllerApiFp(this.configuration).inqResortFacilityApprovalPage(resortFacilityApprovalPageInqInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 휴양 시설 신청 페이징 리스트 api
     * @summary 마이페이지 휴양/시설 신청 현황 페이징 리스트
     * @param {ResortFacilityRequestMyPageInqInVo} resortFacilityRequestMyPageInqInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResortFacilityRequestControllerApi
     */
    public inqResortFacilityRequestMyPage(resortFacilityRequestMyPageInqInVo: ResortFacilityRequestMyPageInqInVo, options?: RawAxiosRequestConfig) {
        return ResortFacilityRequestControllerApiFp(this.configuration).inqResortFacilityRequestMyPage(resortFacilityRequestMyPageInqInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 휴양 시설 신청 페이징 리스트 api
     * @summary 휴양 시설 신청 페이징 리스트
     * @param {ResortFacilityRequestPageInqInVo} resortFacilityRequestPageInqInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResortFacilityRequestControllerApi
     */
    public inqResortFacilityRequestPage(resortFacilityRequestPageInqInVo: ResortFacilityRequestPageInqInVo, options?: RawAxiosRequestConfig) {
        return ResortFacilityRequestControllerApiFp(this.configuration).inqResortFacilityRequestPage(resortFacilityRequestPageInqInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 휴양 시설 승인 페이징 리스트 api
     * @summary 휴양 시설 승인 업데이트 페이징 리스트
     * @param {Array<ResortFacilityApprovalInVo>} resortFacilityApprovalInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResortFacilityRequestControllerApi
     */
    public mdfcResortFacilityApproval(resortFacilityApprovalInVo: Array<ResortFacilityApprovalInVo>, options?: RawAxiosRequestConfig) {
        return ResortFacilityRequestControllerApiFp(this.configuration).mdfcResortFacilityApproval(resortFacilityApprovalInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 휴양 시설 신청 취소 api
     * @summary 휴양 시설 신청 취소
     * @param {ResortFacilityRequestInVo} resortFacilityRequestInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResortFacilityRequestControllerApi
     */
    public mdfcResortFacilityRequestCancel(resortFacilityRequestInVo: ResortFacilityRequestInVo, options?: RawAxiosRequestConfig) {
        return ResortFacilityRequestControllerApiFp(this.configuration).mdfcResortFacilityRequestCancel(resortFacilityRequestInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 휴양 시설 신청 관리 등록 api
     * @summary 휴양 시설 신청 관리 등록
     * @param {ResortFacilityRequestInVo} resortFacilityRequestInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResortFacilityRequestControllerApi
     */
    public rgsResortFacilityRequest(resortFacilityRequestInVo: ResortFacilityRequestInVo, options?: RawAxiosRequestConfig) {
        return ResortFacilityRequestControllerApiFp(this.configuration).rgsResortFacilityRequest(resortFacilityRequestInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 휴양 시설 신청 관리 등록 체크 api
     * @summary 휴양 시설 신청 관리 등록 체크
     * @param {ResortFacilityRequestInVo} resortFacilityRequestInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResortFacilityRequestControllerApi
     */
    public rgsnCheckResortFacilityRequest(resortFacilityRequestInVo: ResortFacilityRequestInVo, options?: RawAxiosRequestConfig) {
        return ResortFacilityRequestControllerApiFp(this.configuration).rgsnCheckResortFacilityRequest(resortFacilityRequestInVo, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SkillRoadmapControllerApi - axios parameter creator
 * @export
 */
export const SkillRoadmapControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 역량개발지원 로드맵 조회
         * @summary 역량개발지원 로드맵 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqSklRoadmap: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/skl/roadmap/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 부점 조회
         * @summary 부점 조회
         * @param {SklRoadmapBranchSearchInVo} sklRoadmapBranchSearchInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqSklRoadmapBranchSearchList: async (sklRoadmapBranchSearchInVo: SklRoadmapBranchSearchInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sklRoadmapBranchSearchInVo' is not null or undefined
            assertParamExists('inqSklRoadmapBranchSearchList', 'sklRoadmapBranchSearchInVo', sklRoadmapBranchSearchInVo)
            const localVarPath = `/v1/skl/roadmap/branch/search/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sklRoadmapBranchSearchInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 부점별 사용자 스킬 통계 조회
         * @summary 부점별 사용자 스킬 통계 조회
         * @param {SklRoadmapBranchStatisticsUserInVo} sklRoadmapBranchStatisticsUserInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqSklRoadmapBranchStatisticsUserList: async (sklRoadmapBranchStatisticsUserInVo: SklRoadmapBranchStatisticsUserInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sklRoadmapBranchStatisticsUserInVo' is not null or undefined
            assertParamExists('inqSklRoadmapBranchStatisticsUserList', 'sklRoadmapBranchStatisticsUserInVo', sklRoadmapBranchStatisticsUserInVo)
            const localVarPath = `/v1/skl/roadmap/branch/statistics/user/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sklRoadmapBranchStatisticsUserInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 스킬 카테고리 조회
         * @summary 스킬 카테고리 조회
         * @param {SklRoadmapCategoryInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqSklRoadmapCategoryList: async (arg0: SklRoadmapCategoryInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'arg0' is not null or undefined
            assertParamExists('inqSklRoadmapCategoryList', 'arg0', arg0)
            const localVarPath = `/v1/skl/roadmap/category/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (arg0 !== undefined) {
                for (const [key, value] of Object.entries(arg0)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 역량개발지원 스킬 연수 조회
         * @summary 역량개발지원 스킬 연수 조회
         * @param {SklRoadmapCourseInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqSklRoadmapCourseList: async (arg0: SklRoadmapCourseInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'arg0' is not null or undefined
            assertParamExists('inqSklRoadmapCourseList', 'arg0', arg0)
            const localVarPath = `/v1/skl/roadmap/course/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (arg0 !== undefined) {
                for (const [key, value] of Object.entries(arg0)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 월별 이력 조회
         * @summary 월별 이력 조회
         * @param {SklRoadmapHistoryMonthlyInVo} sklRoadmapHistoryMonthlyInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqSklRoadmapHistoryMonthly: async (sklRoadmapHistoryMonthlyInVo: SklRoadmapHistoryMonthlyInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sklRoadmapHistoryMonthlyInVo' is not null or undefined
            assertParamExists('inqSklRoadmapHistoryMonthly', 'sklRoadmapHistoryMonthlyInVo', sklRoadmapHistoryMonthlyInVo)
            const localVarPath = `/v1/skl/roadmap/history/monthly`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sklRoadmapHistoryMonthlyInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 월별 이력 조회
         * @summary 월별 이력 조회
         * @param {SklRoadmapHistoryMonthlyInVo} sklRoadmapHistoryMonthlyInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqSklRoadmapHistoryStatusMonthly: async (sklRoadmapHistoryMonthlyInVo: SklRoadmapHistoryMonthlyInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sklRoadmapHistoryMonthlyInVo' is not null or undefined
            assertParamExists('inqSklRoadmapHistoryStatusMonthly', 'sklRoadmapHistoryMonthlyInVo', sklRoadmapHistoryMonthlyInVo)
            const localVarPath = `/v1/skl/roadmap/history/status/monthly`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sklRoadmapHistoryMonthlyInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 스킬 레벨 기준 조회
         * @summary 스킬 레벨 기준
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqSklRoadmapLevelStandard: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/skl/roadmap/level/standard`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 스킬 레벨 기준 조회
         * @summary 자격증 등급 레벨 기준
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqSklRoadmapLicenseGradeStandard: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/skl/roadmap/license/grade/standard`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 역량개발지원 로드맵 자격증 조회
         * @summary 역량개발지원 로드맵 자격증 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqSklRoadmapLicenseList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/skl/roadmap/license/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SkillRoadmapControllerApi - functional programming interface
 * @export
 */
export const SkillRoadmapControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SkillRoadmapControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 역량개발지원 로드맵 조회
         * @summary 역량개발지원 로드맵 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqSklRoadmap(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SklRoadmapOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqSklRoadmap(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SkillRoadmapControllerApi.inqSklRoadmap']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 부점 조회
         * @summary 부점 조회
         * @param {SklRoadmapBranchSearchInVo} sklRoadmapBranchSearchInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqSklRoadmapBranchSearchList(sklRoadmapBranchSearchInVo: SklRoadmapBranchSearchInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SklRoadmapBranchSearchOutVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqSklRoadmapBranchSearchList(sklRoadmapBranchSearchInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SkillRoadmapControllerApi.inqSklRoadmapBranchSearchList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 부점별 사용자 스킬 통계 조회
         * @summary 부점별 사용자 스킬 통계 조회
         * @param {SklRoadmapBranchStatisticsUserInVo} sklRoadmapBranchStatisticsUserInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqSklRoadmapBranchStatisticsUserList(sklRoadmapBranchStatisticsUserInVo: SklRoadmapBranchStatisticsUserInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SklRoadmapBranchStatisticsUserOutVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqSklRoadmapBranchStatisticsUserList(sklRoadmapBranchStatisticsUserInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SkillRoadmapControllerApi.inqSklRoadmapBranchStatisticsUserList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 스킬 카테고리 조회
         * @summary 스킬 카테고리 조회
         * @param {SklRoadmapCategoryInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqSklRoadmapCategoryList(arg0: SklRoadmapCategoryInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SklRoadmapCategoryOutVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqSklRoadmapCategoryList(arg0, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SkillRoadmapControllerApi.inqSklRoadmapCategoryList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 역량개발지원 스킬 연수 조회
         * @summary 역량개발지원 스킬 연수 조회
         * @param {SklRoadmapCourseInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqSklRoadmapCourseList(arg0: SklRoadmapCourseInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageSklRoadmapCourseOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqSklRoadmapCourseList(arg0, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SkillRoadmapControllerApi.inqSklRoadmapCourseList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 월별 이력 조회
         * @summary 월별 이력 조회
         * @param {SklRoadmapHistoryMonthlyInVo} sklRoadmapHistoryMonthlyInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqSklRoadmapHistoryMonthly(sklRoadmapHistoryMonthlyInVo: SklRoadmapHistoryMonthlyInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SklRoadmapHistoryMonthlyOutVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqSklRoadmapHistoryMonthly(sklRoadmapHistoryMonthlyInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SkillRoadmapControllerApi.inqSklRoadmapHistoryMonthly']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 월별 이력 조회
         * @summary 월별 이력 조회
         * @param {SklRoadmapHistoryMonthlyInVo} sklRoadmapHistoryMonthlyInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqSklRoadmapHistoryStatusMonthly(sklRoadmapHistoryMonthlyInVo: SklRoadmapHistoryMonthlyInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SklRoadmapHistoryMonthlyOutVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqSklRoadmapHistoryStatusMonthly(sklRoadmapHistoryMonthlyInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SkillRoadmapControllerApi.inqSklRoadmapHistoryStatusMonthly']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 스킬 레벨 기준 조회
         * @summary 스킬 레벨 기준
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqSklRoadmapLevelStandard(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SklRoadmapLevelStandardOutVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqSklRoadmapLevelStandard(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SkillRoadmapControllerApi.inqSklRoadmapLevelStandard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 스킬 레벨 기준 조회
         * @summary 자격증 등급 레벨 기준
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqSklRoadmapLicenseGradeStandard(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SklRoadmapLicenseGradeStandardOutVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqSklRoadmapLicenseGradeStandard(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SkillRoadmapControllerApi.inqSklRoadmapLicenseGradeStandard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 역량개발지원 로드맵 자격증 조회
         * @summary 역량개발지원 로드맵 자격증 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqSklRoadmapLicenseList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SklRoadmapLicenseOutVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqSklRoadmapLicenseList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SkillRoadmapControllerApi.inqSklRoadmapLicenseList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SkillRoadmapControllerApi - factory interface
 * @export
 */
export const SkillRoadmapControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SkillRoadmapControllerApiFp(configuration)
    return {
        /**
         * 역량개발지원 로드맵 조회
         * @summary 역량개발지원 로드맵 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqSklRoadmap(options?: any): AxiosPromise<SklRoadmapOutVo> {
            return localVarFp.inqSklRoadmap(options).then((request) => request(axios, basePath));
        },
        /**
         * 부점 조회
         * @summary 부점 조회
         * @param {SklRoadmapBranchSearchInVo} sklRoadmapBranchSearchInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqSklRoadmapBranchSearchList(sklRoadmapBranchSearchInVo: SklRoadmapBranchSearchInVo, options?: any): AxiosPromise<Array<SklRoadmapBranchSearchOutVo>> {
            return localVarFp.inqSklRoadmapBranchSearchList(sklRoadmapBranchSearchInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 부점별 사용자 스킬 통계 조회
         * @summary 부점별 사용자 스킬 통계 조회
         * @param {SklRoadmapBranchStatisticsUserInVo} sklRoadmapBranchStatisticsUserInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqSklRoadmapBranchStatisticsUserList(sklRoadmapBranchStatisticsUserInVo: SklRoadmapBranchStatisticsUserInVo, options?: any): AxiosPromise<Array<SklRoadmapBranchStatisticsUserOutVo>> {
            return localVarFp.inqSklRoadmapBranchStatisticsUserList(sklRoadmapBranchStatisticsUserInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 스킬 카테고리 조회
         * @summary 스킬 카테고리 조회
         * @param {SklRoadmapCategoryInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqSklRoadmapCategoryList(arg0: SklRoadmapCategoryInVo, options?: any): AxiosPromise<Array<SklRoadmapCategoryOutVo>> {
            return localVarFp.inqSklRoadmapCategoryList(arg0, options).then((request) => request(axios, basePath));
        },
        /**
         * 역량개발지원 스킬 연수 조회
         * @summary 역량개발지원 스킬 연수 조회
         * @param {SklRoadmapCourseInVo} arg0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqSklRoadmapCourseList(arg0: SklRoadmapCourseInVo, options?: any): AxiosPromise<PageSklRoadmapCourseOutVo> {
            return localVarFp.inqSklRoadmapCourseList(arg0, options).then((request) => request(axios, basePath));
        },
        /**
         * 월별 이력 조회
         * @summary 월별 이력 조회
         * @param {SklRoadmapHistoryMonthlyInVo} sklRoadmapHistoryMonthlyInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqSklRoadmapHistoryMonthly(sklRoadmapHistoryMonthlyInVo: SklRoadmapHistoryMonthlyInVo, options?: any): AxiosPromise<Array<SklRoadmapHistoryMonthlyOutVo>> {
            return localVarFp.inqSklRoadmapHistoryMonthly(sklRoadmapHistoryMonthlyInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 월별 이력 조회
         * @summary 월별 이력 조회
         * @param {SklRoadmapHistoryMonthlyInVo} sklRoadmapHistoryMonthlyInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqSklRoadmapHistoryStatusMonthly(sklRoadmapHistoryMonthlyInVo: SklRoadmapHistoryMonthlyInVo, options?: any): AxiosPromise<Array<SklRoadmapHistoryMonthlyOutVo>> {
            return localVarFp.inqSklRoadmapHistoryStatusMonthly(sklRoadmapHistoryMonthlyInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 스킬 레벨 기준 조회
         * @summary 스킬 레벨 기준
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqSklRoadmapLevelStandard(options?: any): AxiosPromise<Array<SklRoadmapLevelStandardOutVo>> {
            return localVarFp.inqSklRoadmapLevelStandard(options).then((request) => request(axios, basePath));
        },
        /**
         * 스킬 레벨 기준 조회
         * @summary 자격증 등급 레벨 기준
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqSklRoadmapLicenseGradeStandard(options?: any): AxiosPromise<Array<SklRoadmapLicenseGradeStandardOutVo>> {
            return localVarFp.inqSklRoadmapLicenseGradeStandard(options).then((request) => request(axios, basePath));
        },
        /**
         * 역량개발지원 로드맵 자격증 조회
         * @summary 역량개발지원 로드맵 자격증 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqSklRoadmapLicenseList(options?: any): AxiosPromise<Array<SklRoadmapLicenseOutVo>> {
            return localVarFp.inqSklRoadmapLicenseList(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SkillRoadmapControllerApi - object-oriented interface
 * @export
 * @class SkillRoadmapControllerApi
 * @extends {BaseAPI}
 */
export class SkillRoadmapControllerApi extends BaseAPI {
    /**
     * 역량개발지원 로드맵 조회
     * @summary 역량개발지원 로드맵 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillRoadmapControllerApi
     */
    public inqSklRoadmap(options?: RawAxiosRequestConfig) {
        return SkillRoadmapControllerApiFp(this.configuration).inqSklRoadmap(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 부점 조회
     * @summary 부점 조회
     * @param {SklRoadmapBranchSearchInVo} sklRoadmapBranchSearchInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillRoadmapControllerApi
     */
    public inqSklRoadmapBranchSearchList(sklRoadmapBranchSearchInVo: SklRoadmapBranchSearchInVo, options?: RawAxiosRequestConfig) {
        return SkillRoadmapControllerApiFp(this.configuration).inqSklRoadmapBranchSearchList(sklRoadmapBranchSearchInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 부점별 사용자 스킬 통계 조회
     * @summary 부점별 사용자 스킬 통계 조회
     * @param {SklRoadmapBranchStatisticsUserInVo} sklRoadmapBranchStatisticsUserInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillRoadmapControllerApi
     */
    public inqSklRoadmapBranchStatisticsUserList(sklRoadmapBranchStatisticsUserInVo: SklRoadmapBranchStatisticsUserInVo, options?: RawAxiosRequestConfig) {
        return SkillRoadmapControllerApiFp(this.configuration).inqSklRoadmapBranchStatisticsUserList(sklRoadmapBranchStatisticsUserInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 스킬 카테고리 조회
     * @summary 스킬 카테고리 조회
     * @param {SklRoadmapCategoryInVo} arg0 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillRoadmapControllerApi
     */
    public inqSklRoadmapCategoryList(arg0: SklRoadmapCategoryInVo, options?: RawAxiosRequestConfig) {
        return SkillRoadmapControllerApiFp(this.configuration).inqSklRoadmapCategoryList(arg0, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 역량개발지원 스킬 연수 조회
     * @summary 역량개발지원 스킬 연수 조회
     * @param {SklRoadmapCourseInVo} arg0 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillRoadmapControllerApi
     */
    public inqSklRoadmapCourseList(arg0: SklRoadmapCourseInVo, options?: RawAxiosRequestConfig) {
        return SkillRoadmapControllerApiFp(this.configuration).inqSklRoadmapCourseList(arg0, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 월별 이력 조회
     * @summary 월별 이력 조회
     * @param {SklRoadmapHistoryMonthlyInVo} sklRoadmapHistoryMonthlyInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillRoadmapControllerApi
     */
    public inqSklRoadmapHistoryMonthly(sklRoadmapHistoryMonthlyInVo: SklRoadmapHistoryMonthlyInVo, options?: RawAxiosRequestConfig) {
        return SkillRoadmapControllerApiFp(this.configuration).inqSklRoadmapHistoryMonthly(sklRoadmapHistoryMonthlyInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 월별 이력 조회
     * @summary 월별 이력 조회
     * @param {SklRoadmapHistoryMonthlyInVo} sklRoadmapHistoryMonthlyInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillRoadmapControllerApi
     */
    public inqSklRoadmapHistoryStatusMonthly(sklRoadmapHistoryMonthlyInVo: SklRoadmapHistoryMonthlyInVo, options?: RawAxiosRequestConfig) {
        return SkillRoadmapControllerApiFp(this.configuration).inqSklRoadmapHistoryStatusMonthly(sklRoadmapHistoryMonthlyInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 스킬 레벨 기준 조회
     * @summary 스킬 레벨 기준
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillRoadmapControllerApi
     */
    public inqSklRoadmapLevelStandard(options?: RawAxiosRequestConfig) {
        return SkillRoadmapControllerApiFp(this.configuration).inqSklRoadmapLevelStandard(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 스킬 레벨 기준 조회
     * @summary 자격증 등급 레벨 기준
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillRoadmapControllerApi
     */
    public inqSklRoadmapLicenseGradeStandard(options?: RawAxiosRequestConfig) {
        return SkillRoadmapControllerApiFp(this.configuration).inqSklRoadmapLicenseGradeStandard(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 역량개발지원 로드맵 자격증 조회
     * @summary 역량개발지원 로드맵 자격증 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillRoadmapControllerApi
     */
    public inqSklRoadmapLicenseList(options?: RawAxiosRequestConfig) {
        return SkillRoadmapControllerApiFp(this.configuration).inqSklRoadmapLicenseList(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SoftCampControllerApi - axios parameter creator
 * @export
 */
export const SoftCampControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 소프트캠프 무해화 게시판 결과 응답
         * @summary 소프트캠프 무해화 게시판 결과 응답
         * @param {SoftCampCallbackInVo} softCampCallbackInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        callback: async (softCampCallbackInVo: SoftCampCallbackInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'softCampCallbackInVo' is not null or undefined
            assertParamExists('callback', 'softCampCallbackInVo', softCampCallbackInVo)
            const localVarPath = `/v1/softcamp/board/callback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(softCampCallbackInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 소프트캠프 무해화 학원비 신청 응답
         * @summary 소프트캠프 무해화 학원비 신청 응답
         * @param {SoftCampCallbackInVo} softCampCallbackInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eduCostCallback: async (softCampCallbackInVo: SoftCampCallbackInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'softCampCallbackInVo' is not null or undefined
            assertParamExists('eduCostCallback', 'softCampCallbackInVo', softCampCallbackInVo)
            const localVarPath = `/v1/softcamp/edu/cost/callback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(softCampCallbackInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SoftCampControllerApi - functional programming interface
 * @export
 */
export const SoftCampControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SoftCampControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 소프트캠프 무해화 게시판 결과 응답
         * @summary 소프트캠프 무해화 게시판 결과 응답
         * @param {SoftCampCallbackInVo} softCampCallbackInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async callback(softCampCallbackInVo: SoftCampCallbackInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.callback(softCampCallbackInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SoftCampControllerApi.callback']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 소프트캠프 무해화 학원비 신청 응답
         * @summary 소프트캠프 무해화 학원비 신청 응답
         * @param {SoftCampCallbackInVo} softCampCallbackInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eduCostCallback(softCampCallbackInVo: SoftCampCallbackInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eduCostCallback(softCampCallbackInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SoftCampControllerApi.eduCostCallback']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SoftCampControllerApi - factory interface
 * @export
 */
export const SoftCampControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SoftCampControllerApiFp(configuration)
    return {
        /**
         * 소프트캠프 무해화 게시판 결과 응답
         * @summary 소프트캠프 무해화 게시판 결과 응답
         * @param {SoftCampCallbackInVo} softCampCallbackInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        callback(softCampCallbackInVo: SoftCampCallbackInVo, options?: any): AxiosPromise<void> {
            return localVarFp.callback(softCampCallbackInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 소프트캠프 무해화 학원비 신청 응답
         * @summary 소프트캠프 무해화 학원비 신청 응답
         * @param {SoftCampCallbackInVo} softCampCallbackInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eduCostCallback(softCampCallbackInVo: SoftCampCallbackInVo, options?: any): AxiosPromise<void> {
            return localVarFp.eduCostCallback(softCampCallbackInVo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SoftCampControllerApi - object-oriented interface
 * @export
 * @class SoftCampControllerApi
 * @extends {BaseAPI}
 */
export class SoftCampControllerApi extends BaseAPI {
    /**
     * 소프트캠프 무해화 게시판 결과 응답
     * @summary 소프트캠프 무해화 게시판 결과 응답
     * @param {SoftCampCallbackInVo} softCampCallbackInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoftCampControllerApi
     */
    public callback(softCampCallbackInVo: SoftCampCallbackInVo, options?: RawAxiosRequestConfig) {
        return SoftCampControllerApiFp(this.configuration).callback(softCampCallbackInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 소프트캠프 무해화 학원비 신청 응답
     * @summary 소프트캠프 무해화 학원비 신청 응답
     * @param {SoftCampCallbackInVo} softCampCallbackInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoftCampControllerApi
     */
    public eduCostCallback(softCampCallbackInVo: SoftCampCallbackInVo, options?: RawAxiosRequestConfig) {
        return SoftCampControllerApiFp(this.configuration).eduCostCallback(softCampCallbackInVo, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserControllerApi - axios parameter creator
 * @export
 */
export const UserControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 사용자 현재 패스워드 체크
         * @summary 사용자 현재 패스워드 체크
         * @param {UserUpdateInVo} userUpdateInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkPassword: async (userUpdateInVo: UserUpdateInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userUpdateInVo' is not null or undefined
            assertParamExists('checkPassword', 'userUpdateInVo', userUpdateInVo)
            const localVarPath = `/v1/user/pswd/encrypt/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userUpdateInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 사용자 정보 조회 api
         * @summary 사용자 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqUserInfoDtl: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 회원 페이지 리스트 api
         * @summary 회원 페이징 리스트
         * @param {UserPageInqInVo} userPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqUserPage: async (userPageInqInVo: UserPageInqInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userPageInqInVo' is not null or undefined
            assertParamExists('inqUserPage', 'userPageInqInVo', userPageInqInVo)
            const localVarPath = `/v1/user/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userPageInqInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 사용자 정보 수정 api
         * @summary 사용자 정보 수정
         * @param {UserUpdateInVo} userUpdateInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcUserInfo: async (userUpdateInVo: UserUpdateInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userUpdateInVo' is not null or undefined
            assertParamExists('mdfcUserInfo', 'userUpdateInVo', userUpdateInVo)
            const localVarPath = `/v1/user/modify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userUpdateInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 사용자 패스워드 찾기(이메일/SMS) 등록 api
         * @summary 사용자 패스워드 찾기(이메일/SMS) 등록
         * @param {UserPswdSearchInVo} userPswdSearchInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsUserPswdSearch: async (userPswdSearchInVo: UserPswdSearchInVo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userPswdSearchInVo' is not null or undefined
            assertParamExists('rgsUserPswdSearch', 'userPswdSearchInVo', userPswdSearchInVo)
            const localVarPath = `/v1/user/pswd/search/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userPswdSearchInVo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserControllerApi - functional programming interface
 * @export
 */
export const UserControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 사용자 현재 패스워드 체크
         * @summary 사용자 현재 패스워드 체크
         * @param {UserUpdateInVo} userUpdateInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkPassword(userUpdateInVo: UserUpdateInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPswdCheckOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkPassword(userUpdateInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.checkPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 사용자 정보 조회 api
         * @summary 사용자 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqUserInfoDtl(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqUserInfoDtl(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.inqUserInfoDtl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 회원 페이지 리스트 api
         * @summary 회원 페이징 리스트
         * @param {UserPageInqInVo} userPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inqUserPage(userPageInqInVo: UserPageInqInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageUserOutVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inqUserPage(userPageInqInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.inqUserPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 사용자 정보 수정 api
         * @summary 사용자 정보 수정
         * @param {UserUpdateInVo} userUpdateInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mdfcUserInfo(userUpdateInVo: UserUpdateInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mdfcUserInfo(userUpdateInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.mdfcUserInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 사용자 패스워드 찾기(이메일/SMS) 등록 api
         * @summary 사용자 패스워드 찾기(이메일/SMS) 등록
         * @param {UserPswdSearchInVo} userPswdSearchInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rgsUserPswdSearch(userPswdSearchInVo: UserPswdSearchInVo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rgsUserPswdSearch(userPswdSearchInVo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.rgsUserPswdSearch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserControllerApi - factory interface
 * @export
 */
export const UserControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserControllerApiFp(configuration)
    return {
        /**
         * 사용자 현재 패스워드 체크
         * @summary 사용자 현재 패스워드 체크
         * @param {UserUpdateInVo} userUpdateInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkPassword(userUpdateInVo: UserUpdateInVo, options?: any): AxiosPromise<UserPswdCheckOutVo> {
            return localVarFp.checkPassword(userUpdateInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 사용자 정보 조회 api
         * @summary 사용자 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqUserInfoDtl(options?: any): AxiosPromise<UserOutVo> {
            return localVarFp.inqUserInfoDtl(options).then((request) => request(axios, basePath));
        },
        /**
         * 회원 페이지 리스트 api
         * @summary 회원 페이징 리스트
         * @param {UserPageInqInVo} userPageInqInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inqUserPage(userPageInqInVo: UserPageInqInVo, options?: any): AxiosPromise<PageUserOutVo> {
            return localVarFp.inqUserPage(userPageInqInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 사용자 정보 수정 api
         * @summary 사용자 정보 수정
         * @param {UserUpdateInVo} userUpdateInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mdfcUserInfo(userUpdateInVo: UserUpdateInVo, options?: any): AxiosPromise<void> {
            return localVarFp.mdfcUserInfo(userUpdateInVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 사용자 패스워드 찾기(이메일/SMS) 등록 api
         * @summary 사용자 패스워드 찾기(이메일/SMS) 등록
         * @param {UserPswdSearchInVo} userPswdSearchInVo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rgsUserPswdSearch(userPswdSearchInVo: UserPswdSearchInVo, options?: any): AxiosPromise<void> {
            return localVarFp.rgsUserPswdSearch(userPswdSearchInVo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserControllerApi - object-oriented interface
 * @export
 * @class UserControllerApi
 * @extends {BaseAPI}
 */
export class UserControllerApi extends BaseAPI {
    /**
     * 사용자 현재 패스워드 체크
     * @summary 사용자 현재 패스워드 체크
     * @param {UserUpdateInVo} userUpdateInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public checkPassword(userUpdateInVo: UserUpdateInVo, options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).checkPassword(userUpdateInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 사용자 정보 조회 api
     * @summary 사용자 정보 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public inqUserInfoDtl(options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).inqUserInfoDtl(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 회원 페이지 리스트 api
     * @summary 회원 페이징 리스트
     * @param {UserPageInqInVo} userPageInqInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public inqUserPage(userPageInqInVo: UserPageInqInVo, options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).inqUserPage(userPageInqInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 사용자 정보 수정 api
     * @summary 사용자 정보 수정
     * @param {UserUpdateInVo} userUpdateInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public mdfcUserInfo(userUpdateInVo: UserUpdateInVo, options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).mdfcUserInfo(userUpdateInVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 사용자 패스워드 찾기(이메일/SMS) 등록 api
     * @summary 사용자 패스워드 찾기(이메일/SMS) 등록
     * @param {UserPswdSearchInVo} userPswdSearchInVo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public rgsUserPswdSearch(userPswdSearchInVo: UserPswdSearchInVo, options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).rgsUserPswdSearch(userPswdSearchInVo, options).then((request) => request(this.axios, this.basePath));
    }
}



